{"version":3,"sources":["Data/BitcoinStatusBar.tsx","Data/ModelManager.tsx","Data/Simulation.tsx","UX/AppNavbar.tsx","UX/Chat/Channel.tsx","UX/Chat/NewNickname.tsx","UX/Chat/NewChannel.tsx","UX/Chat/Chat.tsx","UX/ContractCreator/SapioPluginPicker/PluginTile.tsx","UX/ContractCreator/SapioPluginPicker/PluginForm.tsx","UX/ContractCreator/SapioPluginPicker/PluginSelector.tsx","UX/ContractCreator/CreateContractModal.tsx","UX/Diagram/DemoCanvasWidget.tsx","UX/Diagram/DiagramComponents/SpendLink/SpendLink.tsx","UX/Diagram/DiagramComponents/SpendLink/SpendLinkWidget.tsx","UX/Diagram/DiagramComponents/SpendLink/SpendLinkFactory.tsx","UX/Diagram/DiagramComponents/ConfirmationWidget.tsx","UX/Diagram/DiagramComponents/TransactionNode/TransactionNodeWidget.tsx","UX/Diagram/DiagramComponents/TransactionNode/TransactionNodeFactory.tsx","UX/Diagram/DiagramComponents/UTXONode/UTXONodeWidget.tsx","UX/Diagram/DiagramComponents/UTXONode/UTXONodeFactory.tsx","UX/Entity/Detail/PSBTDetail.tsx","UX/Entity/Detail/TransactionDetail.tsx","UX/Entity/EntityViewer.tsx","UX/ContractCreator/LoadHexModal.tsx","UX/ContractCreator/SapioCompilerModal.tsx","UX/ContractCreator/SaveHexModal.tsx","UX/ContractCreator/ViewContractModal.tsx","UX/Modals.tsx","UX/CustomForms/Widgets.tsx","common/settings_gen.ts","UX/Settings/Settings.tsx","Wallet/DeleteDialog.tsx","Wallet/ContractList.tsx","Wallet/WalletSendDialog.tsx","Wallet/AvailableBalance.tsx","Wallet/WalletSendForm.tsx","Wallet/WalletSend.tsx","Wallet/WalletHistory.tsx","Wallet/NewWorkspace.tsx","Wallet/Workspaces.tsx","Wallet/Wallet.tsx","App.tsx","serviceWorker.js","index.tsx","Wallet/Slice/Reducer.ts","Data/Transaction.ts","Store/store.ts","UX/Diagram/DiagramComponents/SpendLink/SpendPortModel.tsx","Data/ContractManager.ts","util.tsx","UX/Diagram/DiagramComponents/OutputLink.ts","UX/Diagram/DiagramComponents/OutputPortModel.ts","UX/Diagram/DiagramComponents/SpendLink/SpendLinkModel.ts","Data/DataSlice.ts","UX/Entity/Detail/OutpointDetail.tsx","Data/BitcoinNode.ts","Data/UTXO.ts","UX/Diagram/DiagramComponents/UTXONode/UTXONodeModel.ts","UX/Diagram/DiagramComponents/TransactionNode/TransactionNodeModel.ts","UX/Entity/EntitySlice.tsx","AppSlice.tsx","UX/ModalSlice.tsx","UX/ContractCreator/ContractCreatorSlice.tsx","UX/Entity/Detail/InputDetail.tsx","UX/Entity/Detail/OutputDetail.tsx","UX/Entity/Detail/UTXODetail.tsx","UX/Entity/Detail/Hex.tsx","UX/Miniscript/Compiler.tsx","Settings/SettingsSlice.tsx","Data/SimulationSlice.tsx"],"names":["BitcoinStatusBar","props","theme","useTheme","freq","useSelector","selectNodePollFreq","React","useState","balance","setBalance","blockchaininfo","setBlockchaininfo","useEffect","next","mounted","periodic_update_stats","a","api","check_balance","console","error","info","log","prefs","clamp","setTimeout","clearTimeout","network","chain","headers","blocks","Paper","square","sx","top","bottom","className","style","background","palette","default","color","main","Toolbar","variant","Typography","component","marginLeft","ModelManager","model","this","contract","addAll","txn_models","filter","v","PhantomTransactionModel","utxo_models","utxo_links","map","m","getOutPorts","flat","p","Object","entries","getLinks","tx_links","forEach","remove_from_model","timing_cache","cache","clear","SimulationController","dispatch","useDispatch","selectNetwork","Date","now","min_time_ms","setMinTimeMs","max_time_ms","setMaxTimeMs","pct_to_value","max","min","Math","round","first_tx_time_ms","setFirstTxTime","current_time_ms","setCurrentTxTime","is_regtest","current_year","getFullYear","min_blocks","setMinBlocks","max_blocks","setMaxBlocks","first_tx_block","setFirstTxBlockPct","current_block","setCurrentBlockPct","wrapper","f","e","input","currentTarget","updateMinBlocks","valueAsNumber","updateMaxBlocks","unreachable","reachable_at_time","r","get_txid","set_unreachable","toLocaleString","undefined","timeZone","to_time_str","t","getUTCFullYear","getUTCMonth","toString","padStart","getUTCDay","getUTCHours","getUTCMinutes","max_time_str","min_time_str","ClockControl","Slider","value","valueLabelFormat","index","d","toLocaleDateString","toLocaleTimeString","step","valueLabelDisplay","onChange","n","activeThumb","length","TextField","label","type","defaultValue","parse","InputLabelProps","shrink","Tooltip","title","IconButton","aria-label","onClick","new_first_tx_time","new_current_time","new_start","new_end","delta","abs","green","BlockControl","new_first_tx_block","new_current_block","onSubmit","preventDefault","backgroundColor","Color","fade","hide","red","pink","AppNavbar","List","textAlign","MainScreens","Divider","ContractMenu","relayout","NodeMenu","bitcoin_node_manager","Simulator","SettingsMenuItem","ListItem","disableGutters","button","switch_showing","ListItemIcon","ListItemText","primary","simulateRef","useRef","sim_open","setSimOpen","ref","Menu","anchorEl","current","anchorOrigin","vertical","horizontal","keepMounted","open","onClose","MenuItem","toggle_showing","Chat","contractRef","contracts_open","setContractsOpen","open_modal","create_contract_from_file","window","electron","sapio","load_wasm_plugin","load_contract_list","apis","alert","err","set_apis","ok","recreate_contract","nodeRef","node_open","setNodeOpen","close","get_new_address","addr","write_clipboard","generate_blocks","catch","toggle_status_bar","Channel","messages","set_messages","cancel","since","all_messages","last","chat","list_messages_channel","channel_id","_","msg","received_time","msg_area","scrollTop","scrollHeight","Box","Button","i","nickname","body","Typing","typed","set_typed","useFormControl","focused","noValidate","autoComplete","ev","FormControl","fullWidth","FormGroup","row","width","FilledInput","autoFocus","send","Data","channel","sent_time_ms","NewNickname","set_value","key_value","set_key_value","Dialog","show","DialogTitle","DialogContent","DialogContentText","margin","name","DialogActions","add_user","NewChannel","init","Users","Channels","UserGrid","field","flex","getActions","params","icon","headerName","minWidth","users","set_users","list_users","add_new_user","set_add_new_user","components","Add","rows","id","key","columns","disableExtendRowFullWidth","columnBuffer","pageSize","rowsPerPageOptions","disableColumnSelector","disableSelectionOnClick","channels","set_channels","list_channels","set_channel","add_new_channel","set_add_new_channel","ChannelColumns","logo_image","app","logo","height","justifyContent","position","display","alt","src","PluginTile","select_api","PluginForm","handleSubmit","event","formData","create_contract_of_type","JSON","stringify","show_apis","data","set_data","handleClick","navigator","clipboard","readText","s","schema","PluginSelector","selected","selectAPI","all_apis","selectAPIEntries","tiles","Array","from","CreateContractModalInner","unselect","CreateContractModal","Container","styled","div","DemoCanvasWidget","children","unique_key","all_nodes","Map","transparent","update_loop","percent_idx","seconds","selectAnimateFlow","store","getState","increment","node","circle","path","white","requestAnimationFrame","animation_loop","percentage","point","getPointAtLength","getTotalLength","x","y","text","setAttribute","is_running","SpendLinkSegment","check_is_reachable","selectIsReachable","stroke","link_type","secondary","light","set","faded_stroke","child","linked_to","reachable","constructor","TransactionModel","delete","fill","strokeLinecap","strokeWidth","getOptions","textAnchor","fontSize","alignmentBaseline","SpendLinkWidget","extraProps","link","Bottom","SpendLinkFactory","generateLinkSegment","state","isSelected","refPaths","push","onMouseLeave","setState","onMouseEnter","getID","strokeOpacity","onContextMenu","points","getPoints","paths","generateLink","getSVGPath","onMouseDown","addPointToLink","getTargetPort","generatePoint","j","LinkWidget","generateLinePath","data-default-link-test","testName","DefaultLinkWidget","SpendLinkModel","diagramEngine","engine","DefaultLinkFactory","ConfirmationWidget","status","selectStatus","contrastText","warning","Node","Title","textColor","TitleName","PortsTop","PortsBottom","PortsContainerTop","PortsContainerBottom","TransactionNodeWidget","selected_entity_id","selectEntityToView","opts","is_reachable","txn","getId","selectTXNColor","purpose","selectTXNPurpose","generatePort","port","color_render","alpha","text_color","is_selected","getInPorts","data-default-node-name","TransactionNodeFactory","TransactionNodeModel","AbstractReactFactory","UTXONode","PortsContainerUTXOTop","PortsContainerUTXOBottom","UTXONodeWidget","has_continuations","keys","selectContinuation","txid","random","getAmount","amount","setAmount","l","registerListener","sync","deregisterListener","ports_in","ports_out","ports_top","ports_bottom","is_continuable","reachable_cl","hash","nIn","data-default-utxonode-name","PrettyAmount","UTXONodeFactory","UTXONodeModel","PSBTHandler","show_flash","psbt","Bitcoin","fetch_psbt","psbt_in","fromBase64","combine","command","method","parameters","bitcoin_command","signed","as_psbt","complete","result","hex","new_psbt","finalize","sapio_finalized","sapio_result","completed","hex_tx","fromHex","sent","message","save_psbt","PSBTDetail","psbt_selection_form","psbts","setPSBT","flash","setFlash","psbt_handler","onclick","click","selectable_psbts","w","toBase64","substr","InputLabel","Select","labelId","idx","parseInt","Hex","sign_psbt","yellow","combine_psbt","purple","finalize_psbt","orange","TransactionDetail","entity_id","entity","TXIDAndWTXIDMap","get_by_txid_s","current_contract","txid_map","hidden","TransactionDetailInner","find_tx_model","outs","o","OutputDetail","txoutput","ins","tx","inp","witnesses","witness_set","flatMap","b","InputDetail","txinput","outpoint_to_id","hash_to_hex","sequences","sequence","greatest_relative_time","greatest_relative_height","locktime_enable","DEFAULT_SEQUENCE","sequence_convert","relative_time","relative_height","relative_time_string","time_to_pretty_string","relative_time_jsx","relative_height_jsx","compute_relative_timelocks","locktime","as_date","setSeconds","lt","toUTCString","inner_debounce_color","debounce","set_custom_color","inner_debounce_purpose","set_custom_purpose","absolute_lock_jsx","target","toHex","CurrentlyViewedEntity","setWidth","onMouseUp","document","removeEventListener","onMouseMove","innerWidth","clientX","addEventListener","deselect_entity","lookup_utxo_model","UTXODetail","FIELD_NAME","LoadHexModal","formRef","close_modal","multiline","elt","elements","namedItem","load_new_model","SapioCompilerModal","stopPropagation","placeholder","SaveHexModal","non_phantoms","item","findIndex","has_by_txid","txid_buf_to_string","program","get_json","fullScreen","aria-readonly","InputProps","readOnly","minHeight","save_contract","ViewContractModal","Modals","which","selectModal","PathOnly","val","set_val","select_filename","new_val","custom_fields","schemas","bitcoin","$schema","definitions","Auth","oneOf","enum","additionalProperties","properties","UserPass","items","$ref","maxItems","minItems","required","CookieFile","File","format","Network","Password","auth","allOf","host","description","minimum","AnimationSpeed","Enabled","maximum","SatsOrBitcoin","BitcoinAfter","AlwaysSats","AlwaysBitcoin","animation_speed","node_polling_freq","satoshis","local_oracle","file","interface","sapio_cli","IFace","ModuleHash","Nickname","PK","Preferences","Here","emulators","plugin_map","threshold","use_emulation","config","preferences","SettingPane","handlesubmit","nativeEvent","save_settings","poll_settings","get_args","load_settings_sync","args","fields","uiSchema","paddingTop","size","endIcon","Cancel","Settings","memo","SettingsInner","set_idx","dialog_node","set_dialog_node","test_bitcoind","then","h","code","test_sapio","show_config","conf","check_emulator","emulator","read_log","json","pk","Tabs","orientation","Tab","Boolean","aria-labelledby","aria-describedby","txt","Guide","my_idx","start","kill","DeleteDialog","workspace","selectWorkspace","set_to_delete","to_delete","workspaces","trash","compiled_contracts","reload","ContractList","contracts","set_contracts","trigger_now","set_trigger_now","update","list","contract_rows","split","mod","time","open_contract_directory","Delete","fname","WalletSendDialog","amt","to","send_to_address","AvailableBalance","WalletSendForm","address","setAddress","get_address","set_params","reset","WalletSend","WalletHistory","transactions","setTransactions","list_transactions","txns","valueGetter","blocktime","NewWorkspace","Workspaces","set_workspaces","show_new_workspace","set_new_workspace","FolderOpen","switch_wallet_tab","switch_workspace","Wallet","selectWalletTab","borderBottom","borderColor","overflowY","jump_to_entity","canvas","getCanvas","setZoomLevel","clientHeight","clientWidth","getBoundingClientRect","left","getPosition","zoomf","getZoomLevel","x_coord","y_coord","setOffset","dag","DagreEngine","graph","rankdir","align","ranker","marginx","marginy","includeLinks","AppInner","bitcoin_node_bar","selectStatusBar","load_new_contract","selectContract","contract_data","counter","read_trigger_relayout","set_trigger_relayout","is_showing","selectShowing","redistribute","repaintCanvas","zoomToFit","dest_ref","useMemo","destroy","BitcoinNodeManager","prefersDarkMode","useMediaQuery","createTheme","mode","ThemeProvider","Viewing","ContractViewer","selectShouldViewEntity","timing_simulator_enabled","selectSimIsShowing","details","paper","divider","Collapse","in","App","createEngine","DiagramModel","getNodeFactories","registerFactory","getLinkFactories","setGridSize","setLocked","model_manager","setModel","trigger_relayout","new_contract","ContractModel","unload","load","set_continuations","continuations","location","hostname","match","root","getElementById","ReactDOM","render","serviceWorker","ready","registration","unregister","walletSlice","createSlice","initialState","showing","reducers","action","payload","actions","walletReducer","reducer","all_witnesses","utxo_labels","NodeColor","get","input_links","subcolor","clone","metadata","merge","out","utxo","UTXOModel","new_utxo_inner_data","script","addOutPort","create_link","addInPort","selectionChanged","select_txn","output_metadata","u","simp","removeNode","removeLink","override_txid","configureStore","entityReducer","appReducer","contractCreatorReducer","simulationReducer","settingsReducer","modalReducer","dataReducer","middleware","thunk","devTools","SpendPortModel","options","factory","createLinkModel","setSourcePort","setTargetPort","DefaultPortModel","new","c","slice","process_data","obj","txn_colors","txn_labels","assert","zip","txn_label","txn_color","groupBy","txn_group","utxo_label","witness","base_txn","txn_model","add","to_create","inps","mock_txn","n_outputs","el","addOutput","Buffer","utxo_metadata","process_txn_models","inputs_map","InputMap","txn_m","process_inputs_map","to_add","m_txn","output_index","opt_utxo_model","opt_out","utxo_model","spenders","get_txid_s","witstack","sha256","alloc","copy","max_amount","reduce","fromOutputScript","regtest","spender","spend_idx","Error","spent_by","spends","process_utxo_models","mergeAndDeduplicateSorted","array1","array2","iteratee","mergedArray","unreachable_by_time","bases","max_time","max_height","start_height","start_time","arrays","unreachable_by_time_inner","v1","floor","v2","sortedUniqBy","pop","compute_timing","cache_entry","unlock_at_relative_height","unlock_at_relative_time","locktime_enabled","s_mask","is_height","unlock_time","unlock_height","base","elapsed_time","elapsed_blocks","get_txid_s_group","values","output_spender","compute_timing_of_children","time_when_spendable","height_when_spendable","all_descendants","uniqBy","sortBy","concat","checkable","entry","txs","linked_psbt","c_txid","c_idx","continue_apis","preprocess_data","txid_s","input_map_s","Symbol","that","key1","vals","vals2","selectMaxSats","PrettyAmountField","endAdornment","get_wtxid_backwards","getHash","txid_map_s","get_by_txid","delete_by_txid","hasOwn","ret","suffix","trunc","is_mock_outpoint","prototype","hasOwnProperty","call","OutputLinkModel","OutputPortModel","DefaultLinkModel","settingsSlice","load_status","isEqual","OutpointDetail","RefOutpointDetail","select_utxo","TXIDDetail","Component","swap","arr","compute_impossible","cm","changed","unspendable","tmi","fromEntries","mutable_state","k","derive_state","any_changed","unknown","confirmations","reverse","should_next_tx","next_periodic_check","periodic_check","bind","commands","should_update","get_transaction_status","period","execute","count","txids","tm","req","executeBatch","results","txdata","Transaction","txout","blockhash","scriptPubKey","vout","confirmed","s_idx","spend_link","update_utxomodel","utxo_in","to_iterate","spend","portsIn","portsOut","fireEvent","lookupTable","splice","indexOf","after","alignment","PortModelAlignment","TOP","addPort","BOTTOM","NodeModel","reachable_cb","_a","confirmed_cb","entitySlice","utxos","last_selected","show_entity_viewer","colors","clear_utxos","__flash","__load_utxo","fetch_utxo","create","fund_out","funded","selectUTXO","id_s","selectUTXOFlash","appSlice","status_bar","add_effect_to_contract","context","effects","type_arg","create_contract","compiled_contract","file_name","open_contract_from_file","selectHasEffect","createSelectorCreator","defaultMemoize","createDeepEqualSelector","modalSlice","contractCreatorSlice","selected_api","selectAPIs","rs","maybeDecode","to_asm","toASM","decompile","witness_selection_form","witness_selection","setWitness","witness_display","scriptValue","seq","witness_options","scriptSig","decomp","C","UTXODetailInner","prev","select_continuations","outpoint","external_utxo","this_is_mock","is_confirmed","asm","creator","check_exists","ContinuationOption","cont","OutputMetadataTable","SIMPNeg12345","simp_neg_12345","nft","maxWidth","cid","is_open","setOpen","lastIndexOf","MemoizeContForm","name_schema","ContForm","form","name_form","this_effect_name","has_effect","validate","errors","addError","liveValidate","BaseHex","tip_message","set_tip","writeText","arrow","placement","styling","ASM","ReadOnly","MiniscriptCompiler","miniscript","load_miniscript","native","CompInput","UNICODE_LINE","compiled","set_compiled","keytab_string","set_keytab_string","taproot","set_taproot","KeyTab","frags","nick_key","trim","Fragments","frag","compile","minRows","whiteSpace","wordBreak","ShowTaproot","scripts","depth","parsed","test","load_settings","settings","simulationSlice","unreachable_models"],"mappings":"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","file":"static/js/main.818d8640.chunk.js","sourcesContent":["import { clamp } from 'lodash';\nimport React from 'react';\nimport { BitcoinNodeManager } from './BitcoinNode';\nimport './BitcoinStatusBar.css';\nimport { Paper, Toolbar, Typography, useTheme } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectNodePollFreq } from '../Settings/SettingsSlice';\ninterface BitcoinStatusBarProps {\n    api: BitcoinNodeManager;\n}\nexport function BitcoinStatusBar(props: BitcoinStatusBarProps) {\n    const theme = useTheme();\n    const freq = useSelector(selectNodePollFreq);\n    const [balance, setBalance] = React.useState<number>(0);\n    const [blockchaininfo, setBlockchaininfo] = React.useState<any>(null);\n    React.useEffect(() => {\n        let next: ReturnType<typeof setTimeout> | null = null;\n        let mounted = true;\n        const periodic_update_stats = async () => {\n            next = null;\n            try {\n                const balance = await props.api.check_balance();\n                setBalance(balance);\n            } catch (err) {\n                console.error(err);\n                setBalance(0);\n            }\n\n            try {\n                const info = await props.api.blockchaininfo();\n                console.log(balance);\n                setBlockchaininfo(info);\n            } catch (err) {\n                console.error(err);\n                setBlockchaininfo(null);\n            }\n\n            if (mounted) {\n                let prefs = freq;\n                prefs = clamp(prefs ?? 0, 5, 5 * 60);\n                console.log('StatusBar', 'NEXT PERIODIC CHECK IN ', prefs);\n                next = setTimeout(periodic_update_stats, prefs * 1000);\n            }\n        };\n\n        let prefs = freq;\n        prefs = clamp(prefs ?? 0, 5, 5 * 60);\n        next = setTimeout(periodic_update_stats, prefs * 1000);\n        return () => {\n            mounted = false;\n            if (next !== null) clearTimeout(next);\n        };\n    }, []);\n\n    const network = blockchaininfo?.chain ?? 'disconnected';\n    const headers = blockchaininfo?.headers ?? '?';\n    const blocks = blockchaininfo?.headers ?? '?';\n    return (\n        <Paper\n            square={true}\n            sx={{\n                top: 'auto',\n                bottom: 0,\n            }}\n            className=\"BitcoinStatusBar Draggable\"\n            style={{\n                background: theme.palette.background.default,\n                color: theme.palette.info.main,\n            }}\n        >\n            <Toolbar variant=\"dense\">\n                <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n                    <div>chain: {network}</div>\n                </Typography>\n                <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n                    <div style={{ marginLeft: '0.5em' }}>\n                        balance: {balance} BTC\n                    </div>\n                </Typography>\n                <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n                    <div style={{ marginLeft: '0.5em' }}>\n                        processed: {blocks}/{headers}\n                    </div>\n                </Typography>\n            </Toolbar>\n        </Paper>\n    );\n}\n","import { DiagramModel, LinkModel } from '@projectstorm/react-diagrams';\nimport { ContractModel, timing_cache } from './ContractManager';\nimport { TransactionModel, PhantomTransactionModel } from './Transaction';\nimport { UTXOModel } from './UTXO';\nimport { SpendPortModel } from '../UX/Diagram/DiagramComponents/SpendLink/SpendPortModel';\n\nexport class ModelManager {\n    model: DiagramModel;\n    constructor(model: DiagramModel) {\n        this.model = model;\n    }\n    load(contract: ContractModel) {\n        this.model.addAll(\n            ...contract.txn_models.filter(\n                (v) => !(v instanceof PhantomTransactionModel)\n            )\n        );\n        this.model.addAll(...contract.utxo_models);\n        const utxo_links: LinkModel[] = contract.utxo_models\n            .map((m: UTXOModel) => m.getOutPorts())\n            .flat(1)\n            .map((p: SpendPortModel) =>\n                Object.entries(p.getLinks()).map((v) => v[1])\n            )\n            .flat(1);\n        this.model.addAll(...utxo_links);\n        const tx_links: LinkModel[] = contract.txn_models\n            .filter((v) => !(v instanceof PhantomTransactionModel))\n            .map((m: TransactionModel) => m.getOutPorts())\n            .flat(1)\n            .map((p: SpendPortModel) =>\n                Object.entries(p.getLinks()).map((v) => v[1])\n            )\n            .flat(1);\n\n        this.model.addAll(...tx_links);\n    }\n    unload(contract: ContractModel) {\n        contract.txn_models.forEach((m) => m.remove_from_model(this.model));\n        timing_cache.cache.clear();\n    }\n}\n","import React, { FormEvent } from 'react';\nimport { ContractModel } from '../Data/ContractManager';\n\nimport './Simulation.css';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { set_unreachable } from './SimulationSlice';\nimport { TXID } from '../util';\nimport {\n    IconButton,\n    Slider,\n    TextField,\n    Typography,\n    Tooltip,\n    useTheme,\n} from '@mui/material';\nimport MoreHorizOutlinedIcon from '@mui/icons-material/MoreHorizOutlined';\nimport { green, red, pink } from '@mui/material/colors';\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\n\nimport { ChangeEvent } from 'react-transition-group/node_modules/@types/react';\nimport { selectNetwork } from '../Settings/SettingsSlice';\nimport Color from 'color';\nexport function SimulationController(props: {\n    contract: ContractModel;\n    engine: DiagramEngine;\n    hide: () => void;\n}) {\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const network = useSelector(selectNetwork);\n    // Start at 0 to make scaling work riht away\n    const [min_time_ms, setMinTimeMs] = React.useState(Date.now());\n    const [max_time_ms, setMaxTimeMs] = React.useState(\n        Date.now() + 365 * 24 * 60 * 60 * 1000\n    );\n    const pct_to_value = (p: number, max: number, min: number) =>\n        Math.round((max - min) * (p / 100.0) + min);\n    const [first_tx_time_ms, setFirstTxTime] = React.useState(\n        pct_to_value(33, max_time_ms, min_time_ms)\n    );\n    const [current_time_ms, setCurrentTxTime] = React.useState(\n        pct_to_value(50, max_time_ms, min_time_ms)\n    );\n    const is_regtest = network === 'Regtest' || network === 'Signet';\n    const current_year = Math.round(\n        (new Date().getFullYear() - 2008) * 144 * 365 - (144 * 365) / 2\n    );\n    const [min_blocks, setMinBlocks] = React.useState(\n        is_regtest ? 100 : current_year\n    );\n    const [max_blocks, setMaxBlocks] = React.useState(\n        is_regtest ? 1000 : current_year + 365 * 144\n    );\n    const [first_tx_block, setFirstTxBlockPct] = React.useState(\n        pct_to_value(33, max_blocks, min_blocks)\n    );\n    const [current_block, setCurrentBlockPct] = React.useState(\n        pct_to_value(66, max_blocks, min_blocks)\n    );\n    const clear = () => {\n        dispatch(set_unreachable({}));\n    };\n    const wrapper =\n        (f: (input: HTMLInputElement) => void) => (e: FormEvent) => {\n            const input = e.currentTarget as HTMLInputElement;\n            f(input);\n        };\n\n    const updateMinTime = (e: ChangeEvent<HTMLInputElement>) => {\n        setMinTimeMs(Date.parse(e.currentTarget.value) ?? max_time_ms);\n    };\n    const updateBlocks = (\n        e: Event,\n        n: number | number[],\n        activeThumb: number\n    ) => {\n        if (typeof n !== 'number') {\n            if (n.length === 2) {\n                setFirstTxBlockPct(n[0]!);\n                setCurrentBlockPct(n[1]!);\n            }\n        }\n    };\n    const updateTimes = (\n        e: Event,\n        n: number | number[],\n        activeThumb: number\n    ) => {\n        if (typeof n !== 'number') {\n            if (n.length === 2) {\n                setFirstTxTime(n[0]!);\n                setCurrentTxTime(n[1]!);\n            }\n        }\n    };\n    const updateMaxTime = (e: ChangeEvent<HTMLInputElement>) => {\n        setMaxTimeMs(Date.parse(e.currentTarget.value) ?? max_time_ms);\n    };\n    const updateMinBlocks = wrapper((input: HTMLInputElement) => {\n        setMinBlocks(input.valueAsNumber);\n    });\n    const updateMaxBlocks = wrapper((input: HTMLInputElement) => {\n        setMaxBlocks(input.valueAsNumber);\n    });\n    React.useEffect(() => {\n        const unreachable = props.contract.reachable_at_time(\n            current_time_ms / 1000,\n            current_block,\n            first_tx_time_ms / 1000,\n            first_tx_block\n        );\n        const r: Record<TXID, null> = {};\n        for (const model of unreachable) {\n            r[model.get_txid()] = null;\n        }\n        dispatch(set_unreachable(r));\n    }, [\n        first_tx_block,\n        first_tx_time_ms,\n        max_blocks,\n        min_blocks,\n        max_time_ms,\n        min_time_ms,\n        current_time_ms,\n        current_block,\n    ]);\n\n    const snapBlocks = () => {\n        const new_first_tx_block = first_tx_block;\n        const new_current_block = current_block;\n        if (new_first_tx_block === new_current_block) return;\n\n        let new_start = Math.min(new_first_tx_block, new_current_block);\n        // at least one day...\n        let new_end = Math.max(\n            new_first_tx_block,\n            new_current_block,\n            new_start + 144\n        );\n        const delta = Math.abs(new_current_block - new_first_tx_block);\n        new_start = Math.max(new_start - delta, 0);\n        new_end += delta;\n\n        setMinBlocks(Math.round(new_start));\n        setMaxBlocks(Math.round(new_end));\n        setFirstTxBlockPct(\n            pct_to_value(\n                new_current_block > new_first_tx_block ? 33 : 66,\n                Math.round(new_end),\n                Math.round(new_start)\n            )\n        );\n        setCurrentBlockPct(\n            pct_to_value(\n                new_current_block > new_first_tx_block ? 66 : 33,\n                Math.round(new_end),\n                Math.round(new_start)\n            )\n        );\n    };\n    const snapTime = () => {\n        // work in seconds\n        const new_first_tx_time = first_tx_time_ms / 1000;\n        const new_current_time = current_time_ms / 1000;\n        if (new_first_tx_time === new_current_time) return;\n\n        let new_start = Math.min(new_first_tx_time, new_current_time);\n        // at least one day...\n        let new_end = Math.max(\n            new_first_tx_time,\n            new_current_time,\n            new_start + 24 * 60 * 60\n        );\n        const delta = Math.abs(new_current_time - new_first_tx_time);\n        new_start -= delta;\n        new_end += delta;\n\n        setMinTimeMs(new_start * 1000);\n        setMaxTimeMs(new_end * 1000);\n        setCurrentTxTime(\n            pct_to_value(\n                new_current_time > new_first_tx_time ? 66 : 33,\n                new_end * 1000,\n                new_start * 1000\n            )\n        );\n        setFirstTxTime(\n            pct_to_value(\n                new_current_time > new_first_tx_time ? 33 : 66,\n                new_end * 1000,\n                new_start * 1000\n            )\n        );\n    };\n    const first_tx_time_str = new Date(first_tx_time_ms).toLocaleString(\n        undefined,\n        {\n            timeZone: 'UTC',\n        }\n    );\n    const current_time_str = new Date(current_time_ms).toLocaleString(\n        undefined,\n        {\n            timeZone: 'UTC',\n        }\n    );\n    const to_time_str = (t: Date) =>\n        `${t.getUTCFullYear()}-${t\n            .getUTCMonth()\n            .toString()\n            .padStart(2, '0')}-${t.getUTCDay().toString().padStart(2, '0')}T${t\n            .getUTCHours()\n            .toString()\n            .padStart(2, '0')}:${t\n            .getUTCMinutes()\n            .toString()\n            .padStart(2, '0')}`;\n    const max_time_str = to_time_str(new Date(max_time_ms));\n    const min_time_str = to_time_str(new Date(min_time_ms));\n    const ClockControl = (\n        <div className=\"Controler\">\n            <div className=\"ControlerSliders\">\n                <Slider\n                    value={[first_tx_time_ms, current_time_ms]}\n                    valueLabelFormat={(value: number, index: number) => {\n                        const d = new Date(value);\n                        return (\n                            <div>\n                                <Typography>\n                                    {d.toLocaleDateString()}\n                                </Typography>\n                                <p>{d.toLocaleTimeString()}</p>\n                            </div>\n                        );\n                    }}\n                    step={1000}\n                    min={min_time_ms}\n                    max={max_time_ms}\n                    valueLabelDisplay=\"on\"\n                    onChange={updateTimes}\n                />\n            </div>\n            <div className=\"ControlerSettings\">\n                <h6> Date</h6>\n                <TextField\n                    label=\"Start Time\"\n                    type=\"datetime-local\"\n                    defaultValue={min_time_str}\n                    onChange={updateMinTime}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n                <TextField\n                    label=\"End Time\"\n                    type=\"datetime-local\"\n                    defaultValue={max_time_str}\n                    onChange={updateMaxTime}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                />\n\n                <Tooltip title=\"Click to Snap Time\">\n                    <IconButton aria-label=\"snap-time\" onClick={snapTime}>\n                        <MoreHorizOutlinedIcon style={{ color: green[500] }} />\n                    </IconButton>\n                </Tooltip>\n            </div>\n        </div>\n    );\n\n    const BlockControl = (\n        <div className=\"Controler\">\n            <div className=\"ControlerSliders\">\n                <Slider\n                    value={[first_tx_block, current_block]}\n                    min={min_blocks}\n                    max={max_blocks}\n                    valueLabelDisplay=\"on\"\n                    onChange={updateBlocks}\n                />\n            </div>\n            <div className=\"ControlerSettings\">\n                <h6> Height</h6>\n                <div>\n                    <TextField\n                        label=\"Start Height\"\n                        value={min_blocks}\n                        type=\"number\"\n                        onChange={updateMinBlocks}\n                    />\n                </div>\n                <div>\n                    <TextField\n                        label=\"End Height\"\n                        value={max_blocks}\n                        type=\"number\"\n                        onChange={updateMaxBlocks}\n                    />\n                </div>\n\n                <Tooltip title=\"Click to Snap Blocks\">\n                    <IconButton aria-label=\"snap-blocks\" onClick={snapBlocks}>\n                        <MoreHorizOutlinedIcon style={{ color: green[500] }} />\n                    </IconButton>\n                </Tooltip>\n            </div>\n        </div>\n    );\n    return (\n        <form\n            onSubmit={(e: React.FormEvent) => e.preventDefault()}\n            className=\"Simulation\"\n            style={{\n                backgroundColor: Color(theme.palette.background.default)\n                    .fade(0.2)\n                    .toString(),\n            }}\n        >\n            <Tooltip title=\"Close Simulator\">\n                <IconButton aria-label=\"close-sim\" onClick={props.hide}>\n                    <CancelOutlinedIcon style={{ color: red[500] }} />\n                </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Hide Simulator Results\">\n                <IconButton aria-label=\"hide-sim\" onClick={clear}>\n                    <VisibilityOffOutlinedIcon style={{ color: pink[500] }} />\n                </IconButton>\n            </Tooltip>\n            <div className=\"Controlers\">\n                {BlockControl}\n                {ClockControl}\n            </div>\n        </form>\n    );\n}\n","import { Chat } from '@mui/icons-material';\nimport SettingsIcon from '@mui/icons-material/Settings';\nimport {\n    Divider,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Menu,\n    MenuItem,\n    Paper,\n} from '@mui/material';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n    create_contract_from_file,\n    recreate_contract,\n    switch_showing,\n    toggle_status_bar,\n} from '../AppSlice';\nimport { BitcoinNodeManager } from '../Data/BitcoinNode';\nimport { ContractModel } from '../Data/ContractManager';\nimport { toggle_showing } from '../Data/SimulationSlice';\nimport './AppNavbar.css';\nimport { set_apis } from './ContractCreator/ContractCreatorSlice';\nimport { open_modal } from './ModalSlice';\nexport function AppNavbar(props: {\n    relayout: () => void;\n    contract: ContractModel;\n    bitcoin_node_manager: BitcoinNodeManager;\n}): JSX.Element {\n    const dispatch = useDispatch();\n\n    return (\n        <Paper className=\"AppNavBar\" square={true}>\n            <List sx={{ textAlign: 'center' }}>\n                <MainScreens></MainScreens>\n            </List>\n            <Divider />\n            <List>\n                <ContractMenu relayout={props.relayout} />\n                <NodeMenu bitcoin_node_manager={props.bitcoin_node_manager} />\n                <Simulator />\n            </List>\n            <Divider />\n            <List>\n                <SettingsMenuItem />\n            </List>\n            <Divider />\n        </Paper>\n    );\n}\n\nfunction SettingsMenuItem() {\n    const dispatch = useDispatch();\n    return (\n        <ListItem\n            disableGutters\n            button={false}\n            key={'settings'}\n            onClick={() => dispatch(switch_showing('Settings'))}\n        >\n            <ListItemIcon>\n                <SettingsIcon />\n            </ListItemIcon>\n            <ListItemText primary={'Settings'} />\n        </ListItem>\n    );\n}\nfunction Simulator() {\n    const dispatch = useDispatch();\n    const simulateRef = React.useRef<HTMLLIElement>(null);\n    const [sim_open, setSimOpen] = React.useState(false);\n    return (\n        <div>\n            <ListItem\n                disableGutters\n                button={false}\n                key={'Simulate'}\n                onClick={() => setSimOpen(true)}\n                ref={simulateRef}\n            >\n                <ListItemIcon></ListItemIcon>\n                <ListItemText primary={'Simulate'} />\n            </ListItem>\n            <Menu\n                anchorEl={simulateRef.current}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'right',\n                }}\n                keepMounted\n                open={sim_open}\n                onClose={() => setSimOpen(false)}\n            >\n                <MenuItem\n                    onClick={() => {\n                        setSimOpen(false);\n                        dispatch(toggle_showing());\n                    }}\n                >\n                    Timing\n                </MenuItem>\n            </Menu>\n        </div>\n    );\n}\n\nfunction MainScreens() {\n    const dispatch = useDispatch();\n    return (\n        <>\n            <ListItem\n                disableGutters\n                button={true}\n                key={'Wallet'}\n                onClick={() => dispatch(switch_showing('Wallet'))}\n            >\n                <ListItemIcon></ListItemIcon>\n                <ListItemText primary={'Wallet'} />\n            </ListItem>\n            <ListItem\n                disableGutters\n                button={true}\n                key={'Contract Creator'}\n                onClick={() => dispatch(switch_showing('ContractViewer'))}\n            >\n                <ListItemIcon></ListItemIcon>\n                <ListItemText primary={'Contract Creator'} />\n            </ListItem>\n            <ListItem\n                disableGutters\n                button\n                key={'Miniscript'}\n                onClick={async () => {\n                    dispatch(switch_showing('MiniscriptCompiler'));\n                }}\n            >\n                <ListItemIcon></ListItemIcon>\n                <ListItemText primary={'Miniscript Testing'} />\n            </ListItem>\n\n            <ListItem\n                disableGutters\n                button={true}\n                key={'Chat'}\n                onClick={() => dispatch(switch_showing('Chat'))}\n            >\n                <ListItemIcon>\n                    <Chat></Chat>\n                </ListItemIcon>\n                <ListItemText primary={'Chat'} />\n            </ListItem>\n        </>\n    );\n}\nfunction ContractMenu(props: { relayout: () => void }) {\n    const dispatch = useDispatch();\n    const contractRef = React.useRef<HTMLLIElement>(null);\n    const [contracts_open, setContractsOpen] = React.useState(false);\n\n    return (\n        <div>\n            <ListItem\n                disableGutters\n                button={false}\n                key={'Contract'}\n                onClick={() => setContractsOpen(true)}\n                ref={contractRef}\n            >\n                <ListItemIcon></ListItemIcon>\n                <ListItemText primary={'Contract'} />\n            </ListItem>\n            <Menu\n                anchorEl={contractRef.current}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'right',\n                }}\n                keepMounted\n                open={contracts_open}\n                onClose={() => setContractsOpen(false)}\n            >\n                <MenuItem\n                    onClick={() => {\n                        setContractsOpen(false);\n                        dispatch(open_modal('LoadHex'));\n                    }}\n                >\n                    Open Contract from Clipboard\n                </MenuItem>\n                <MenuItem\n                    onClick={() => {\n                        setContractsOpen(false);\n                        dispatch(create_contract_from_file());\n                    }}\n                >\n                    Open Contract from File\n                </MenuItem>\n                <MenuItem\n                    onClick={() => {\n                        setContractsOpen(false);\n                        dispatch(open_modal('SaveHex'));\n                    }}\n                >\n                    Save Contract\n                </MenuItem>\n                <MenuItem\n                    onClick={() => {\n                        setContractsOpen(false);\n                        window.electron.sapio.load_wasm_plugin();\n                    }}\n                >\n                    Load WASM Plugin\n                </MenuItem>\n                <MenuItem\n                    onClick={async () => {\n                        setContractsOpen(false);\n                        const apis =\n                            await window.electron.sapio.load_contract_list();\n                        if ('err' in apis) {\n                            alert(apis.err);\n                            return;\n                        }\n                        dispatch(set_apis(apis.ok));\n                        dispatch(switch_showing('ContractCreator'));\n                    }}\n                >\n                    Create New Contract\n                </MenuItem>\n                <MenuItem\n                    onClick={() => {\n                        setContractsOpen(false);\n                        dispatch(recreate_contract());\n                    }}\n                >\n                    Recreate Last Contract\n                </MenuItem>\n                <Divider />\n                <MenuItem\n                    onClick={() => {\n                        props.relayout();\n                    }}\n                >\n                    Repair Layout\n                </MenuItem>\n            </Menu>\n        </div>\n    );\n}\nfunction NodeMenu(props: { bitcoin_node_manager: BitcoinNodeManager }) {\n    const dispatch = useDispatch();\n    const nodeRef = React.useRef<HTMLLIElement>(null);\n    const [node_open, setNodeOpen] = React.useState(false);\n    const close = () => setNodeOpen(false);\n\n    return (\n        <>\n            <ListItem\n                disableGutters\n                button={false}\n                key={'Bitcoin Node'}\n                onClick={() => setNodeOpen(true)}\n                ref={nodeRef}\n            >\n                <ListItemIcon></ListItemIcon>\n                <ListItemText primary={'Bitcoin Node'} />\n            </ListItem>\n            <Menu\n                anchorEl={nodeRef.current}\n                anchorOrigin={{\n                    vertical: 'center',\n                    horizontal: 'right',\n                }}\n                keepMounted\n                open={node_open}\n                onClose={close}\n            >\n                <MenuItem\n                    onClick={async () => {\n                        close();\n                        const addr =\n                            await props.bitcoin_node_manager.get_new_address();\n                        window.electron.write_clipboard(addr);\n                    }}\n                >\n                    Get New Address to Clipboard\n                </MenuItem>\n                <MenuItem\n                    onClick={() => {\n                        close();\n                        props.bitcoin_node_manager\n                            .generate_blocks(10)\n                            .catch((err) => console.error(err));\n                    }}\n                >\n                    Generate 10 Blocks\n                </MenuItem>\n                <Divider />\n                <MenuItem\n                    onClick={() => {\n                        close();\n                        dispatch(toggle_status_bar());\n                    }}\n                >\n                    Toggle Status\n                </MenuItem>\n            </Menu>\n        </>\n    );\n}\n","import { Box, Button, FilledInput, FormGroup } from '@mui/material';\nimport * as React from 'react';\nimport './Channel.css';\nimport FormControl, { useFormControl } from '@mui/material/FormControl';\nimport _ from 'lodash';\n\nexport function Channel(props: { channel_id: string; close: () => void }) {\n    const [messages, set_messages] = React.useState<any[]>([]);\n    React.useEffect(() => {\n        let cancel: ReturnType<typeof window.setTimeout>;\n        let since = 0;\n        let all_messages: any[] = [];\n        async function f() {\n            const last = since;\n            /// todo: small concurrency bug here can lead to messages appearing twice\n            const m = await window.electron.chat.list_messages_channel(\n                props.channel_id,\n                last\n            );\n            if (m.length) {\n                since = Math.max(\n                    _(m)\n                        .map((msg) => msg.received_time)\n                        .max(),\n                    since\n                );\n                all_messages = [...all_messages, ...m];\n                set_messages(all_messages);\n            }\n            cancel = setTimeout(f, 1000);\n        }\n        cancel = setTimeout(f, 0);\n        return () => {\n            clearTimeout(cancel);\n        };\n    }, []);\n    const msg_area = React.useRef<HTMLElement>(null);\n    React.useEffect(() => {\n        if (!msg_area.current) return;\n        msg_area.current.scrollTop = msg_area.current.scrollHeight;\n    }, [messages]);\n\n    return (\n        <Box className=\"ChatBox\">\n            <Button onClick={props.close}> Back </Button>\n            <Box className=\"MessageArea\" ref={msg_area}>\n                {messages.map((m, i) => (\n                    <div key={i}>\n                        {m.nickname}: {m.body}\n                    </div>\n                ))}\n            </Box>\n\n            <div className=\"Typing\">\n                <Typing {...props}></Typing>\n            </div>\n        </Box>\n    );\n}\n\nfunction Typing(props: { channel_id: string }) {\n    const [typed, set_typed] = React.useState('');\n    const { focused } = useFormControl() || {};\n    return (\n        <Box\n            component=\"form\"\n            noValidate\n            autoComplete=\"off\"\n            onSubmit={(ev: React.FormEvent) => {\n                ev.preventDefault();\n            }}\n        >\n            <FormControl fullWidth={true}>\n                <FormGroup row={true} sx={{ width: '100%' }} className=\"Typing\">\n                    <FilledInput\n                        sx={{ width: '75%' }}\n                        onChange={(ev) => set_typed(ev.currentTarget.value)}\n                        value={typed}\n                        autoFocus\n                        type=\"text\"\n                    />\n                    <Button\n                        type=\"submit\"\n                        color=\"success\"\n                        onClick={async (ev) => {\n                            ev.preventDefault();\n                            if (typed !== '') {\n                                window.electron.chat.send({\n                                    msg: { Data: typed },\n                                    channel: props.channel_id,\n                                    sent_time_ms: Date.now(),\n                                });\n                                set_typed('');\n                            }\n                        }}\n                    >\n                        Send\n                    </Button>\n                </FormGroup>\n            </FormControl>\n        </Box>\n    );\n}\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField,\n} from '@mui/material';\nimport React from 'react';\n\nexport function NewNickname(props: { show: boolean; hide: () => void }) {\n    const [value, set_value] = React.useState<null | string>(null);\n    const [key_value, set_key_value] = React.useState<null | string>(null);\n    return (\n        <Dialog onClose={props.hide} open={props.show}>\n            <DialogTitle>Create a new User</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    The key and nickname for the new person. Keys must be\n                    unique.\n                </DialogContentText>\n                <TextField\n                    onChange={(ev) => set_value(ev.currentTarget.value)}\n                    value={value}\n                    autoFocus\n                    margin=\"dense\"\n                    label=\"Name\"\n                    name=\"name\"\n                    type=\"text\"\n                    fullWidth\n                    variant=\"standard\"\n                />\n                <TextField\n                    onChange={(ev) => set_key_value(ev.currentTarget.value)}\n                    value={key_value}\n                    autoFocus\n                    margin=\"dense\"\n                    label=\"Key Hash\"\n                    name=\"keyhash\"\n                    type=\"text\"\n                    fullWidth\n                    variant=\"standard\"\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.hide}>Cancel</Button>\n                <Button\n                    color=\"success\"\n                    onClick={async (ev) => {\n                        if (value !== null && key_value) {\n                            await window.electron.chat.add_user(\n                                value,\n                                key_value\n                            );\n                        }\n                        props.hide();\n                    }}\n                >\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField,\n} from '@mui/material';\nimport React from 'react';\n\nexport function NewChannel(props: { show: boolean; hide: () => void }) {\n    const [value, set_value] = React.useState<null | string>(null);\n    return (\n        <Dialog onClose={props.hide} open={props.show}>\n            <DialogTitle>Create a new channel</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    The name of the new channel to create...\n                </DialogContentText>\n                <TextField\n                    onChange={(ev) => set_value(ev.currentTarget.value)}\n                    value={value}\n                    autoFocus\n                    margin=\"dense\"\n                    label=\"Name\"\n                    name=\"name\"\n                    type=\"text\"\n                    fullWidth\n                    variant=\"standard\"\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.hide}>Cancel</Button>\n                <Button\n                    color=\"success\"\n                    onClick={async (ev) => {\n                        if (value !== null) {\n                            window.electron.chat.send({\n                                msg: { Data: 'hello' },\n                                channel: value,\n                                sent_time_ms: Date.now(),\n                            });\n                            props.hide();\n                        }\n                        props.hide();\n                    }}\n                >\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import { Box, Button } from '@mui/material';\nimport * as React from 'react';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport {\n    DataGrid,\n    GridActionsCellItem,\n    GridColumns,\n    GridToolbarContainer,\n} from '@mui/x-data-grid';\nimport './Chat.css';\nimport { Channel } from './Channel';\nimport { Add } from '@mui/icons-material';\nimport { NewNickname } from './NewNickname';\nimport { NewChannel } from './NewChannel';\n\nexport function Chat() {\n    React.useEffect(() => {\n        async function f() {\n            await window.electron.chat.init();\n        }\n        f();\n    });\n    return (\n        <Box className=\"Chat\">\n            <Users></Users>\n            <Channels></Channels>\n        </Box>\n    );\n}\n\nconst UserGrid: GridColumns = [\n    {\n        field: 'actions-load',\n        type: 'actions',\n        flex: 0.2,\n        getActions: (params) => [\n            <GridActionsCellItem\n                key=\"open-folder\"\n                icon={<VisibilityIcon />}\n                label=\"Open\"\n                onClick={() => {\n                    // todo:\n                }}\n            />,\n        ],\n    },\n    {\n        field: 'nickname',\n        headerName: 'NickName',\n        minWidth: 100,\n        type: 'text',\n        flex: 1,\n    },\n    {\n        field: 'key',\n        headerName: 'Key Hash',\n        minWidth: 100,\n        type: 'text',\n        flex: 1,\n    },\n];\nfunction Users() {\n    const [users, set_users] = React.useState<\n        { nickname: string; key: string }[]\n    >([]);\n    React.useEffect(() => {\n        let cancel: ReturnType<typeof window.setTimeout>;\n        async function f() {\n            await window.electron.chat.init();\n            set_users(await window.electron.chat.list_users());\n            cancel = setTimeout(f, 5000);\n        }\n        cancel = setTimeout(f, 0);\n        return () => {\n            clearTimeout(cancel);\n        };\n    }, []);\n    const [add_new_user, set_add_new_user] = React.useState(false);\n    function CustomToolbar() {\n        return (\n            <GridToolbarContainer>\n                <Button onClick={() => set_add_new_user(true)}>\n                    New User<Add></Add>\n                </Button>\n            </GridToolbarContainer>\n        );\n    }\n    return (\n        <div>\n            <NewNickname\n                show={add_new_user}\n                hide={() => set_add_new_user(false)}\n            ></NewNickname>\n\n            <DataGrid\n                components={{ Toolbar: CustomToolbar }}\n                rows={users.map((v) => {\n                    return { id: v.key, ...v };\n                })}\n                columns={UserGrid}\n                disableExtendRowFullWidth={false}\n                columnBuffer={3}\n                pageSize={10}\n                rowsPerPageOptions={[5]}\n                disableColumnSelector\n                disableSelectionOnClick\n            />\n        </div>\n    );\n}\n\nfunction Channels() {\n    const [channels, set_channels] = React.useState<{ channel_id: string }[]>(\n        []\n    );\n    React.useEffect(() => {\n        let cancel: ReturnType<typeof window.setTimeout>;\n        async function f() {\n            set_channels(await window.electron.chat.list_channels());\n            cancel = setTimeout(f, 5000);\n        }\n        cancel = setTimeout(f, 0);\n        return () => {\n            clearTimeout(cancel);\n        };\n    }, []);\n    const [channel, set_channel] = React.useState<string | null>(null);\n    const [add_new_channel, set_add_new_channel] =\n        React.useState<boolean>(false);\n    const ChannelColumns: GridColumns = [\n        {\n            field: 'actions-load',\n            type: 'actions',\n            flex: 0.2,\n            getActions: (params) => [\n                <GridActionsCellItem\n                    key=\"open-folder\"\n                    icon={<VisibilityIcon />}\n                    label=\"Open\"\n                    onClick={() => {\n                        typeof params.id === 'string' && set_channel(params.id);\n                    }}\n                />,\n            ],\n        },\n        {\n            field: 'channel_id',\n            headerName: 'Channel',\n            minWidth: 100,\n            type: 'text',\n            flex: 1,\n        },\n    ];\n    function CustomToolbar() {\n        return (\n            <GridToolbarContainer>\n                <Button onClick={() => set_add_new_channel(true)}>\n                    Create New Channel<Add></Add>\n                </Button>\n            </GridToolbarContainer>\n        );\n    }\n    return (\n        <div>\n            <NewChannel\n                show={add_new_channel}\n                hide={() => set_add_new_channel(false)}\n            />\n            {channel === null && (\n                <DataGrid\n                    components={{ Toolbar: CustomToolbar }}\n                    rows={channels.map((v) => {\n                        return { id: v.channel_id, ...v };\n                    })}\n                    columns={ChannelColumns}\n                    disableExtendRowFullWidth={false}\n                    columnBuffer={3}\n                    pageSize={10}\n                    rowsPerPageOptions={[5]}\n                    disableColumnSelector\n                    disableSelectionOnClick\n                />\n            )}\n            {channel !== null && (\n                <Channel\n                    channel_id={channel}\n                    close={() => {\n                        set_channel(null);\n                    }}\n                ></Channel>\n            )}\n        </div>\n    );\n}\n","import React from 'react';\nimport { JSONSchema7 } from 'json-schema';\nimport { useDispatch } from 'react-redux';\nimport { select_api } from '../ContractCreatorSlice';\n\ninterface TileProps {\n    app: Plugin;\n}\nexport interface Plugin {\n    api: JSONSchema7;\n    name: string;\n    key: string;\n    logo: string;\n}\nexport function logo_image(app: Plugin) {\n    const logo = 'data:image/png;base64,' + app.logo;\n    return (\n        <div\n            style={{\n                width: '100%',\n                height: 'auto',\n                justifyContent: 'center',\n                position: 'relative',\n                display: 'flex',\n            }}\n        >\n            <img alt=\"logo\" src={logo} width=\"100px\" height=\"100px\" />\n        </div>\n    );\n}\nexport function PluginTile(props: TileProps) {\n    const dispatch = useDispatch();\n    return (\n        <div className=\"PluginTile\">\n            <a\n                onClick={() => {\n                    dispatch(select_api(props.app.key));\n                }}\n            >\n                {logo_image(props.app)}\n                <div>{props.app.name}</div>\n            </a>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport Form, { ISubmitEvent } from '@rjsf/core';\nimport { logo_image, Plugin } from './PluginTile';\nimport { create_contract_of_type, switch_showing } from '../../../AppSlice';\nimport { useDispatch } from 'react-redux';\nimport { show_apis } from '../ContractCreatorSlice';\nimport './PluginForm.css';\nimport { Button } from '@mui/material';\n\ninterface PluginFormProps {\n    app: Plugin;\n}\nexport function PluginForm(props: PluginFormProps) {\n    const dispatch = useDispatch();\n    const handleSubmit = async (event: ISubmitEvent<any>, type: string) => {\n        const formData = event.formData;\n        dispatch(switch_showing('ContractViewer'));\n        await dispatch(\n            create_contract_of_type(type, null, JSON.stringify(formData))\n        );\n        dispatch(show_apis(false));\n    };\n    const [data, set_data] = React.useState({});\n    const handleClick = async () => {\n        const s = await navigator.clipboard.readText();\n        set_data(JSON.parse(s));\n    };\n    return (\n        <div className=\"PluginForm\">\n            <div></div>\n            <div>\n                {logo_image(props.app)}\n                <Button onClick={handleClick}>Paste</Button>\n                <Form\n                    formData={data}\n                    schema={props.app.api}\n                    onSubmit={(e: ISubmitEvent<any>) =>\n                        handleSubmit(e, props.app.key)\n                    }\n                ></Form>\n            </div>\n            <div></div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './PluginSelector.css';\nimport { PluginTile } from './PluginTile';\nimport { PluginForm } from './PluginForm';\nimport { selectAPI, selectAPIEntries } from '../ContractCreatorSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nexport function PluginSelector() {\n    const dispatch = useDispatch();\n    const selected = useSelector(selectAPI);\n    const all_apis = useSelector(selectAPIEntries);\n\n    if (selected !== null) {\n        return (\n            <div>\n                <PluginForm app={selected} />\n            </div>\n        );\n    } else {\n        const tiles = Array.from(all_apis, ([name, app], i) => (\n            <PluginTile app={app} />\n        ));\n        return (\n            <div className=\"PluginSelectorGrid\">\n                <div className=\"back\"></div>\n                <div className={'middle'}>{tiles}</div>\n                <div className=\"forward\"></div>\n            </div>\n        );\n    }\n}\n","import { Button, Paper, Typography } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAPI, select_api } from './ContractCreatorSlice';\nimport { PluginSelector } from './SapioPluginPicker/PluginSelector';\nimport * as React from 'react';\nimport './CreateContractModal.css';\nfunction CreateContractModalInner() {\n    const dispatch = useDispatch();\n    const selected = useSelector(selectAPI);\n    const unselect =\n        selected === null ? null : (\n            <Button onClick={() => dispatch(select_api(null))}>Back</Button>\n        );\n\n    return (\n        <Paper square={true} className=\"PluginPage\">\n            <div>\n                {unselect}\n                <Typography variant=\"h3\">Applications</Typography>\n                <PluginSelector />\n            </div>\n        </Paper>\n    );\n}\n\nexport const CreateContractModal = React.memo(CreateContractModalInner);\n","import styled from '@emotion/styled';\nimport { DiagramEngine, DiagramModel } from '@projectstorm/react-diagrams';\nimport * as React from 'react';\n\nconst Container = styled.div<{ color: string; background: string }>`\n    height: 100%;\n    background-color: ${(p) => p.background} !important;\n    background-size: 100px 100px;\n    display: flex;\n    > * {\n        height: 100%;\n        min-height: 100%;\n        width: 100%;\n    }\n    background-image: linear-gradient(\n            0deg,\n            transparent 24%,\n            ${(p) => p.color} 25%,\n            ${(p) => p.color} 26%,\n            transparent 27%,\n            transparent 74%,\n            ${(p) => p.color} 75%,\n            ${(p) => p.color} 76%,\n            transparent 77%,\n            transparent\n        ),\n        linear-gradient(\n            90deg,\n            transparent 24%,\n            ${(p) => p.color} 25%,\n            ${(p) => p.color} 26%,\n            transparent 27%,\n            transparent 74%,\n            ${(p) => p.color} 75%,\n            ${(p) => p.color} 76%,\n            transparent 77%,\n            transparent\n        );\n`;\n\nexport interface DemoCanvasWidgetProps {\n    model: DiagramModel;\n    engine: DiagramEngine;\n    color?: string;\n    background?: string;\n    children: React.ReactNode;\n}\n\nexport function DemoCanvasWidget(props: DemoCanvasWidgetProps) {\n    return (\n        <Container\n            background={props.background || 'rgb(60,60,60)'}\n            color={props.color || 'rgba(255,255,255, 0.05)'}\n        >\n            {props.children}\n        </Container>\n    );\n}\n","import * as React from 'react';\nimport Color from 'color';\nimport { SpendLinkModel } from './SpendLinkModel';\nimport { MutableRefObject } from 'react-transition-group/node_modules/@types/react';\nimport { useTheme } from '@mui/material';\nimport { store } from '../../../../Store/store';\nimport { selectAnimateFlow } from '../../../../Settings/SettingsSlice';\nimport { TransactionModel } from '../../../../Data/Transaction';\nimport { useSelector } from 'react-redux';\nimport { selectIsReachable } from '../../../../Data/SimulationSlice';\n\nlet unique_key = 0;\ntype PathSettings = {\n    circle: MutableRefObject<SVGCircleElement | null>;\n    path: MutableRefObject<SVGPathElement | null>;\n    text: MutableRefObject<SVGTextElement | null>;\n    x: MutableRefObject<number>;\n    y: MutableRefObject<number>;\n    show: MutableRefObject<boolean>;\n    color: MutableRefObject<string>;\n    white: MutableRefObject<string>;\n};\nconst all_nodes: Map<typeof unique_key, PathSettings> = new Map();\n\nconst transparent = Color('transparent').toString();\nfunction update_loop(percent_idx: number) {\n    const seconds = selectAnimateFlow(store.getState()) / 1000.0;\n    const frames_per_second = 60;\n    const increment = 100 / frames_per_second / seconds;\n    if (seconds < 0.001) {\n        for (const [_, node] of all_nodes) {\n            if (!node.circle.current || !node.path) {\n                continue;\n            }\n            if (node.show) {\n                node.color.current = transparent;\n                node.white.current = transparent;\n            }\n        }\n        requestAnimationFrame(animation_loop);\n        setTimeout(\n            () => update_loop(percent_idx),\n            (3 * 1000) / frames_per_second\n        );\n    } else {\n        const percentage = percent_idx / 100;\n        const fade = 2 * Math.abs(percentage - 0.5);\n        const color = Color('orange').fade(fade).toString();\n        const white = Color('white').fade(fade).toString();\n        for (const [_id, node] of all_nodes) {\n            if (!node.path.current) {\n                continue;\n            }\n            const point = node.path.current.getPointAtLength(\n                node.path.current.getTotalLength() * percentage || 0\n            );\n            if (point) {\n                node.x.current = point.x;\n                node.y.current = point.y;\n            }\n            if (node.show.current) {\n                node.color.current = color;\n                node.white.current = white;\n            } else {\n                node.color.current = transparent;\n                node.white.current = transparent;\n            }\n        }\n        requestAnimationFrame(animation_loop);\n        percent_idx = (percent_idx + increment) % 101;\n        setTimeout(() => update_loop(percent_idx), 1000 / frames_per_second);\n    }\n}\n\nfunction animation_loop() {\n    for (const [_, node] of all_nodes) {\n        if (!node.circle || !node.path || !node.text) {\n            continue;\n        }\n        node.circle.current?.setAttribute('fill', node.color.current);\n        node.circle.current?.setAttribute('cx', node.x.current.toString());\n        node.circle.current?.setAttribute('cy', node.y.current.toString());\n        node.text.current?.setAttribute('x', node.x.current.toString());\n        node.text.current?.setAttribute('y', node.y.current.toString());\n        node.text.current?.setAttribute('fill', node.white.current);\n    }\n}\n\nlet is_running = false;\nexport function SpendLinkSegment(props: {\n    model: SpendLinkModel;\n    path: string;\n}) {\n    const check_is_reachable = useSelector(selectIsReachable);\n    React.useEffect(() => {\n        if (!is_running) {\n            is_running = true;\n            update_loop(0);\n        }\n    });\n    // TODO: make link appear once, make percent_idx random\n    const mounted = React.useRef(false);\n    const circle = React.useRef(null as null | SVGCircleElement);\n    const text = React.useRef(null as null | SVGTextElement);\n    const path = React.useRef(null as null | SVGPathElement);\n    const x = React.useRef(0);\n    const y = React.useRef(0);\n    const theme = useTheme();\n    const stroke =\n        props.model.link_type === 'exclusive'\n            ? theme.palette.secondary.light\n            : theme.palette.primary.light;\n    const color = React.useRef('none');\n    const white = React.useRef('white');\n    const key = unique_key++;\n    const show = React.useRef(true);\n    all_nodes.set(key, { circle, path, text, x, y, color, white, show });\n    const faded_stroke = Color(stroke).fade(0.8).toString();\n    React.useEffect(() => {\n        const child = props.model.linked_to;\n        let reachable = false;\n        if (child) {\n            switch (child.constructor) {\n                case TransactionModel:\n                    reachable = check_is_reachable(\n                        (child as TransactionModel).get_txid()\n                    );\n                    break;\n            }\n        }\n\n        show.current = reachable;\n        path.current?.setAttribute('stroke', reachable ? stroke : faded_stroke);\n    }, [check_is_reachable]);\n\n    React.useEffect(() => {\n        mounted.current = true;\n\n        return () => {\n            mounted.current = false;\n            all_nodes.delete(key);\n        };\n    });\n\n    return (\n        <>\n            <path\n                fill=\"none\"\n                strokeLinecap=\"square\"\n                ref={(ref) => {\n                    path.current = ref;\n                }}\n                stroke={stroke}\n                strokeWidth={props.model.getOptions().width}\n                d={props.path}\n            />\n            <circle\n                ref={(ref) => {\n                    circle.current = ref;\n                }}\n                r={7.5}\n            ></circle>\n            <text\n                textAnchor=\"middle\"\n                ref={(ref) => {\n                    text.current = ref;\n                }}\n                fontSize=\"12px\"\n                alignmentBaseline=\"middle\"\n            >\n                ₿\n            </text>\n        </>\n    );\n}\n","import * as React from 'react';\nimport { LinkWidget } from '@projectstorm/react-diagrams-core';\nimport { MouseEvent } from 'react';\nimport { SpendLinkModel } from './SpendLinkModel';\nimport { DefaultLinkWidget } from '@projectstorm/react-diagrams';\nimport { SpendLinkFactory } from './SpendLinkFactory';\n\nexport class SpendLinkWidget extends DefaultLinkWidget {\n    generateLink(\n        path: string,\n        extraProps: any,\n        id: string | number\n    ): JSX.Element {\n        const link: SpendLinkModel = this.props.link as SpendLinkModel;\n        const Bottom = React.cloneElement(\n            new SpendLinkFactory().generateLinkSegment(\n                link,\n                this.state.selected || this.props.link.isSelected(),\n                path\n            ),\n            {\n                ref: (ref: React.RefObject<SVGPathElement> | null) =>\n                    ref && this.refPaths.push(ref),\n            }\n        );\n\n        const _Top = React.cloneElement(Bottom, {\n            ...extraProps,\n            strokeLinecap: 'round',\n            onMouseLeave: () => {\n                this.setState({ selected: false });\n            },\n            onMouseEnter: () => {\n                this.setState({ selected: true });\n            },\n            ref: null,\n            'data-linkid': this.props.link.getID(),\n            strokeOpacity: this.state.selected ? 0.1 : 0,\n            strokeWidth: 20,\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            onContextMenu: (event: Event) => {},\n        });\n\n        return <g key={'link-' + id}>{Bottom}</g>;\n    }\n    render() {\n        //ensure id is present for all points on the path\n        const points = this.props.link.getPoints();\n        const paths = [];\n        this.refPaths = [];\n\n        if (points.length === 2) {\n            paths.push(\n                this.generateLink(\n                    this.props.link.getSVGPath(),\n                    {\n                        onMouseDown: (event: MouseEvent) => {\n                            this.addPointToLink(event, 1);\n                        },\n                    },\n                    '0'\n                )\n            );\n\n            // draw the link as dangeling\n            if (this.props.link.getTargetPort() == null) {\n                paths.push(this.generatePoint(points[1]!));\n            }\n        } else {\n            //draw the multiple anchors and complex line instead\n            for (let j = 0; j < points.length - 1; j++) {\n                paths.push(\n                    this.generateLink(\n                        LinkWidget.generateLinePath(points[j]!, points[j + 1]!),\n                        {\n                            'data-linkid': this.props.link.getID(),\n                            'data-point': j,\n                            onMouseDown: (event: MouseEvent) => {\n                                this.addPointToLink(event, j + 1);\n                            },\n                        },\n                        j\n                    )\n                );\n            }\n\n            //render the circles\n            for (let i = 1; i < points.length - 1; i++) {\n                paths.push(this.generatePoint(points[i]!));\n            }\n\n            if (this.props.link.getTargetPort() == null) {\n                paths.push(this.generatePoint(points[points.length - 1]!));\n            }\n        }\n\n        return (\n            <g data-default-link-test={this.props.link.getOptions().testName}>\n                {paths}\n            </g>\n        );\n    }\n}\n","import { DefaultLinkFactory } from '@projectstorm/react-diagrams';\nimport { SpendLinkSegment } from './SpendLink';\nimport { SpendLinkModel } from './SpendLinkModel';\nimport { SpendLinkWidget } from './SpendLinkWidget';\nimport * as React from 'react';\nimport {\n    GenerateModelEvent,\n    GenerateWidgetEvent,\n} from '@projectstorm/react-canvas-core';\nexport class SpendLinkFactory extends DefaultLinkFactory {\n    generateModel(event: GenerateModelEvent): SpendLinkModel {\n        return new SpendLinkModel();\n    }\n    constructor() {\n        super('spend');\n    }\n    generateLinkSegment(\n        model: SpendLinkModel,\n        selected: boolean,\n        path: string\n    ): JSX.Element {\n        return (\n            <g>\n                <SpendLinkSegment model={model} path={path} />\n            </g>\n        );\n    }\n    generateReactWidget(event: GenerateWidgetEvent<any>): JSX.Element {\n        return (\n            <SpendLinkWidget\n                link={event.model}\n                diagramEngine={this.engine}\n            ></SpendLinkWidget>\n        );\n    }\n}\n","import * as React from 'react';\nimport { useTheme } from '@mui/material';\nimport { TXID } from '../../../util';\nimport { selectStatus } from '../../../Data/DataSlice';\nimport { useSelector } from 'react-redux';\n\nexport function ConfirmationWidget(props: { t: TXID }) {\n    const status = useSelector(selectStatus(props.t));\n    const theme = useTheme();\n    switch (status) {\n        case undefined:\n        case null:\n        case 'Confirmed': {\n            return null;\n        }\n        case 'InMempool': {\n            return (\n                <div\n                    style={{\n                        background: theme.palette.info.light,\n                        color: theme.palette.info.contrastText,\n                        textAlign: 'center',\n                    }}\n                >\n                    In Mempool\n                </div>\n            );\n        }\n        case 'Unknown':\n        case 'Broadcastable':\n        case 'NotBroadcastable': {\n            return (\n                <div\n                    style={{\n                        background: theme.palette.warning.light,\n                        color: theme.palette.warning.contrastText,\n                        textAlign: 'center',\n                    }}\n                >\n                    UNCONFIRMED\n                </div>\n            );\n        }\n        case 'Impossible': {\n            return (\n                <div\n                    style={{\n                        background: theme.palette.error.light,\n                        color: theme.palette.error.contrastText,\n                        textAlign: 'center',\n                    }}\n                >\n                    Conflicted\n                </div>\n            );\n        }\n    }\n}\n","import styled from '@emotion/styled';\nimport {\n    DefaultPortLabel,\n    DefaultPortModel,\n} from '@projectstorm/react-diagrams';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport './Ants.css';\nimport { TransactionNodeModel } from './TransactionNodeModel';\nimport Color from 'color';\nimport { useSelector } from 'react-redux';\nimport { selectIsReachable } from '../../../../Data/SimulationSlice';\nimport * as Bitcoin from 'bitcoinjs-lib';\nimport { useTheme } from '@mui/material';\nimport {\n    EntityType,\n    selectEntityToView,\n    selectTXNColor,\n    selectTXNPurpose,\n} from '../../../Entity/EntitySlice';\nimport { ConfirmationWidget } from '../ConfirmationWidget';\n//import { css } from '@emotion/core';\n\n//border: solid 2px ${p => (p.selected ? 'rgb(0,192,255)' : 'white')};\nexport const Node = styled.div<{\n    background: string;\n    selected: boolean;\n}>`\n    color: white;\n    overflow: visible;\n    font-size: 11px;\n    box-shadow: ${(p) =>\n        p.selected ? '4px 1px 10px rgba(0,192,255,0.5)' : 'none'};\n\n    &.unreachable:after {\n        content: '';\n        z-index: 2;\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        background: rgba(0, 0, 0, 0.7);\n        box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.9);\n        background-clip: border-box;\n    }\n`;\n// border-radius: 5px 25px;\n// background-color: ${p => p.background};\n// border: 2px solid transparent;\n// background: ${p => {\n//     const ants_color = p.selected ? 'rgba(0,192,255,0.5)': 'transparent';\n//     return (!p.confirmed? 'linear-gradient('+p.background +','+ p.background+') padding-box, repeating-linear-gradient(-45deg, black 0, black 25%, '+ants_color+' 0, '+ants_color+' 50%) 0 / 1em 1em' : '')\n// }};\n// animation: ${p => !p.confirmed? \"ants 12s linear infinite\" : \"none\"};\n\nexport const Title = styled.div<{ color: string; textColor: string }>`\n    background: ${(p) => p.color};\n    color: ${(p) => p.textColor};\n    display: flex;\n    white-space: nowrap;\n    justify-items: center;\n`;\n\nexport const TitleName = styled.div`\n    flex-grow: 1;\n    padding: 5px 5px;\n`;\n\nexport const PortsTop = styled.div<{ color: string; textColor: string }>`\n    display: flex;\n    background-color: ${(p) => p.color};\n    color: ${(p) => p.textColor};\n`;\n\nexport const PortsBottom = styled.div<{ color: string; textColor: string }>`\n    display: flex;\n    background-color: ${(p) => p.color};\n    color: ${(p) => p.textColor};\n`;\n// background-image: linear-gradient(rgba(255,255,255,1), rgba(255, 255, 255,1));\n\ninterface PortsContainerProps {\n    children: React.ReactNode[];\n}\nclass PortsContainerTop extends React.Component<PortsContainerProps> {\n    render() {\n        return <div className=\"PortsContainerTop\">{this.props.children}</div>;\n    }\n}\nclass PortsContainerBottom extends React.Component<PortsContainerProps> {\n    render() {\n        return (\n            <div className=\"PortsContainerBottom\">{this.props.children}</div>\n        );\n    }\n}\n\n/**\n * Marching ants border\n */\n\nexport interface DefaultNodeProps {\n    node: TransactionNodeModel;\n    engine: DiagramEngine;\n}\n\n/**\n * Default node that models the CustomNodeModel. It creates two columns\n * for both all the input ports on the left, and the output ports on the right.\n */\nexport function TransactionNodeWidget(props: DefaultNodeProps) {\n    const selected_entity_id: EntityType = useSelector(selectEntityToView);\n    const opts = props.node.getOptions();\n    const is_reachable = useSelector(selectIsReachable)(\n        (opts.txn as Bitcoin.Transaction).getId()\n    );\n    const color =\n        useSelector(selectTXNColor(opts.txn.getId())) ?? Color(opts.color);\n    const purpose =\n        useSelector(selectTXNPurpose(opts.txn.getId())) ?? opts.purpose;\n    const generatePort = (port: DefaultPortModel) => {\n        return (\n            <DefaultPortLabel\n                engine={props.engine}\n                port={port}\n                key={port.getID()}\n            />\n        );\n    };\n\n    const color_render = color.alpha(0.2).toString();\n    const theme = useTheme();\n    const text_color = theme.palette.text.primary;\n\n    const is_selected =\n        selected_entity_id[0] === 'TXN' &&\n        selected_entity_id[1] === opts.txn.getId();\n\n    return (\n        <>\n            <PortsTop\n                color={'transparent'}\n                textColor={text_color}\n                style={{ justifyContent: 'center' }}\n            >\n                <PortsContainerTop>\n                    {_.map(props.node.getInPorts(), generatePort)}\n                </PortsContainerTop>\n            </PortsTop>\n            <Node\n                data-default-node-name={opts.name}\n                selected={is_selected}\n                background={opts.color}\n                className={\n                    (is_reachable ? 'reachable' : 'unreachable') +\n                    ' TransactionNode'\n                }\n            >\n                <div>\n                    <Title color={color_render} textColor={text_color}>\n                        <TitleName>Transaction</TitleName>\n                        <TitleName>{opts.name}</TitleName>\n                    </Title>\n                    <ConfirmationWidget t={opts.txn.getId()} />\n                    <Title color={color_render} textColor={text_color}>\n                        <TitleName>{purpose}</TitleName>\n                    </Title>\n                    <PortsBottom\n                        color={theme.palette.primary.light}\n                        textColor={theme.palette.primary.contrastText}\n                    >\n                        <PortsContainerBottom>\n                            {_.map(props.node.getOutPorts(), generatePort)}\n                        </PortsContainerBottom>\n                    </PortsBottom>\n                </div>\n            </Node>\n        </>\n    );\n}\n","import {\n    AbstractReactFactory,\n    GenerateModelEvent,\n    GenerateWidgetEvent,\n} from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport * as React from 'react';\nimport { TransactionNodeModel } from './TransactionNodeModel';\nimport { TransactionNodeWidget } from './TransactionNodeWidget';\n\nexport class TransactionNodeFactory extends AbstractReactFactory<\n    TransactionNodeModel,\n    DiagramEngine\n> {\n    constructor() {\n        super('transaction-node');\n    }\n\n    generateModel(event: GenerateModelEvent) {\n        return new TransactionNodeModel();\n    }\n\n    generateReactWidget(event: GenerateWidgetEvent<any>): JSX.Element {\n        console.log(this);\n        return (\n            <TransactionNodeWidget engine={this.engine} node={event.model} />\n        );\n    }\n}\n","import styled from '@emotion/styled';\nimport {\n    DefaultPortLabel,\n    DefaultPortModel,\n} from '@projectstorm/react-diagrams';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport Color from 'color';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { PrettyAmount } from '../../../../util';\nimport './Ants.css';\nimport { UTXONodeModel } from './UTXONodeModel';\nimport { BaseEvent } from '@projectstorm/react-canvas-core';\nimport { UTXOModel } from '../../../../Data/UTXO';\nimport { useSelector } from 'react-redux';\nimport { selectIsReachable } from '../../../../Data/SimulationSlice';\nimport { useTheme } from '@mui/material';\nimport { EntityType, selectEntityToView } from '../../../Entity/EntitySlice';\nimport { selectContinuation } from '../../../ContractCreator/ContractCreatorSlice';\nimport { ConfirmationWidget } from '../ConfirmationWidget';\nconst white = Color('white').toString();\nconst black = Color('black').toString();\nconst yellow = Color('yellow').fade(0.2).toString();\n//import { css } from '@emotion/core';\n\n//border: solid 2px ${p => (p.selected ? 'rgb(0,192,255)' : 'white')};\n// border-radius: 50%;\n// height: 0;\n// width: 150%;\n// padding-bottom:150%;\nconst UTXONode = styled.div<{ selected: boolean }>`\n    color: white;\n    overflow: hidden;\n    font-size: 11px;\n    border-radius: 25%;\n    box-shadow: ${(p) =>\n        p.selected ? '4px 1px 10px rgba(0,192,255,0.5)' : 'none'};\n    &.unreachable:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        background: rgba(0, 0, 0, 0.7);\n        box-shadow: 0px 0px 25px rgba(0, 0, 0, 0.9);\n        border-radius: 25%;\n        background-clip: border-box;\n    }\n`;\n//border: 2px solid transparent;\n//background: ${p => {\n//    const ants_color = p.selected ? 'rgba(0,192,255,0.5)': 'transparent';\n//    return (!p.confirmed? 'linear-gradient('+p.background +','+ p.background+') padding-box, repeating-linear-gradient(-45deg, black 0, black 25%, '+ants_color+' 0, '+ants_color+' 50%) 0 / 1em 1em' : '')\n//}};\n//animation: ${p => !p.confirmed? \"ants 12s linear infinite\" : \"none\"};\n\nconst Title = styled.div<{ color: string; textColor: string }>`\n    background: ${(p) => p.color};\n    color: ${(p) => p.textColor};\n    display: flex;\n    width: 100%;\n    white-space: nowrap;\n    justify-items: center;\n    text-align: center;\n`;\n\nconst TitleName = styled.div`\n    flex-grow: 1;\n    padding: 5px 5px;\n`;\n\nconst PortsTop = styled.div<{ color: string; textColor: string }>`\n    display: flex;\n    color: ${(p) => p.textColor};\n    background-color: ${(p) => p.color};\n`;\n\nconst PortsBottom = styled.div<{ color: string; textColor: string }>`\n    display: flex;\n    background: ${(p) => p.color};\n    color: ${(p) => p.textColor};\n`;\n\ninterface PortsContainer2Props {\n    children: React.ReactNode[];\n}\nclass PortsContainerUTXOTop extends React.Component<PortsContainer2Props> {\n    render() {\n        return (\n            <div className=\"PortsContainerUTXOTop\">{this.props.children}</div>\n        );\n    }\n}\nclass PortsContainerUTXOBottom extends React.Component<PortsContainer2Props> {\n    render() {\n        return (\n            <div className=\"PortsContainerUTXOBottom\">\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\n/**\n * Marching ants border\n */\n\ninterface DefaultNodeProps {\n    node: UTXONodeModel;\n    engine: DiagramEngine;\n}\n\n/**\n * Default node that models the UTXONodeModel. It creates two columns\n * for both all the input ports on the left, and the output ports on the right.\n */\n//node: HTMLDivElement | null;\n//callback: () => any;\nexport function UTXONodeWidget(props: DefaultNodeProps) {\n    const selected_entity_id: EntityType = useSelector(selectEntityToView);\n    const has_continuations =\n        Object.keys(\n            useSelector(selectContinuation)(\n                `${props.node.getOptions().txid}:${\n                    props.node.getOptions().index\n                }`\n            ) ?? {}\n        ).length > 0;\n    const [id, setID] = React.useState(Math.random());\n    const is_reachable = useSelector(selectIsReachable)(\n        props.node.getOptions().txid\n    );\n    const [amount, setAmount] = React.useState(props.node.getAmount());\n    React.useEffect(() => {\n        const l = props.node.registerListener({\n            sync: (e: BaseEvent) =>\n                setAmount((props.node as UTXOModel).getAmount()),\n        });\n        return () => {\n            props.node.deregisterListener(l);\n        };\n    });\n    const generatePort = (port: DefaultPortModel) => {\n        return (\n            <DefaultPortLabel\n                engine={props.engine}\n                port={port}\n                key={port.getID()}\n            />\n        );\n    };\n    const ports_in = _.map(props.node.getInPorts(), generatePort);\n    const ports_out = _.map(props.node.getOutPorts(), generatePort);\n    const theme = useTheme();\n    const textColor = theme.palette.text.primary;\n    const ports_top =\n        ports_in.length === 0 ? null : (\n            <PortsTop key=\"ports\" color={'transparent'} textColor={textColor}>\n                <PortsContainerUTXOTop key=\"inputs\">\n                    {ports_in}\n                </PortsContainerUTXOTop>\n            </PortsTop>\n        );\n    const ports_bottom =\n        ports_out.length === 0 ? null : (\n            <PortsBottom\n                color={theme.palette.secondary.light}\n                textColor={theme.palette.secondary.contrastText}\n            >\n                <PortsContainerUTXOBottom key=\"outputs\">\n                    {ports_out}\n                </PortsContainerUTXOBottom>\n            </PortsBottom>\n        );\n\n    const is_continuable = !has_continuations ? null : (\n        <div\n            style={{\n                background: theme.palette.info.light,\n                color: theme.palette.info.contrastText,\n                textAlign: 'center',\n            }}\n        >\n            UPDATABLE\n        </div>\n    );\n\n    const reachable_cl = is_reachable ? 'reachable' : 'unreachable';\n    const colorObj = Color(props.node.getOptions().color);\n    const color = colorObj.alpha(0.2).toString();\n    const opts = props.node.getOptions();\n    const is_selected =\n        selected_entity_id[0] === 'UTXO' &&\n        selected_entity_id[1].hash === opts.txid &&\n        selected_entity_id[1].nIn === opts.index;\n    return (\n        <div>\n            {ports_top}\n            <div style={{ position: 'relative' }}>\n                <UTXONode\n                    data-default-utxonode-name={props.node.getOptions().name}\n                    key={id}\n                    selected={is_selected}\n                    className={reachable_cl}\n                >\n                    <Title color={color} textColor={textColor}>\n                        <TitleName>{props.node.getOptions().name}</TitleName>\n                    </Title>\n                    {is_continuable}\n                    <ConfirmationWidget t={props.node.getOptions().txid} />\n                    <Title color={color} textColor={textColor}>\n                        <TitleName>{PrettyAmount(amount)}</TitleName>\n                    </Title>\n                    {ports_bottom}\n                </UTXONode>\n            </div>\n        </div>\n    );\n}\n","import { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport * as React from 'react';\nimport { UTXONodeModel } from './UTXONodeModel';\nimport { UTXONodeWidget } from './UTXONodeWidget';\n\nexport class UTXONodeFactory extends AbstractReactFactory<\n    UTXONodeModel,\n    DiagramEngine\n> {\n    constructor() {\n        super('utxo-node');\n    }\n\n    generateModel(event: any) {\n        return new UTXONodeModel();\n    }\n\n    generateReactWidget(event: any) {\n        return <UTXONodeWidget engine={this.engine} node={event.model} />;\n    }\n}\n","import {\n    IconButton,\n    InputLabel,\n    MenuItem,\n    Select,\n    Tooltip,\n} from '@mui/material';\nimport { orange, purple, red, yellow } from '@mui/material/colors';\nimport MergeTypeIcon from '@mui/icons-material/MergeType';\nimport SaveIcon from '@mui/icons-material/Save';\nimport SendIcon from '@mui/icons-material/Send';\nimport VpnKeyIcon from '@mui/icons-material/VpnKey';\nimport * as Bitcoin from 'bitcoinjs-lib';\nimport React from 'react';\nimport Hex from './Hex';\nimport './PSBTDetail.css';\ninterface IProps {\n    psbts: Bitcoin.Psbt[];\n}\nclass PSBTHandler {\n    show_flash: (\n        msg: string | JSX.Element,\n        color: string,\n        onclick?: () => void\n    ) => void;\n    constructor(\n        show_flash: (\n            msg: string | JSX.Element,\n            color: string,\n            onclick?: () => void\n        ) => void\n    ) {\n        this.show_flash = show_flash;\n    }\n    async combine_psbt(psbt: Bitcoin.Psbt) {\n        const psbt_in: Bitcoin.Psbt = Bitcoin.Psbt.fromBase64(\n            await window.electron.fetch_psbt()\n        );\n        try {\n            psbt.combine(psbt_in);\n            this.show_flash('PSBT Combined', 'green');\n        } catch (e: any) {\n            this.show_flash(\n                <div>\n                    PSBT Error{' '}\n                    <span className=\"glyphicon glyphicon-question-sign\"></span>\n                </div>,\n                'red',\n                () => alert(e.toString())\n            );\n        }\n    }\n    async sign_psbt(psbt: string) {\n        const command = [{ method: 'walletprocesspsbt', parameters: [psbt] }];\n        const signed = (await window.electron.bitcoin_command(command))[0];\n        const as_psbt = Bitcoin.Psbt.fromBase64(signed.psbt);\n        if (signed.complete) {\n            this.show_flash('Fully Signed', 'green');\n        } else {\n            this.show_flash('Partial Signed', 'red');\n        }\n        return as_psbt;\n    }\n    async finalize_psbt(psbt: string) {\n        let hex: string;\n        const command = [{ method: 'finalizepsbt', parameters: [psbt] }];\n        const result = (await window.electron.bitcoin_command(command))[0];\n        if (\n            (!result.hex && result.complete) ||\n            (result.hex && !result.complete)\n        ) {\n            this.show_flash('PSBT Signing Error :(', 'red');\n            return;\n        }\n        if (result.complete) {\n            hex = result.hex;\n        } else {\n            const new_psbt = result.psbt ?? psbt;\n            const sapio_finalized = await window.electron.sapio.psbt.finalize(\n                new_psbt\n            );\n            if ('err' in sapio_finalized) {\n                this.show_flash('PSBT Signing Error :(', 'red');\n                return;\n            }\n            const sapio_result:\n                | { completed: true; hex: string }\n                | {\n                      completed: false;\n                      psbt: string;\n                      error: string;\n                      errors: string[];\n                  } = JSON.parse(sapio_finalized.ok);\n            if (sapio_result.completed) {\n                hex = sapio_result.hex;\n            } else {\n                this.show_flash('PSBT Not Complete', 'red');\n                return;\n            }\n        }\n        try {\n            const hex_tx = Bitcoin.Transaction.fromHex(hex);\n            const send = [{ method: 'sendrawtransaction', parameters: [hex] }];\n\n            const sent = (await window.electron.bitcoin_command(send))[0];\n            if (sent !== hex_tx.getId()) {\n                this.show_flash(\n                    <div>\n                        Relay Error{' '}\n                        <span className=\"glyphicon glyphicon-question-sign\"></span>\n                    </div>,\n                    'red',\n                    () => alert(sent.message.toString())\n                );\n            } else {\n                this.show_flash('Transaction Relayed!', 'green');\n            }\n        } catch (e: any) {\n            this.show_flash(\n                <div>\n                    PSBT Error{' '}\n                    <span className=\"glyphicon glyphicon-question-sign\"></span>\n                </div>,\n                'red',\n                () => alert(e.toString())\n            );\n        }\n    }\n\n    async save_psbt(psbt: string) {\n        // no await\n        window.electron.save_psbt(psbt);\n    }\n}\nexport function PSBTDetail(props: IProps) {\n    const psbt_selection_form = React.useRef<HTMLSelectElement>(null);\n    const [psbt, setPSBT] = React.useState<Bitcoin.Psbt>(props.psbts[0]!);\n    const [flash, setFlash] = React.useState<JSX.Element | null>(null);\n    if (props.psbts.length === 0) return null;\n    function show_flash(\n        msg: string | JSX.Element,\n        color: string,\n        onclick?: () => void\n    ) {\n        const click = onclick ?? (() => null);\n        const elt = (\n            <h3 style={{ color: color }} onClick={click}>\n                {msg}\n            </h3>\n        );\n        setFlash(elt);\n        setTimeout(() => setFlash(<div></div>), 2000);\n    }\n    const psbt_handler = new PSBTHandler(show_flash);\n\n    const selectable_psbts = props.psbts.map((w, i) => (\n        <MenuItem key={i} value={i}>\n            {i} -- {w.toBase64().substr(0, 16)}...\n        </MenuItem>\n    ));\n    // missing horizontal\n    return (\n        <div className=\"PSBTDetail\">\n            <InputLabel id=\"label-select-psbt\">PSBT Selection</InputLabel>\n            <Select\n                labelId=\"label-select-psbt\"\n                label=\"PSBT Selection\"\n                variant=\"outlined\"\n                ref={psbt_selection_form}\n                onChange={() => {\n                    const idx: number =\n                        parseInt(psbt_selection_form.current?.value ?? '0') ??\n                        0;\n                    if (idx < props.psbts.length && idx >= 0) {\n                        setPSBT(props.psbts[idx]!);\n                    }\n                }}\n            >\n                {selectable_psbts}\n            </Select>\n            {flash}\n            <Hex\n                className=\"txhex\"\n                value={psbt.toBase64()}\n                label=\"Selected PSBT\"\n            ></Hex>\n            <div className=\"PSBTActions\">\n                <Tooltip title=\"Save PSBT to Disk\">\n                    <IconButton\n                        aria-label=\"save-psbt-disk\"\n                        onClick={() => psbt_handler.save_psbt(psbt.toBase64())}\n                    >\n                        <SaveIcon style={{ color: red[500] }} />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Sign PSBT using Node\">\n                    <IconButton\n                        aria-label=\"sign-psbt-node\"\n                        onClick={async () => {\n                            const new_psbt = await psbt_handler.sign_psbt(\n                                psbt.toBase64()\n                            );\n                            // TODO: Confirm this saves to model?\n                            psbt.combine(new_psbt);\n                            setPSBT(psbt);\n                        }}\n                    >\n                        <VpnKeyIcon style={{ color: yellow[500] }} />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Combine PSBT from File\">\n                    <IconButton\n                        aria-label=\"combine-psbt-file\"\n                        onClick={async () => {\n                            // TODO: Confirm this saves to model?\n                            await psbt_handler.combine_psbt(psbt);\n                            setPSBT(psbt);\n                        }}\n                    >\n                        <MergeTypeIcon style={{ color: purple[500] }} />\n                    </IconButton>\n                </Tooltip>\n                <Tooltip title=\"Finalize and Broadcast PSBT with Node\">\n                    <IconButton\n                        aria-label=\"combine-psbt-file\"\n                        onClick={async () => {\n                            await psbt_handler.finalize_psbt(psbt.toBase64());\n                            setPSBT(psbt);\n                        }}\n                    >\n                        <SendIcon style={{ color: orange[500] }} />\n                    </IconButton>\n                </Tooltip>\n                <div></div>\n            </div>\n        </div>\n    );\n}\n","import { Transaction } from 'bitcoinjs-lib';\nimport React, { ChangeEvent } from 'react';\nimport * as Bitcoin from 'bitcoinjs-lib';\nimport { TransactionModel } from '../../../Data/Transaction';\nimport { UTXOModel } from '../../../Data/UTXO';\nimport Hex from './Hex';\nimport { InputDetail } from './InputDetail';\nimport { TXIDDetail } from './OutpointDetail';\nimport { OutputDetail } from './OutputDetail';\nimport _ from 'lodash';\nimport './TransactionDetail.css';\nimport {\n    hash_to_hex,\n    outpoint_to_id,\n    sequence_convert,\n    time_to_pretty_string,\n    TXIDAndWTXIDMap,\n} from '../../../util';\nimport Color from 'color';\nimport {\n    EntityType,\n    selectEntityToView,\n    selectTXNColor,\n    selectTXNPurpose,\n    set_custom_color,\n    set_custom_purpose,\n} from '../EntitySlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Divider, TextField, Typography } from '@mui/material';\nimport { PSBTDetail } from './PSBTDetail';\nimport { ContractModel } from '../../../Data/ContractManager';\ninterface TransactionDetailProps {\n    current_contract: ContractModel;\n    find_tx_model: (a: Buffer, b: number) => UTXOModel | null;\n}\nexport function TransactionDetail(props: TransactionDetailProps) {\n    const entity_id: EntityType = useSelector(selectEntityToView);\n    const entity =\n        entity_id[0] === 'TXN'\n            ? TXIDAndWTXIDMap.get_by_txid_s(\n                  props.current_contract.txid_map,\n                  entity_id[1]\n              ) ?? null\n            : null;\n    return (\n        <div hidden={entity === null}>\n            {entity && (\n                <TransactionDetailInner\n                    entity={entity}\n                    find_tx_model={props.find_tx_model}\n                />\n            )}\n        </div>\n    );\n}\ninterface TransactionInnerDetailProps {\n    entity: TransactionModel;\n    find_tx_model: (a: Buffer, b: number) => UTXOModel | null;\n}\nexport function TransactionDetailInner(props: TransactionInnerDetailProps) {\n    const dispatch = useDispatch();\n    const opts = props.entity.getOptions();\n    const txid = opts.txn.getId();\n    const color = useSelector(selectTXNColor(txid)) ?? Color(opts.color);\n    const purpose = useSelector(selectTXNPurpose(txid)) ?? opts.purpose;\n\n    const outs = props.entity.utxo_models.map((o, i) => (\n        <OutputDetail\n            key={`${o.getOptions().txid}:${o.getOptions().index}`}\n            txoutput={o}\n        />\n    ));\n    const ins = props.entity.tx.ins.map((inp, i) => {\n        const witnesses: Buffer[][] =\n            props.entity.witness_set.witnesses.flatMap((w) => {\n                const b: Buffer[] | undefined = w[i];\n                return b ? [b] : [];\n            });\n        return (\n            <InputDetail\n                key={outpoint_to_id({\n                    hash: hash_to_hex(inp.hash),\n                    nIn: inp.index,\n                })}\n                txinput={inp}\n                witnesses={witnesses}\n            />\n        );\n    });\n\n    const {\n        greatest_relative_height,\n        greatest_relative_time,\n        locktime_enable,\n        relative_time_jsx,\n        relative_height_jsx,\n    } = compute_relative_timelocks(props.entity.tx);\n\n    const locktime = props.entity.tx.locktime;\n    const as_date = new Date(1970, 0, 1);\n    as_date.setSeconds(locktime);\n    const lt =\n        !locktime_enable || locktime === 0\n            ? 'None'\n            : locktime < 500_000_000\n            ? 'Block #' + locktime.toString()\n            : as_date.toUTCString() + ' MTP';\n    // note missing horizontal\n    const onchange_color = (e: string) => {\n        const color = new Color(e);\n        dispatch(set_custom_color([txid, color.hex()]));\n    };\n    const onchange_purpose = (e: string) => {\n        dispatch(set_custom_purpose([txid, e]));\n    };\n    const inner_debounce_color = _.debounce(onchange_color, 30);\n    const debounce_color = (e: ChangeEvent<HTMLInputElement>) => {\n        inner_debounce_color(e.target.value);\n    };\n    const inner_debounce_purpose = _.debounce(onchange_purpose, 30);\n    const debounce_purpose = (e: ChangeEvent<HTMLInputElement>) => {\n        inner_debounce_purpose(e.target.value);\n    };\n    const absolute_lock_jsx =\n        !locktime_enable || locktime === 0 ? null : (\n            <>\n                <span>Absolute Lock Time:</span>\n                <span> {lt} </span>\n            </>\n        );\n    return (\n        <div className=\"TransactionDetail\">\n            <TextField\n                label=\"Purpose\"\n                defaultValue={purpose}\n                onChange={debounce_purpose}\n            />\n            <TextField\n                label={'Color ' + color.hex()}\n                defaultValue={color.hex()}\n                fullWidth\n                type=\"color\"\n                onChange={debounce_color}\n            />\n            <Divider />\n            <TXIDDetail txid={props.entity.get_txid()} />\n            <PSBTDetail psbts={props.entity.witness_set.psbts} />\n            <Hex\n                value={props.entity.tx.toHex()}\n                className=\"txhex\"\n                label=\"Tx Hex\"\n            />\n            <div className=\"properties\">\n                {absolute_lock_jsx}\n                {relative_height_jsx}\n                {relative_time_jsx}\n            </div>\n            <Divider />\n            <Typography variant=\"h5\"> Inputs</Typography>\n            <div className=\"inputs\">{ins}</div>\n            <Divider />\n            <Typography variant=\"h5\"> Outputs </Typography>\n            <div className=\"outputs\">{outs}</div>\n        </div>\n    );\n}\n\n// TODO: Make this check the input's context\nfunction compute_relative_timelocks(tx: Transaction) {\n    const sequences = tx.ins.map((inp) => inp.sequence);\n    let greatest_relative_time = 0;\n    let greatest_relative_height = 0;\n    let locktime_enable = false;\n    for (const sequence of sequences) {\n        if (sequence === Bitcoin.Transaction.DEFAULT_SEQUENCE) continue;\n        locktime_enable = true;\n        const { relative_time, relative_height } = sequence_convert(sequence);\n        greatest_relative_time = Math.max(\n            relative_time,\n            greatest_relative_time\n        );\n        greatest_relative_height = Math.max(\n            relative_height,\n            greatest_relative_height\n        );\n    }\n    const relative_time_string = time_to_pretty_string(greatest_relative_time);\n    const relative_time_jsx =\n        greatest_relative_time === 0 ? null : (\n            <>\n                <span>Relative Lock Time: </span>\n                <span>{relative_time_string} </span>\n            </>\n        );\n    const relative_height_jsx =\n        greatest_relative_height === 0 ? null : (\n            <>\n                <span>Relative Height: </span>\n                <span>{greatest_relative_height} Blocks</span>\n            </>\n        );\n    return {\n        greatest_relative_height,\n        greatest_relative_time,\n        locktime_enable,\n        relative_time_jsx,\n        relative_height_jsx,\n    };\n}\n","import { IconButton, Tooltip, useTheme } from '@mui/material';\nimport { red } from '@mui/material/colors';\nimport CancelOutlinedIcon from '@mui/icons-material/CancelOutlined';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ContractModel } from '../../Data/ContractManager';\nimport { TransactionDetail } from './Detail/TransactionDetail';\nimport { UTXODetail } from './Detail/UTXODetail';\nimport { deselect_entity } from './EntitySlice';\nimport './EntityViewer.css';\nimport Color from 'color';\n\ninterface CurrentylViewedEntityProps {\n    current_contract: ContractModel;\n}\n\nexport function CurrentlyViewedEntity(props: CurrentylViewedEntityProps) {\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const [width, setWidth] = React.useState('20em');\n    const onMouseUp = (e: MouseEvent) => {\n        e.preventDefault();\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n    };\n    const onMouseMove = (e: MouseEvent) => {\n        e.preventDefault();\n        const width = (window.innerWidth - e.clientX).toString() + 'px';\n        setWidth(width);\n    };\n    const onMouseDown: React.MouseEventHandler<HTMLDivElement> = (e) => {\n        e.preventDefault();\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    return (\n        <div\n            className=\"EntityViewerFrame\"\n            style={{\n                backgroundColor: Color(theme.palette.background.default)\n                    .fade(0.2)\n                    .toString(),\n            }}\n        >\n            <div className=\"EntityViewerResize\" onMouseDown={onMouseDown}></div>\n            <div>\n                <Tooltip title=\"Close Entity Viewer\">\n                    <IconButton\n                        aria-label=\"close-entity-viewer\"\n                        onClick={() => dispatch(deselect_entity())}\n                    >\n                        <CancelOutlinedIcon style={{ color: red[500] }} />\n                    </IconButton>\n                </Tooltip>\n                <div\n                    className=\"EntityViewer\"\n                    style={{\n                        width: width,\n                    }}\n                >\n                    <TransactionDetail\n                        current_contract={props.current_contract}\n                        find_tx_model={(a: Buffer, b: number) =>\n                            props.current_contract.lookup_utxo_model(a, b)\n                        }\n                    />\n                    <UTXODetail contract={props.current_contract} />\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { load_new_model } from '../../AppSlice';\n\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { Button, TextField } from '@mui/material';\nimport { close_modal } from '../ModalSlice';\n\nconst FIELD_NAME = 'data';\nexport function LoadHexModal(props: { show: boolean }) {\n    const formRef = React.useRef<null | HTMLFormElement>(null);\n    const dispatch = useDispatch();\n    function handleSubmit() {\n        if (formRef.current) {\n            const elt = formRef.current.elements.namedItem(FIELD_NAME);\n            if (elt) {\n                // TODO: More robust type corercion\n                if ((elt as any).value) {\n                    dispatch(load_new_model(JSON.parse((elt as any).value)));\n                }\n            }\n        }\n        dispatch(close_modal());\n    }\n    return (\n        <Dialog open={props.show} onClose={() => dispatch(close_modal())}>\n            <DialogTitle>Paste Hex JSON</DialogTitle>\n\n            <DialogContent>\n                <DialogContentText>\n                    <p>The data pasted must be output through Sapio Studio.</p>\n                </DialogContentText>\n                <form ref={formRef}>\n                    <TextField name={FIELD_NAME} multiline fullWidth />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleSubmit}>Load</Button>\n                <Button onClick={() => dispatch(close_modal())}>Close</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import { Button, TextField } from '@mui/material';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { FormEventHandler } from 'react-transition-group/node_modules/@types/react';\nimport { close_modal } from '../ModalSlice';\n\nexport function SapioCompilerModal(props: { show: boolean }) {\n    const dispatch = useDispatch();\n    const handleSubmit: FormEventHandler<HTMLFormElement> = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        const form = event.currentTarget;\n        // triggers reconnect\n        dispatch(close_modal());\n    };\n    return (\n        <Dialog open={props.show} onClose={() => dispatch(close_modal())}>\n            <DialogTitle>Set Contract Generator URL</DialogTitle>\n            <DialogContent>\n                <form onSubmit={handleSubmit}>\n                    <TextField\n                        name=\"ws\"\n                        type=\"text\"\n                        placeholder=\"url\"\n                        label=\"Websocket\"\n                    />\n                    <Button type=\"submit\">Set</Button>\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => dispatch(close_modal())}>Close</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import { Button, TextField } from '@mui/material';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useDispatch } from 'react-redux';\nimport { ContractModel } from '../../Data/ContractManager';\nimport { TXIDAndWTXIDMap, txid_buf_to_string } from '../../util';\nimport { close_modal } from '../ModalSlice';\nimport * as React from 'react';\n\ninterface IProps {\n    contract: ContractModel;\n    show: boolean;\n}\nexport function SaveHexModal(props: IProps) {\n    const dispatch = useDispatch();\n    const non_phantoms = props.contract.txn_models.filter((item) => {\n        return (\n            -1 !==\n            item.tx.ins.findIndex((inp) =>\n                TXIDAndWTXIDMap.has_by_txid(\n                    props.contract.txid_map,\n                    txid_buf_to_string(inp.hash)\n                )\n            )\n        );\n    });\n    const data = JSON.stringify(\n        {\n            program: non_phantoms.map((t) => t.get_json()),\n        },\n        undefined,\n        4\n    );\n    const handleSave = () => {\n        window.electron.save_contract(data);\n    };\n    return (\n        <Dialog\n            open={props.show}\n            onClose={() => dispatch(close_modal())}\n            fullScreen\n        >\n            <DialogTitle>Contract JSON</DialogTitle>\n            <DialogContent>\n                <form onSubmit={(e) => e.preventDefault()}>\n                    <TextField\n                        name=\"data\"\n                        multiline\n                        fullWidth\n                        type=\"text\"\n                        aria-readonly\n                        InputProps={{\n                            readOnly: true,\n                        }}\n                        defaultValue={data}\n                        style={{ minHeight: '50vh' }}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => handleSave()}>Save</Button>\n                <Button onClick={() => dispatch(close_modal())}>Close</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import { Button, Select } from '@mui/material';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { BitcoinNodeManager } from '../../Data/BitcoinNode';\nimport { close_modal } from '../ModalSlice';\n\nexport function ViewContractModal(props: {\n    show: boolean;\n    bitcoin_node_manager: BitcoinNodeManager;\n}) {\n    const dispatch = useDispatch();\n    return (\n        <Dialog open={props.show} onClose={() => dispatch(close_modal())}>\n            <DialogTitle>View Existing Contract</DialogTitle>\n            <DialogContent>\n                <form>\n                    <Select\n                        placeholder=\"Existing Contract\"\n                        className=\" mr-sm-2\"\n                    />\n                    <Button type=\"submit\">View</Button>\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => dispatch(close_modal())}>Close</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BitcoinNodeManager } from '../Data/BitcoinNode';\nimport { ContractModel } from '../Data/ContractManager';\nimport { LoadHexModal } from './ContractCreator/LoadHexModal';\nimport { SapioCompilerModal } from './ContractCreator/SapioCompilerModal';\nimport { SaveHexModal } from './ContractCreator/SaveHexModal';\nimport { ViewContractModal } from './ContractCreator/ViewContractModal';\nimport { selectModal } from './ModalSlice';\n\nexport function Modals(props: {\n    contract: ContractModel;\n    bitcoin_node_manager: BitcoinNodeManager;\n}) {\n    const dispatch = useDispatch();\n    const which = useSelector(selectModal);\n    return (\n        <div>\n            <ViewContractModal\n                show={which === 'ViewContract'}\n                bitcoin_node_manager={props.bitcoin_node_manager}\n            />\n\n            <SapioCompilerModal\n                show={which === 'SapioServer'}\n            ></SapioCompilerModal>\n\n            <LoadHexModal show={which === 'LoadHex'} />\n\n            <SaveHexModal\n                show={which === 'SaveHex'}\n                contract={props.contract}\n            />\n        </div>\n    );\n}\n","import { Button, Typography } from '@mui/material';\nimport { JSONSchema7 } from 'json-schema';\nimport React from 'react';\nexport function PathOnly(\n    props:\n        | {\n              schema: JSONSchema7;\n              name: string;\n              formData: string | null;\n              value: string | null;\n          }\n        | any\n) {\n    const [val, set_val] = React.useState(props.value);\n    React.useEffect(() => {\n        props.onChange(val);\n    }, [val]);\n    return (\n        <div>\n            <Typography>{props.value ?? 'None Selected'}</Typography>\n            <Button\n                onClick={async () => {\n                    const new_val = await window.electron.select_filename();\n                    if (new_val) set_val(new_val);\n                }}\n            >\n                {props.name ?? 'Select File'}\n            </Button>\n        </div>\n    );\n}\n\nexport const custom_fields = {\n    'custom::filename': PathOnly,\n};\n","import { JSONSchema7 } from 'json-schema';\nexport type schema_t = {\n    bitcoin: JSONSchema7;\n    display: JSONSchema7;\n    local_oracle: JSONSchema7;\n    sapio_cli: JSONSchema7;\n};\nexport const schemas: schema_t = {\n    bitcoin: {\n        $schema: 'http://json-schema.org/draft-07/schema#',\n        definitions: {\n            Auth: {\n                oneOf: [\n                    {\n                        enum: ['None'],\n                        type: 'string',\n                    },\n                    {\n                        additionalProperties: false,\n                        properties: {\n                            UserPass: {\n                                items: [\n                                    {\n                                        type: 'string',\n                                    },\n                                    {\n                                        $ref: '#/definitions/Password',\n                                    },\n                                ],\n                                maxItems: 2,\n                                minItems: 2,\n                                type: 'array',\n                            },\n                        },\n                        required: ['UserPass'],\n                        title: 'Username / Password',\n                        type: 'object',\n                    },\n                    {\n                        additionalProperties: false,\n                        properties: {\n                            CookieFile: {\n                                $ref: '#/definitions/File',\n                            },\n                        },\n                        required: ['CookieFile'],\n                        title: 'Cookie File',\n                        type: 'object',\n                    },\n                ],\n                title: 'Auth File',\n            },\n            File: {\n                format: 'custom::filename',\n                type: 'string',\n            },\n            Network: {\n                enum: ['Bitcoin', 'Testnet', 'Signet', 'Regtest'],\n                type: 'string',\n            },\n            Password: {\n                format: 'password',\n                type: 'string',\n            },\n        },\n        properties: {\n            auth: {\n                allOf: [\n                    {\n                        $ref: '#/definitions/Auth',\n                    },\n                ],\n                title: 'Credentials',\n            },\n            host: {\n                description: 'E.g., 0.0.0.0 or mynode.com',\n                title: 'Host',\n                type: 'string',\n            },\n            network: {\n                allOf: [\n                    {\n                        $ref: '#/definitions/Network',\n                    },\n                ],\n                title: 'Which Network',\n            },\n            port: {\n                format: 'uint64',\n                minimum: 0.0,\n                title: 'RPC Port',\n                type: 'integer',\n            },\n        },\n        required: ['auth', 'host', 'network', 'port'],\n        title: 'Bitcoin Settings',\n        type: 'object',\n    },\n    display: {\n        $schema: 'http://json-schema.org/draft-07/schema#',\n        definitions: {\n            AnimationSpeed: {\n                oneOf: [\n                    {\n                        enum: ['Disabled'],\n                        type: 'string',\n                    },\n                    {\n                        additionalProperties: false,\n                        properties: {\n                            Enabled: {\n                                format: 'uint64',\n                                maximum: 5000.0,\n                                minimum: 50.0,\n                                type: 'integer',\n                            },\n                        },\n                        required: ['Enabled'],\n                        title: 'Enable Animation (ms)',\n                        type: 'object',\n                    },\n                ],\n                title: 'Animation Speed',\n            },\n            SatsOrBitcoin: {\n                oneOf: [\n                    {\n                        additionalProperties: false,\n                        description: 'min = 0, max = 100000000 (1 btc)',\n                        properties: {\n                            BitcoinAfter: {\n                                format: 'uint64',\n                                maximum: 100000000.0,\n                                minimum: 0.0,\n                                type: 'integer',\n                            },\n                        },\n                        required: ['BitcoinAfter'],\n                        title: 'After Threshold',\n                        type: 'object',\n                    },\n                    {\n                        additionalProperties: false,\n                        properties: {\n                            AlwaysSats: {\n                                type: 'null',\n                            },\n                        },\n                        required: ['AlwaysSats'],\n                        title: 'Always Sats',\n                        type: 'object',\n                    },\n                    {\n                        additionalProperties: false,\n                        properties: {\n                            AlwaysBitcoin: {\n                                type: 'null',\n                            },\n                        },\n                        required: ['AlwaysBitcoin'],\n                        title: 'Always Bitcoin',\n                        type: 'object',\n                    },\n                ],\n                title: 'To Show Sats or Bitcoin',\n            },\n        },\n        properties: {\n            animation_speed: {\n                allOf: [\n                    {\n                        $ref: '#/definitions/AnimationSpeed',\n                    },\n                ],\n                description: 'The speed (in ms) to animate at',\n                title: 'Animation Speed',\n            },\n            node_polling_freq: {\n                format: 'uint64',\n                minimum: 0.0,\n                title: 'Bitcoin Node Polling Frequency (seconds)',\n                type: 'integer',\n            },\n            satoshis: {\n                allOf: [\n                    {\n                        $ref: '#/definitions/SatsOrBitcoin',\n                    },\n                ],\n                title: 'Threshold at which to display Bitcoin () or Sats ()',\n            },\n        },\n        required: ['animation_speed', 'node_polling_freq', 'satoshis'],\n        title: 'Display Settings',\n        type: 'object',\n    },\n    local_oracle: {\n        $schema: 'http://json-schema.org/draft-07/schema#',\n        definitions: {\n            File: {\n                format: 'custom::filename',\n                type: 'string',\n            },\n        },\n        description:\n            'If Sapio Studio should run a local oracle, what seed file and interface to use.',\n        oneOf: [\n            {\n                enum: ['Disabled'],\n                type: 'string',\n            },\n            {\n                additionalProperties: false,\n                description: 'An oracle will be run & managed by Sapio Studio',\n                properties: {\n                    Enabled: {\n                        properties: {\n                            file: {\n                                allOf: [\n                                    {\n                                        $ref: '#/definitions/File',\n                                    },\n                                ],\n                                title: 'Seed File',\n                            },\n                            interface: {\n                                description: '(e.g. 0.0.0.0:8080)',\n                                title: 'Interface',\n                                type: 'string',\n                            },\n                        },\n                        required: ['file', 'interface'],\n                        type: 'object',\n                    },\n                },\n                required: ['Enabled'],\n                title: 'Enabled',\n                type: 'object',\n            },\n        ],\n        title: 'Local Oracle',\n    },\n    sapio_cli: {\n        $schema: 'http://json-schema.org/draft-07/schema#',\n        definitions: {\n            File: {\n                format: 'custom::filename',\n                type: 'string',\n            },\n            IFace: {\n                description: 'e.g., hello.com:1010, 0.0.0.0:8080',\n                title: 'Network Interface',\n                type: 'string',\n            },\n            ModuleHash: {\n                description: '(64 char hex)',\n                title: 'Module Hash',\n                type: 'string',\n            },\n            Nickname: {\n                description: 'e.g., my_hot_wallet',\n                title: 'Human Readable Nickname',\n                type: 'string',\n            },\n            PK: {\n                description: 'e.g. xpubD6...',\n                title: 'Public Key',\n                type: 'string',\n            },\n            Preferences: {\n                oneOf: [\n                    {\n                        enum: ['Default'],\n                        type: 'string',\n                    },\n                    {\n                        additionalProperties: false,\n                        description:\n                            'From Sapio-Studio, Configuration parameters done locally.',\n                        properties: {\n                            Here: {\n                                properties: {\n                                    emulators: {\n                                        description:\n                                            'Which Emulators to query?',\n                                        items: {\n                                            items: [\n                                                {\n                                                    $ref: '#/definitions/PK',\n                                                },\n                                                {\n                                                    $ref: '#/definitions/IFace',\n                                                },\n                                            ],\n                                            maxItems: 2,\n                                            minItems: 2,\n                                            type: 'array',\n                                        },\n                                        title: 'Emulators',\n                                        type: 'array',\n                                    },\n                                    plugin_map: {\n                                        description:\n                                            'Map of nicknames to module hashes',\n                                        items: {\n                                            items: [\n                                                {\n                                                    $ref: '#/definitions/Nickname',\n                                                },\n                                                {\n                                                    $ref: '#/definitions/ModuleHash',\n                                                },\n                                            ],\n                                            maxItems: 2,\n                                            minItems: 2,\n                                            type: 'array',\n                                        },\n                                        title: 'Custom Plugin Mapping',\n                                        type: 'array',\n                                    },\n                                    threshold: {\n                                        description:\n                                            'How many Emulators must sign?',\n                                        format: 'uint16',\n                                        minimum: 0.0,\n                                        title: 'Emulator Threshold (should set to # of emulators usually)',\n                                        type: 'integer',\n                                    },\n                                    use_emulation: {\n                                        description:\n                                            'Whether or not Emulation should be used',\n                                        title: 'Use Emulation?',\n                                        type: 'boolean',\n                                    },\n                                },\n                                required: [\n                                    'emulators',\n                                    'plugin_map',\n                                    'threshold',\n                                    'use_emulation',\n                                ],\n                                type: 'object',\n                            },\n                        },\n                        required: ['Here'],\n                        title: 'Here',\n                        type: 'object',\n                    },\n                    {\n                        additionalProperties: false,\n                        description: 'Use a custom config file',\n                        properties: {\n                            File: {\n                                properties: {\n                                    config: {\n                                        allOf: [\n                                            {\n                                                $ref: '#/definitions/File',\n                                            },\n                                        ],\n                                        title: 'Configuration File:',\n                                    },\n                                },\n                                required: ['config'],\n                                type: 'object',\n                            },\n                        },\n                        required: ['File'],\n                        title: 'File',\n                        type: 'object',\n                    },\n                ],\n                title: 'Configuration Source',\n            },\n        },\n        properties: {\n            preferences: {\n                allOf: [\n                    {\n                        $ref: '#/definitions/Preferences',\n                    },\n                ],\n                description: 'How to configure the options for sapio-cli',\n                title: 'Preferences',\n            },\n            sapio_cli: {\n                allOf: [\n                    {\n                        $ref: '#/definitions/File',\n                    },\n                ],\n                description: 'sapio-cli Binary Location',\n                title: 'Binary',\n            },\n        },\n        required: ['preferences', 'sapio_cli'],\n        title: 'sapio-cli Studio Configuration',\n        type: 'object',\n    },\n};\nexport const default_settings = {\n    bitcoin: {\n        auth: {\n            UserPass: ['Put Your Username', 'Put Your Password'],\n        },\n        host: '0.0.0.0',\n        network: 'Signet',\n        port: 38332,\n    },\n    display: {\n        animation_speed: {\n            Enabled: 500,\n        },\n        node_polling_freq: 10,\n        satoshis: {\n            BitcoinAfter: 100000,\n        },\n    },\n    local_oracle: 'Disabled',\n    sapio_cli: {\n        preferences: {\n            Here: {\n                emulators: [],\n                plugin_map: [],\n                threshold: 1,\n                use_emulation: false,\n            },\n        },\n        sapio_cli: '',\n    },\n};\n","import {\n    Tabs,\n    Tab,\n    Box,\n    Button,\n    DialogTitle,\n    Dialog,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Typography,\n} from '@mui/material';\nimport React from 'react';\nimport { MuiForm5 as Form } from '@rjsf/material-ui';\nimport { ISubmitEvent } from '@rjsf/core';\nimport { custom_fields, PathOnly } from '../CustomForms/Widgets';\nimport SaveIcon from '@mui/icons-material/Save';\nimport { Cancel } from '@mui/icons-material';\nimport { poll_settings } from '../../Settings/SettingsSlice';\nimport { useDispatch } from 'react-redux';\nimport './Settings.css';\nimport { schemas } from '../../common/settings_gen';\n\nfunction SettingPane(props: {\n    name: keyof typeof schemas;\n    idx: number;\n    value: number;\n    children?: React.ReactNode;\n}) {\n    const dispatch = useDispatch();\n    const handlesubmit = async (\n        data: ISubmitEvent<any>,\n        nativeEvent: React.FormEvent<HTMLFormElement>\n    ) => {\n        if (\n            await window.electron.save_settings(\n                props.name,\n                JSON.stringify(data.formData)\n            )\n        )\n            poll_settings(dispatch);\n    };\n\n    const [data, set_data] = React.useState(null);\n    async function get_args() {\n        const args = await window.electron.load_settings_sync(props.name);\n        if (data !== args) {\n            set_data(args);\n        }\n    }\n    React.useEffect(() => {\n        get_args();\n    }, []);\n    return (\n        <div hidden={props.idx !== props.value} className=\"SettingPane\">\n            {props.idx === props.value && (\n                <Form\n                    className=\"SettingForm\"\n                    schema={schemas[props.name]}\n                    onSubmit={handlesubmit}\n                    fields={custom_fields}\n                    uiSchema={{\n                        sapio_cli: {\n                            'ui:widget': PathOnly,\n                        },\n                        auth: {\n                            CookieFile: {\n                                'ui:widget': PathOnly,\n                            },\n                        },\n                        Enabled: {\n                            file: {\n                                'ui:widget': PathOnly,\n                            },\n                        },\n                    }}\n                    formData={data}\n                >\n                    <Box sx={{ paddingTop: '20px' }}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"success\"\n                            type=\"submit\"\n                            size=\"large\"\n                            endIcon={<SaveIcon />}\n                        >\n                            Save Settings\n                        </Button>\n                        <Button\n                            sx={{ marginLeft: '20px' }}\n                            variant=\"contained\"\n                            color=\"warning\"\n                            size=\"large\"\n                            endIcon={<Cancel />}\n                            onClick={get_args}\n                        >\n                            Reset{' '}\n                        </Button>\n                    </Box>\n                    <Box sx={{ paddingTop: '20px' }}>{props.children}</Box>\n                </Form>\n            )}\n        </div>\n    );\n}\nexport const Settings = React.memo(SettingsInner);\nexport function SettingsInner() {\n    const [idx, set_idx] = React.useState<number>(0);\n    const [dialog_node, set_dialog_node] = React.useState<\n        [string | null, string[]]\n    >([null, []]);\n    const handleChange = (_: any, idx: number) => {\n        set_idx(idx);\n    };\n\n    const test_bitcoind = async () => {\n        window.electron\n            .bitcoin_command([{ method: 'getbestblockhash', parameters: [] }])\n            .then((h) =>\n                set_dialog_node(['Connection Seems OK:', [`Best Hash ${h[0]}`]])\n            )\n            .catch((e) => {\n                console.log('GOT', JSON.stringify(e));\n                const r = e.message;\n                if (typeof e.message === 'string') {\n                    const err = JSON.parse(r);\n                    if (\n                        err instanceof Object &&\n                        'code' in err &&\n                        'name' in err &&\n                        'message' in err\n                    ) {\n                        set_dialog_node([\n                            '¡Connection Not Working!',\n                            [\n                                `Name: ${err.name}`,\n                                `Message: ${err.message}`,\n                                `Error Code: ${err.code}`,\n                            ],\n                        ]);\n                        return;\n                    } else if (typeof err === 'string') {\n                        set_dialog_node([\n                            '¡Connection Not Working!',\n                            [`${err}`],\n                        ]);\n                        return;\n                    }\n                }\n                set_dialog_node(['¡Unknown Error!', [`${r.toString()}`]]);\n            });\n    };\n\n    const test_sapio = async () => {\n        window.electron.sapio\n            .show_config()\n            .then((conf) => {\n                if ('ok' in conf)\n                    set_dialog_node([\n                        'Sapio-CLI is Working!\\nUsing Configuration:',\n                        [`${conf.ok}`],\n                    ]);\n                else\n                    set_dialog_node(['¡Configuration Error!', [`${conf.err}`]]);\n            })\n            .catch((e) =>\n                set_dialog_node(['¡Configuration Error!', [`${e.toString()}`]])\n            );\n    };\n    const check_emulator = async () => {\n        window.electron.emulator.read_log().then((log) => {\n            if (log.length) {\n                const json = JSON.parse(log);\n                set_dialog_node([\n                    'Emulator Status:',\n                    [\n                        `interface: ${json.interface}`,\n                        `pk: ${json.pk}`,\n                        `sync: ${json.sync}`,\n                    ],\n                ]);\n            } else {\n                set_dialog_node(['Emulator Status:', ['Not Running']]);\n            }\n        });\n    };\n\n    return (\n        <div className=\"Settings\">\n            <Box className=\"SettingsNav\">\n                <Tabs\n                    orientation=\"vertical\"\n                    value={idx}\n                    onChange={handleChange}\n                    aria-label=\"basic tabs example\"\n                >\n                    <Tab label=\"Guide\"></Tab>\n                    <Tab label=\"Sapio CLI\"></Tab>\n                    <Tab label=\"Bitcoin\"></Tab>\n                    <Tab label=\"Emulator\"></Tab>\n                    <Tab label=\"Display\"></Tab>\n                </Tabs>\n            </Box>\n            <Box className=\"SettingsPanes\">\n                <Dialog\n                    open={\n                        Boolean(dialog_node[0]) ||\n                        Boolean(dialog_node[1].length)\n                    }\n                    onClose={() => set_dialog_node([null, []])}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">\n                        {dialog_node[0]}\n                    </DialogTitle>\n                    <DialogContent>\n                        <div id=\"alert-dialog-description\">\n                            {dialog_node[1].map((txt) => (\n                                <DialogContentText key={txt}>\n                                    {txt}\n                                </DialogContentText>\n                            ))}\n                        </div>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={() => set_dialog_node([null, []])}>\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                <Guide idx={idx} my_idx={0} />\n                <SettingPane name={'sapio_cli'} value={idx} idx={1}>\n                    <Button\n                        onClick={test_sapio}\n                        variant=\"contained\"\n                        color=\"info\"\n                        size=\"large\"\n                    >\n                        Test Sapio-Cli\n                    </Button>\n                </SettingPane>\n                <SettingPane name={'bitcoin'} value={idx} idx={2}>\n                    <Button\n                        onClick={test_bitcoind}\n                        variant=\"contained\"\n                        color=\"info\"\n                        size=\"large\"\n                    >\n                        Test Connection\n                    </Button>\n                </SettingPane>\n                <SettingPane name={'local_oracle'} value={idx} idx={3}>\n                    <Button\n                        variant=\"contained\"\n                        color=\"success\"\n                        size=\"large\"\n                        onClick={window.electron.emulator.start}\n                    >\n                        Start\n                    </Button>\n                    <Button\n                        sx={{ marginLeft: '20px' }}\n                        variant=\"contained\"\n                        color=\"error\"\n                        size=\"large\"\n                        onClick={window.electron.emulator.kill}\n                    >\n                        Kill\n                    </Button>\n                    <Button\n                        sx={{ marginLeft: '20px' }}\n                        variant=\"contained\"\n                        color=\"info\"\n                        size=\"large\"\n                        onClick={check_emulator}\n                    >\n                        Check Status\n                    </Button>\n                </SettingPane>\n                <SettingPane name={'display'} value={idx} idx={4} />\n            </Box>\n        </div>\n    );\n}\n\nfunction Guide(props: { idx: number; my_idx: number }) {\n    const { my_idx, idx } = props;\n    return (\n        <div hidden={idx !== my_idx} className=\"SettingPane\">\n            {idx === my_idx && (\n                <Box>\n                    <Typography variant=\"h2\">\n                        Welcome to Sapio Studio\n                    </Typography>\n                    <Typography variant=\"h4\">Getting Started</Typography>\n                    <Typography variant=\"body1\">\n                        To get started, you need to configure a few things.\n                        <br />\n                        On this page, you will find tabs for:\n                        <br />\n                        <ol>\n                            <li>Sapio Cli: options for the sapio compiler</li>\n                            <li>\n                                Bitcoin: options for which bitcoin node to\n                                connect to\n                            </li>\n                            <li>\n                                Emulator: options for running an emulator daemon\n                            </li>\n                            <li>\n                                Display: options for Sapio Studio&lsquo;s\n                                rendering\n                            </li>\n                        </ol>\n                        At the bottom of each of these tabs you will see a set\n                        of buttons that will allow you to save and test the\n                        configuration you have currently saved.\n                    </Typography>\n                    <Typography variant=\"h3\">\n                        You must save settings before they will be used.\n                    </Typography>\n                    <Typography variant=\"body1\">\n                        Please ensure your Sapio Studio is properly configured\n                        before continuing on to the application.\n                    </Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from '@mui/material';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectWorkspace } from './Slice/Reducer';\n\nexport function DeleteDialog(props: {\n    set_to_delete: () => void;\n    to_delete: ['workspace', string] | ['contract', string] | null;\n    reload: () => void;\n}) {\n    const workspace = useSelector(selectWorkspace);\n    return (\n        <Dialog onClose={props.set_to_delete} open={props.to_delete !== null}>\n            <DialogTitle>Confirm Deletion</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Confirm deletion of &quot;{props.to_delete}&quot;? File will\n                    be in your trash folder.\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    color=\"warning\"\n                    onClick={(ev) => {\n                        if (props.to_delete) {\n                            switch (props.to_delete[0]) {\n                                case 'workspace':\n                                    window.electron.sapio.workspaces.trash(\n                                        props.to_delete[1]\n                                    );\n                                    break;\n                                case 'contract':\n                                    window.electron.sapio.compiled_contracts.trash(\n                                        workspace,\n                                        props.to_delete[1]\n                                    );\n                                    break;\n                            }\n                        }\n                        props.set_to_delete();\n                        props.reload();\n                    }}\n                >\n                    Delete\n                </Button>\n                <Button onClick={props.set_to_delete}>Cancel</Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import VisibilityIcon from '@mui/icons-material/Visibility';\nimport { Delete } from '@mui/icons-material';\nimport { DataGrid, GridActionsCellItem, GridColumns } from '@mui/x-data-grid';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { open_contract_directory, switch_showing } from '../AppSlice';\nimport { DeleteDialog } from './DeleteDialog';\nimport { selectWorkspace } from './Slice/Reducer';\nimport { Typography } from '@mui/material';\n\nexport function ContractList(props: { idx: number; value: number }) {\n    const dispatch = useDispatch();\n    const [contracts, set_contracts] = React.useState<string[]>([]);\n    const [to_delete, set_to_delete] = React.useState<string | null>(null);\n    const [trigger_now, set_trigger_now] = React.useState(0);\n    const workspace = useSelector(selectWorkspace);\n    React.useEffect(() => {\n        let cancel = false;\n        const update = async () => {\n            if (cancel) return;\n\n            try {\n                const list =\n                    await window.electron.sapio.compiled_contracts.list(\n                        workspace\n                    );\n                set_contracts(list);\n            } catch (err) {\n                console.error(err);\n                set_contracts([]);\n            }\n            setTimeout(update, 5000);\n        };\n\n        update();\n        return () => {\n            cancel = true;\n        };\n    }, [trigger_now, workspace]);\n    const contract_rows = contracts.map((id) => {\n        const [mod, args, time] = id.split('-');\n        return {\n            id,\n            mod,\n            args,\n            time: new Date(parseInt(time!)),\n        };\n    });\n    const delete_contract = (fname: string | number) => {\n        if (typeof fname === 'number') return;\n        set_to_delete(fname);\n    };\n\n    const columns: GridColumns = [\n        {\n            field: 'actions-load',\n            type: 'actions',\n            flex: 0.2,\n            getActions: (params) => [\n                <GridActionsCellItem\n                    key=\"open-folder\"\n                    icon={<VisibilityIcon />}\n                    label=\"Open\"\n                    onClick={() => {\n                        dispatch(switch_showing('ContractViewer'));\n                        dispatch(\n                            open_contract_directory(\n                                typeof params.id === 'number' ? '' : params.id\n                            )\n                        );\n                    }}\n                />,\n            ],\n        },\n        {\n            field: 'time',\n            headerName: 'Time',\n            minWidth: 100,\n            type: 'dateTime',\n            flex: 1,\n        },\n        {\n            field: 'args',\n            headerName: 'Args Hash',\n            width: 100,\n            flex: 1,\n        },\n        {\n            field: 'mod',\n            headerName: 'Module',\n            width: 100,\n            type: 'text',\n            flex: 1,\n        },\n        {\n            field: 'actions-delete',\n            type: 'actions',\n            flex: 0.2,\n            getActions: (params) => [\n                <GridActionsCellItem\n                    key=\"delete\"\n                    icon={<Delete />}\n                    label=\"Delete\"\n                    onClick={() => delete_contract(params.id)}\n                />,\n            ],\n        },\n    ];\n    return (\n        <div hidden={props.idx !== props.value} className=\"ContractList\">\n            <Typography variant=\"h4\">Workspace: {workspace}</Typography>\n            <DeleteDialog\n                set_to_delete={() => set_to_delete(null)}\n                to_delete={to_delete === null ? null : ['contract', to_delete]}\n                reload={() => set_trigger_now(trigger_now + 1)}\n            />\n            {props.idx === props.value && (\n                <div className=\"ContractListInner\">\n                    <div></div>\n                    <div>\n                        <DataGrid\n                            rows={contract_rows}\n                            columns={columns}\n                            disableExtendRowFullWidth={false}\n                            columnBuffer={3}\n                            pageSize={10}\n                            rowsPerPageOptions={[5]}\n                            disableColumnSelector\n                            disableSelectionOnClick\n                        />\n                    </div>\n                    <div></div>\n                </div>\n            )}\n        </div>\n    );\n}\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n} from '@mui/material';\nimport React from 'react';\nimport { BitcoinNodeManager } from '../Data/BitcoinNode';\n\nexport function WalletSendDialog(props: {\n    show: boolean;\n    amt: number;\n    to: string;\n    close: () => void;\n    bitcoin_node_manager: BitcoinNodeManager;\n}) {\n    return (\n        <Dialog\n            open={props.show}\n            onClose={() => {\n                props.close();\n            }}\n        >\n            <DialogTitle>Confirm Spend</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Confirm sending\n                    {props.amt} BTC to {props.to}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick={() => {\n                        props.close();\n                    }}\n                >\n                    Cancel\n                </Button>\n                <Button\n                    onClick={async () => {\n                        await props.bitcoin_node_manager.send_to_address(\n                            props.amt,\n                            props.to\n                        );\n                        props.close();\n                    }}\n                >\n                    Confirm\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import { Typography } from '@mui/material';\nimport React from 'react';\nimport { BitcoinNodeManager } from '../Data/BitcoinNode';\n\nexport function AvailableBalance(props: {\n    bitcoin_node_manager: BitcoinNodeManager;\n}) {\n    const [amount, setAmount] = React.useState(0);\n    React.useEffect(() => {\n        let cancel = false;\n        const update = async () => {\n            if (cancel) return;\n            try {\n                const amt = await props.bitcoin_node_manager.check_balance();\n                setAmount(amt);\n            } catch (err: any) {\n                console.error(err);\n                setAmount(0);\n            }\n            setTimeout(update, 5000);\n        };\n\n        update();\n        return () => {\n            cancel = true;\n        };\n    }, []);\n    return <Typography>Amount: {amount}</Typography>;\n}\n","import { Button, TextField, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React from 'react';\nimport { BitcoinNodeManager } from '../Data/BitcoinNode';\nimport { AvailableBalance } from './AvailableBalance';\n\nexport function WalletSendForm(props: {\n    bitcoin_node_manager: BitcoinNodeManager;\n    set_params: (a: number, b: string) => void;\n}) {\n    const [address, setAddress] = React.useState<string | null>(null);\n\n    const get_address = async () => {\n        try {\n            const address = await props.bitcoin_node_manager.get_new_address();\n            setAddress(address);\n        } catch (err) {\n            // console.error(err);\n            setAddress(null);\n        }\n    };\n    const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (\n        event\n    ) => {\n        event.preventDefault();\n        const amt = event.currentTarget.amount.value;\n        const to = event.currentTarget.address.value;\n        props.set_params(amt, to);\n        event.currentTarget.reset();\n    };\n\n    return (\n        <div className=\"WalletSpendInner\">\n            <div></div>\n            <div>\n                <AvailableBalance\n                    bitcoin_node_manager={props.bitcoin_node_manager}\n                />\n                <Typography>{address && `New Address: ${address}`}</Typography>\n                <Button onClick={() => get_address()}>Get Address</Button>\n                <Box\n                    component=\"form\"\n                    noValidate\n                    autoComplete=\"off\"\n                    onSubmit={handleSubmit}\n                >\n                    <TextField\n                        label=\"Address\"\n                        name=\"address\"\n                        type=\"text\"\n                        required={true}\n                        size=\"small\"\n                    />\n                    <TextField\n                        label=\"Amount\"\n                        name=\"amount\"\n                        type=\"number\"\n                        required={true}\n                        size=\"small\"\n                    />\n                    <Button type=\"submit\">Send</Button>\n                </Box>\n            </div>\n            <div></div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { BitcoinNodeManager } from '../Data/BitcoinNode';\nimport { WalletSendDialog } from './WalletSendDialog';\nimport { WalletSendForm } from './WalletSendForm';\n\nexport function WalletSend(props: {\n    bitcoin_node_manager: BitcoinNodeManager;\n    value: number;\n    idx: number;\n}) {\n    const [params, set_params] = React.useState({ amt: -1, to: '' });\n    return (\n        <div className=\"WalletSpendOuter\" hidden={props.idx !== props.value}>\n            <WalletSendDialog\n                amt={params.amt}\n                to={params.to}\n                show={params.amt >= 0 && params.to.length > 0}\n                close={() => set_params({ amt: -1, to: '' })}\n                bitcoin_node_manager={props.bitcoin_node_manager}\n            ></WalletSendDialog>\n            {props.idx === props.value && (\n                <WalletSendForm\n                    bitcoin_node_manager={props.bitcoin_node_manager}\n                    set_params={(a, b) => set_params({ amt: a, to: b })}\n                ></WalletSendForm>\n            )}\n        </div>\n    );\n}\n","import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport React from 'react';\nimport { BitcoinNodeManager } from '../Data/BitcoinNode';\n\ntype TxInfo = {\n    involvesWatchonly: boolean; // (boolean) Only returns true if imported addresses were involved in transaction.\n    address: string; // (string) The bitcoin address of the transaction.\n    category: 'send' | 'receive' | 'generate' | 'immature' | 'orphan'; // (string) The transaction category.\n\n    // \"send\"                  Transactions sent.\n    // \"receive\"               Non-coinbase transactions received.\n    // \"generate\"              Coinbase transactions received with more than 100 confirmations.\n    // \"immature\"              Coinbase transactions received with 100 or fewer confirmations.\n    // \"orphan\"                Orphaned coinbase transactions received.\n    amount: number; // (numeric) The amount in BTC. This is negative for the 'send' category, and is positive\n\n    // for all other categories\n    label: string; // (string) A comment for the address/transaction, if any\n    vout: number; // (numeric) the vout value\n    fee: number; // (numeric) The amount of the fee in BTC. This is negative and only available for the\n\n    // 'send' category of transactions.\n    confirmations: number; // (numeric) The number of confirmations for the transaction. Negative confirmations means the\n\n    // transaction conflicted that many blocks ago.\n    generated: boolean; // (boolean) Only present if transaction only input is a coinbase one.\n    trusted: boolean; // (boolean) Only present if we consider transaction to be trusted and so safe to spend from.\n    blockhash: string; // (string) The block hash containing the transaction.\n    blockheight: number; // (numeric) The block height containing the transaction.\n    blockindex: number; // (numeric) The index of the transaction in the block that includes it.\n    blocktime: number; // (numeric) The block time expressed in UNIX epoch time.\n    txid: string; // (string) The transaction id.\n    id: string;\n    walletconflicts: string[]; // (json array) Conflicting transaction ids.\n\n    // (string) The transaction id.\n    time: number; // (numeric) The transaction time expressed in UNIX epoch time.\n    timereceived: number; // (numeric) The time received expressed in UNIX epoch time.\n    comment: string; // (string) If a comment is associated with the transaction, only present if not empty.\n    'bip125-replaceable': string; // (string) (\"yes|no|unknown\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\n\n    // may be unknown for unconfirmed transactions not in the mempool\n    abandoned: boolean; // (boolean) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the\n};\nexport function WalletHistory(props: {\n    bitcoin_node_manager: BitcoinNodeManager;\n    value: number;\n    idx: number;\n}) {\n    const [transactions, setTransactions] = React.useState<TxInfo[]>([]);\n    React.useEffect(() => {\n        let cancel = false;\n        const update = async () => {\n            if (cancel) return;\n\n            try {\n                const txns = await props.bitcoin_node_manager.list_transactions(\n                    10\n                );\n                setTransactions(txns);\n            } catch (err) {\n                console.error(err);\n                setTransactions([]);\n            }\n            setTimeout(update, 5000);\n        };\n\n        update();\n        return () => {\n            cancel = true;\n        };\n    }, []);\n\n    const columns: GridColDef[] = [\n        { field: 'amount', headerName: 'Amount', width: 130, type: 'number' },\n        { field: 'category', headerName: 'Category', width: 130 },\n        { field: 'txid', headerName: 'TXID', width: 130 },\n        {\n            field: 'blockheight',\n            headerName: 'Height',\n            width: 130,\n            type: 'number',\n        },\n        {\n            field: 'time',\n            headerName: 'Time',\n            width: 130,\n            type: 'number',\n            valueGetter: (params: GridValueGetterParams) => {\n                const d: number = params.row.blocktime;\n                return d ? new Date(d * 1000).toUTCString() : 'None';\n            },\n        },\n    ];\n\n    (transactions ?? []).forEach((v) => {\n        v['id'] = v.txid;\n    });\n    return (\n        <div\n            className=\"WalletTransactionList\"\n            hidden={props.idx !== props.value}\n        >\n            {props.idx === props.value && (\n                <div className=\"WalletTransactionListInner\">\n                    <div></div>\n                    <div>\n                        <DataGrid\n                            rows={transactions}\n                            columns={columns}\n                            pageSize={10}\n                            rowsPerPageOptions={[5]}\n                            disableColumnSelector\n                            disableSelectionOnClick\n                        />\n                    </div>\n                    <div></div>\n                </div>\n            )}\n        </div>\n    );\n}\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField,\n} from '@mui/material';\nimport React from 'react';\n\nexport function NewWorkspace(props: {\n    show: boolean;\n    hide: () => void;\n    reload: () => void;\n}) {\n    const [value, set_value] = React.useState<null | string>(null);\n    return (\n        <Dialog onClose={props.hide} open={props.show}>\n            <DialogTitle>Create a new Workspace</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    What should the workspace be called?\n                </DialogContentText>\n                <TextField\n                    onChange={(ev) => set_value(ev.currentTarget.value)}\n                    value={value}\n                    autoFocus\n                    margin=\"dense\"\n                    label=\"Name\"\n                    name=\"name\"\n                    type=\"text\"\n                    fullWidth\n                    variant=\"standard\"\n                />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.hide}>Cancel</Button>\n                <Button\n                    color=\"success\"\n                    onClick={async (ev) => {\n                        if (value !== null) {\n                            await window.electron.sapio.workspaces.init(value);\n                            props.reload();\n                        }\n                        props.hide();\n                    }}\n                >\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import { Add, Delete, FolderOpen } from '@mui/icons-material';\nimport { Button } from '@mui/material';\nimport {\n    DataGrid,\n    GridActionsCellItem,\n    GridColumns,\n    GridToolbarContainer,\n} from '@mui/x-data-grid';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { DeleteDialog } from './DeleteDialog';\nimport { NewWorkspace } from './NewWorkspace';\nimport { switch_wallet_tab, switch_workspace } from './Slice/Reducer';\n\nexport function Workspaces(props: { idx: number; value: number }) {\n    const dispatch = useDispatch();\n    const [workspaces, set_workspaces] = React.useState<string[]>([]);\n    const [to_delete, set_to_delete] = React.useState<string | null>(null);\n    const [trigger_now, set_trigger_now] = React.useState(0);\n    const [show_new_workspace, set_new_workspace] = React.useState(false);\n    const hide_new_workspace = () => {\n        set_new_workspace(false);\n    };\n    const reload = () => {\n        set_trigger_now(trigger_now + 1);\n    };\n    React.useEffect(() => {\n        let cancel = false;\n        const update = async () => {\n            if (cancel) return;\n\n            try {\n                const list = await window.electron.sapio.workspaces.list();\n                set_workspaces(list);\n            } catch (err) {\n                console.error(err);\n                set_workspaces([]);\n            }\n            setTimeout(update, 5000);\n        };\n\n        update();\n        return () => {\n            cancel = true;\n        };\n    }, [trigger_now]);\n    const contract_rows = workspaces.map((id) => {\n        return {\n            id,\n            name: id,\n        };\n    });\n    const delete_workspace = (fname: string | number) => {\n        if (typeof fname === 'number') return;\n        set_to_delete(fname);\n    };\n\n    const columns: GridColumns = [\n        {\n            field: 'actions-load',\n            type: 'actions',\n            flex: 0.2,\n            getActions: (params) => [\n                <GridActionsCellItem\n                    key=\"open-folder\"\n                    icon={<FolderOpen />}\n                    label=\"Open\"\n                    onClick={() => {\n                        // TODO: Better tabbing?\n                        dispatch(switch_wallet_tab(3));\n                        typeof params.id === 'string' &&\n                            dispatch(switch_workspace(params.id));\n                    }}\n                />,\n            ],\n        },\n        {\n            field: 'name',\n            headerName: 'Name',\n            width: 100,\n            type: 'text',\n            flex: 1,\n        },\n        {\n            field: 'actions-delete',\n            type: 'actions',\n            flex: 0.2,\n            getActions: (params) => [\n                <GridActionsCellItem\n                    key=\"delete\"\n                    icon={<Delete />}\n                    label=\"Delete\"\n                    onClick={() => delete_workspace(params.id)}\n                />,\n            ],\n        },\n    ];\n    function CustomToolbar() {\n        return (\n            <GridToolbarContainer>\n                <Button onClick={() => set_new_workspace(true)}>\n                    New Workspace<Add></Add>\n                </Button>\n            </GridToolbarContainer>\n        );\n    }\n    return (\n        <div hidden={props.idx !== props.value} className=\"WorkspaceList\">\n            <NewWorkspace\n                show={show_new_workspace}\n                hide={hide_new_workspace}\n                reload={reload}\n            />\n            <DeleteDialog\n                set_to_delete={() => set_to_delete(null)}\n                to_delete={to_delete !== null ? ['workspace', to_delete] : null}\n                reload={reload}\n            />\n            {props.idx === props.value && (\n                <div className=\"WorkspaceListInner\">\n                    <div></div>\n                    <div>\n                        <DataGrid\n                            components={{\n                                Toolbar: CustomToolbar,\n                            }}\n                            rows={contract_rows}\n                            columns={columns}\n                            disableExtendRowFullWidth={false}\n                            columnBuffer={3}\n                            pageSize={10}\n                            rowsPerPageOptions={[5]}\n                            disableColumnSelector\n                            disableSelectionOnClick\n                        />\n                    </div>\n                    <div></div>\n                </div>\n            )}\n        </div>\n    );\n}\n","import { Tab, Tabs } from '@mui/material';\nimport { Box } from '@mui/system';\nimport React from 'react';\nimport { BitcoinNodeManager } from '../Data/BitcoinNode';\nimport './Wallet.css';\nimport { ContractList } from './ContractList';\nimport { WalletSend } from './WalletSend';\nimport { WalletHistory } from './WalletHistory';\nimport { Workspaces } from './Workspaces';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    selectWalletTab,\n    switch_wallet_tab,\n    TabIndexes,\n} from './Slice/Reducer';\n\nexport function Wallet(props: { bitcoin_node_manager: BitcoinNodeManager }) {\n    const dispatch = useDispatch();\n    const idx = useSelector(selectWalletTab);\n    const handleChange = (_: any, idx: TabIndexes) => {\n        dispatch(switch_wallet_tab(idx));\n    };\n    return (\n        <div className=\"Wallet\">\n            <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                <Tabs\n                    value={idx}\n                    onChange={handleChange}\n                    aria-label=\"basic tabs example\"\n                >\n                    <Tab label=\"Send\"></Tab>\n                    <Tab label=\"Send History\"></Tab>\n                    <Tab label=\"Workspaces\"></Tab>\n                    <Tab label=\"Contracts\"></Tab>\n                </Tabs>\n            </Box>\n            <Box sx={{ overflowY: 'scroll', height: '100%' }}>\n                <WalletSend value={0} idx={idx} {...props}></WalletSend>\n                <WalletHistory value={1} idx={idx} {...props}></WalletHistory>\n                <Workspaces value={2} idx={idx}></Workspaces>\n                <ContractList value={3} idx={idx}></ContractList>\n            </Box>\n        </div>\n    );\n}\n","import { Collapse, Paper } from '@mui/material';\nimport { createTheme, ThemeProvider, useTheme } from '@mui/material/styles';\nimport useMediaQuery from '@mui/material/useMediaQuery';\nimport {\n    BaseEntityEvent,\n    BaseModel,\n    BaseModelGenerics,\n    CanvasWidget,\n} from '@projectstorm/react-canvas-core';\nimport createEngine, {\n    DagreEngine,\n    DiagramEngine,\n    DiagramModel,\n} from '@projectstorm/react-diagrams';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport { selectContract, selectShowing, selectStatusBar } from './AppSlice';\nimport { Data } from './common/preload_interface';\nimport { BitcoinNodeManager } from './Data/BitcoinNode';\nimport { BitcoinStatusBar } from './Data/BitcoinStatusBar';\nimport { ContractModel } from './Data/ContractManager';\nimport { ModelManager } from './Data/ModelManager';\nimport { SimulationController } from './Data/Simulation';\nimport { selectSimIsShowing, toggle_showing } from './Data/SimulationSlice';\nimport { TransactionModel } from './Data/Transaction';\nimport { UTXOModel } from './Data/UTXO';\nimport './Glyphs.css';\nimport { poll_settings } from './Settings/SettingsSlice';\nimport { TXIDAndWTXIDMap } from './util';\nimport { AppNavbar } from './UX/AppNavbar';\nimport { Chat } from './UX/Chat/Chat';\nimport { set_continuations } from './UX/ContractCreator/ContractCreatorSlice';\nimport { CreateContractModal } from './UX/ContractCreator/CreateContractModal';\nimport { DemoCanvasWidget } from './UX/Diagram/DemoCanvasWidget';\nimport { SpendLinkFactory } from './UX/Diagram/DiagramComponents/SpendLink/SpendLinkFactory';\nimport { TransactionNodeFactory } from './UX/Diagram/DiagramComponents/TransactionNode/TransactionNodeFactory';\nimport { UTXONodeFactory } from './UX/Diagram/DiagramComponents/UTXONode/UTXONodeFactory';\nimport {\n    EntityType,\n    selectEntityToView,\n    selectShouldViewEntity,\n} from './UX/Entity/EntitySlice';\nimport { CurrentlyViewedEntity } from './UX/Entity/EntityViewer';\nimport { MiniscriptCompiler } from './UX/Miniscript/Compiler';\nimport { Modals } from './UX/Modals';\nimport { Settings } from './UX/Settings/Settings';\nimport { Wallet } from './Wallet/Wallet';\nexport type SelectedEvent = BaseEntityEvent<BaseModel<BaseModelGenerics>> & {\n    isSelected: boolean;\n};\n\nfunction jump_to_entity(\n    model: DiagramModel,\n    engine: DiagramEngine,\n    entity: TransactionModel | UTXOModel | null\n) {\n    if (entity === null) return;\n    const canvas = engine.getCanvas();\n    // Bug, sometimes no fields\n    if (canvas === undefined) {\n        return;\n    }\n    model.setZoomLevel(100);\n    const { clientHeight, clientWidth } = canvas;\n    const { left, top } = canvas.getBoundingClientRect();\n    let { x, y } = entity.getPosition();\n    x += entity.width / 2;\n    y += entity.height;\n    const zoomf = model.getZoomLevel() / 100;\n    const x_coord = (left + clientWidth / 3 - x) * zoomf;\n    const y_coord = (top + clientHeight / 2 - y) * zoomf;\n    model.setOffset(x_coord, y_coord);\n}\n\nconst dag = new DagreEngine({\n    graph: {\n        rankdir: 'TB',\n        align: 'DL',\n        ranker: 'tight-tree',\n        marginx: 25,\n        marginy: 25,\n    },\n    includeLinks: false,\n});\nfunction App() {\n    const dispatch = useDispatch();\n    const contract = React.useRef<[ContractModel, number] | null>(null);\n    const engine: DiagramEngine = createEngine();\n    const model = React.useRef(new DiagramModel());\n\n    // TODO: This should go somewhere else :(\n    //React.useEffect(() => {\n    //    return window.electron.register_callback('load_contract', (data: string) => {\n    //        dispatch(load_new_model(JSON.parse(data)));\n    //    });\n    //});\n    React.useEffect(() => {\n        setTimeout(() => {\n            poll_settings(dispatch);\n        }, 10);\n    });\n\n    engine.getNodeFactories().registerFactory(new UTXONodeFactory() as any);\n    engine\n        .getNodeFactories()\n        .registerFactory(new TransactionNodeFactory() as any);\n    engine.getLinkFactories().registerFactory(new SpendLinkFactory() as any);\n    // model is the system of nodes\n    model.current.setGridSize(1);\n    model.current.setLocked(true);\n    const model_manager = React.useRef(new ModelManager(model.current));\n    engine.setModel(model.current);\n    const load_new_contract = (\n        data: Data | null,\n        counter: number,\n        trigger_relayout: () => void\n    ) => {\n        if (contract.current !== null) {\n            if (contract.current[1] === counter) {\n                return contract.current[0];\n            }\n        }\n        const new_contract = new ContractModel(data ?? { program: {} });\n        if (contract.current) model_manager.current.unload(contract.current[0]);\n        contract.current = [new_contract, counter];\n        model_manager.current.load(new_contract);\n        dispatch(set_continuations(new_contract.continuations));\n        trigger_relayout();\n        return new_contract;\n    };\n    return (\n        <AppInner\n            engine={engine}\n            model={model.current}\n            load_new_contract={load_new_contract}\n        ></AppInner>\n    );\n}\nfunction AppInner(props: {\n    engine: DiagramEngine;\n    model: DiagramModel;\n    load_new_contract: (\n        data: Data | null,\n        counter: number,\n        trigger_relayout: () => void\n    ) => ContractModel;\n}) {\n    const bitcoin_node_bar = useSelector(selectStatusBar);\n    const { engine, model, load_new_contract } = props;\n\n    // engine is the processor for graphs, we need to load all our custom factories here\n\n    const [contract_data, counter] = useSelector(selectContract);\n    const [read_trigger_relayout, set_trigger_relayout] = React.useState(0);\n    function trigger_relayout() {\n        set_trigger_relayout(read_trigger_relayout + 1);\n    }\n    // keep the same contract model around as long as we can...\n    const current_contract = load_new_contract(\n        contract_data,\n        counter,\n        trigger_relayout\n    );\n\n    const is_showing = useSelector(selectShowing);\n\n    const relayout = () => {\n        dag.redistribute(props.model);\n        engine.repaintCanvas();\n        setTimeout(() => engine.zoomToFit(), 0);\n    };\n    React.useEffect(() => {\n        // TODO: Just check that canvas exists\n        if (is_showing === 'ContractViewer') relayout();\n    }, [read_trigger_relayout]);\n    /* current_contract is the contract loaded into the\n     * backend logic interface */\n    /* state.current_contract is the contract loaded into the\n     * ux\n     * TODO: Can these be unified?\n     */\n    /* Bitcoin Node State */\n    const dest_ref = React.useRef<BitcoinNodeManager | null>(null);\n    const bitcoin_node_manager = React.useMemo(() => {\n        if (dest_ref.current) dest_ref.current.destroy();\n        const n = new BitcoinNodeManager({\n            model: model,\n            current_contract: current_contract,\n        });\n        dest_ref.current = n;\n        return n;\n    }, [current_contract]);\n\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n    const theme = React.useMemo(\n        () =>\n            createTheme({\n                palette: {\n                    mode: prefersDarkMode ? 'dark' : 'light',\n                    primary: {\n                        main: '#90caf9',\n                    },\n                    secondary: {\n                        main: '#9c27b0',\n                    },\n                },\n            }),\n        [prefersDarkMode]\n    );\n    return (\n        <ThemeProvider theme={theme}>\n            <div className=\"App\">\n                <div className=\"App-area\">\n                    <div className=\"area-nav\">\n                        <AppNavbar\n                            relayout={relayout}\n                            bitcoin_node_manager={bitcoin_node_manager}\n                            contract={current_contract}\n                        />\n                    </div>\n                    <div className=\"area-inner\">\n                        <Viewing\n                            bitcoin_node_manager={bitcoin_node_manager}\n                            model={model}\n                            engine={engine}\n                            current_contract={current_contract}\n                        />\n                    </div>\n                </div>\n                <div hidden={!bitcoin_node_bar}>\n                    {bitcoin_node_bar && (\n                        <BitcoinStatusBar\n                            api={bitcoin_node_manager}\n                        ></BitcoinStatusBar>\n                    )}\n                </div>\n            </div>\n            <Modals\n                bitcoin_node_manager={bitcoin_node_manager}\n                contract={current_contract}\n            />\n        </ThemeProvider>\n    );\n}\n\nfunction Viewing(props: {\n    model: DiagramModel;\n    engine: DiagramEngine;\n    current_contract: ContractModel;\n    bitcoin_node_manager: BitcoinNodeManager;\n}) {\n    const is_showing = useSelector(selectShowing);\n    switch (is_showing) {\n        case 'Settings':\n            return (\n                <Paper className=\"settings-container\" square={true}>\n                    <Settings></Settings>\n                </Paper>\n            );\n        case 'Wallet':\n            return (\n                <Paper className=\"wallet-container\" square={true}>\n                    <Wallet\n                        bitcoin_node_manager={props.bitcoin_node_manager}\n                    ></Wallet>\n                </Paper>\n            );\n        case 'ContractCreator':\n            return <CreateContractModal />;\n        case 'ContractViewer':\n            return <ContractViewer {...props} />;\n        case 'MiniscriptCompiler':\n            return (\n                <Paper className=\"miniscript-container\" square={true}>\n                    <MiniscriptCompiler></MiniscriptCompiler>\n                </Paper>\n            );\n        case 'Chat':\n            return (\n                <Paper className=\"chat-container\" square={true}>\n                    <Chat></Chat>\n                </Paper>\n            );\n    }\n}\nfunction ContractViewer(props: {\n    model: DiagramModel;\n    engine: DiagramEngine;\n    current_contract: ContractModel;\n}) {\n    const dispatch = useDispatch();\n    const entity_id: EntityType = useSelector(selectEntityToView);\n    const show = useSelector(selectShouldViewEntity);\n    const theme = useTheme();\n    const timing_simulator_enabled = useSelector(selectSimIsShowing);\n    const details = entity_id[0] !== 'NULL' && show;\n    const { model, engine, current_contract } = props;\n    React.useEffect(() => {\n        if (entity_id[0] === 'TXN')\n            jump_to_entity(\n                model,\n                engine,\n                TXIDAndWTXIDMap.get_by_txid_s(\n                    current_contract.txid_map,\n                    entity_id[1]\n                ) ?? null\n            );\n        else if (entity_id[0] === 'UTXO')\n            jump_to_entity(\n                model,\n                engine,\n                TXIDAndWTXIDMap.get_by_txid_s(\n                    current_contract.txid_map,\n                    entity_id[1].hash\n                )?.utxo_models[entity_id[1].nIn] ?? null\n            );\n    }, [entity_id]);\n\n    return (\n        <>\n            <div className=\"main-container\">\n                <DemoCanvasWidget\n                    engine={engine}\n                    model={model}\n                    background={theme.palette.background.paper}\n                    color={theme.palette.divider}\n                >\n                    <CanvasWidget engine={engine as any} key={'main'} />\n                </DemoCanvasWidget>\n            </div>\n            <Collapse in={details}>\n                <CurrentlyViewedEntity current_contract={current_contract} />\n            </Collapse>\n            <div className=\"area-overlays\">\n                <Collapse in={timing_simulator_enabled}>\n                    <SimulationController\n                        contract={current_contract}\n                        engine={engine}\n                        hide={() => dispatch(toggle_showing())}\n                    />\n                </Collapse>\n            </div>\n        </>\n    );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './Store/store';\n\nconst root = document.getElementById('root');\nReactDOM.render(\n    <Provider store={store}>\n        <App></App>\n    </Provider>,\n    root\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../Store/store';\n\nexport type TabIndexes = 0 | 1 | 2 | 3 | 4;\ntype StateType = {\n    showing: TabIndexes;\n    workspace: string;\n};\nfunction default_state(): StateType {\n    return {\n        showing: 0,\n        workspace: 'default',\n    };\n}\n\nexport const walletSlice = createSlice({\n    name: 'Wallet',\n    initialState: default_state(),\n    reducers: {\n        switch_wallet_tab: (state, action: PayloadAction<TabIndexes>) => {\n            state.showing = action.payload;\n        },\n        switch_workspace: (state, action: PayloadAction<string>) => {\n            state.workspace = action.payload;\n        },\n    },\n});\n\nexport const { switch_wallet_tab, switch_workspace } = walletSlice.actions;\n\nexport const selectWalletTab = (r: RootState) => {\n    return r.walletReducer.showing;\n};\n\nexport const selectWorkspace = (r: RootState) => {\n    return r.walletReducer.workspace;\n};\nexport const walletReducer = walletSlice.reducer;\n","import {\n    DiagramModel,\n    LinkModel,\n    NodeModel,\n} from '@projectstorm/react-diagrams';\nimport * as Bitcoin from 'bitcoinjs-lib';\nimport { OutputLinkModel } from '../UX/Diagram/DiagramComponents/OutputLink';\nimport { SpendLinkModel } from '../UX/Diagram/DiagramComponents/SpendLink/SpendLinkModel';\nimport { TransactionNodeModel } from '../UX/Diagram/DiagramComponents/TransactionNode/TransactionNodeModel';\nimport { HasKeys, TXID } from '../util';\nimport { NodeColorT, SigningDataStore, NodeColor } from './ContractManager';\nimport './Transaction.css';\nimport { new_utxo_inner_data, UTXOModel } from './UTXO';\nimport { select_txn } from '../UX/Entity/EntitySlice';\nimport { store } from '../Store/store';\nimport { TransactionData, UTXOFormatData } from '../common/preload_interface';\nimport _ from 'lodash';\n\nexport class TransactionModel extends TransactionNodeModel implements HasKeys {\n    tx: Bitcoin.Transaction;\n    witness_set: SigningDataStore;\n    utxo_models: Array<UTXOModel>;\n    public utxo_links: Array<OutputLinkModel>;\n    public input_links: Array<SpendLinkModel>;\n    constructor(\n        tx: Bitcoin.Transaction,\n        all_witnesses: SigningDataStore,\n        name: string,\n        color: NodeColorT,\n        utxo_labels: Array<UTXOFormatData | null>\n    ) {\n        super({}, tx.getId().substr(0, 16), name, NodeColor.get(color), tx);\n        this.tx = tx;\n        this.utxo_models = [];\n        this.utxo_links = [];\n        this.input_links = [];\n        this.witness_set = all_witnesses;\n        for (let y = 0; y < this.tx.outs.length; ++y) {\n            const subcolor = NodeColor.clone(color);\n            const metadata: UTXOFormatData = _.merge(\n                {\n                    color: NodeColor.get(subcolor),\n                    label: name,\n                },\n                utxo_labels[y]\n            );\n            // TODO: Get rid of assertion\n            const out: Bitcoin.TxOutput = tx.outs[y] as Bitcoin.TxOutput;\n            const utxo = new UTXOModel(\n                new_utxo_inner_data(out.script, out.value, tx, y),\n                metadata,\n                this\n            );\n            this.utxo_models.push(utxo);\n            this.utxo_links.push(\n                this.addOutPort('out' + y, true).create_link(\n                    utxo.addInPort('create'),\n                    this,\n                    undefined\n                )\n            );\n        }\n        this.registerListener({\n            selectionChanged: (event: any): void => {\n                if (event.isSelected) store.dispatch(select_txn(tx.getId()));\n            },\n        });\n    }\n\n    get_json(): TransactionData {\n        return {\n            psbt: this.witness_set.psbts[0]!.toBase64(),\n            hex: this.tx.toHex(),\n            metadata: {\n                label: this.getOptions().name,\n                color: this.getOptions().color,\n            },\n            output_metadata: this.utxo_models.map((u) => {\n                return {\n                    color: u.getOptions().color,\n                    label: u.getOptions().name,\n                    simp: {},\n                };\n            }),\n        };\n    }\n\n    get_txid(): TXID {\n        return this.tx.getId();\n    }\n    remove_from_model(model: DiagramModel) {\n        if (!(this instanceof PhantomTransactionModel)) {\n            // TODO: is this a valid cast\n            model.removeNode(this as unknown as NodeModel);\n            this.utxo_links.map((x) =>\n                model.removeLink(x as unknown as LinkModel)\n            );\n        }\n        this.utxo_models.map((x) => model.removeNode(x));\n        this.input_links.map((x) =>\n            model.removeLink(x as unknown as LinkModel)\n        );\n    }\n}\n\nexport class PhantomTransactionModel extends TransactionModel {\n    override_txid: TXID;\n    constructor(\n        override_txid: TXID,\n        tx: Bitcoin.Transaction,\n        all_witnesses: SigningDataStore,\n        name: string,\n        color: NodeColorT,\n        utxo_labels: Array<UTXOFormatData | null>\n    ) {\n        super(tx, all_witnesses, name, color, utxo_labels);\n        this.override_txid = override_txid;\n    }\n    get_txid(): TXID {\n        return this.override_txid;\n    }\n}\n","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport entityReducer from '../UX/Entity/EntitySlice';\nimport appReducer from '../AppSlice';\nimport { dataReducer } from '../Data/DataSlice';\nimport modalReducer from '../UX/ModalSlice';\nimport { settingsReducer } from '../Settings/SettingsSlice';\nimport { contractCreatorReducer } from '../UX/ContractCreator/ContractCreatorSlice';\nimport { simulationReducer } from '../Data/SimulationSlice';\nimport { walletReducer } from '../Wallet/Slice/Reducer';\n\nexport const store = configureStore({\n    reducer: {\n        entityReducer,\n        appReducer,\n        contractCreatorReducer,\n        simulationReducer,\n        settingsReducer,\n        modalReducer,\n        dataReducer,\n        walletReducer,\n    },\n    middleware: [thunk],\n    devTools: true,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n    ReturnType,\n    RootState,\n    unknown,\n    Action<string>\n>;\n","import {\n    DefaultPortModel,\n    DefaultPortModelOptions,\n    PortModel,\n} from '@projectstorm/react-diagrams';\nimport { SpendLinkModel } from './SpendLinkModel';\nimport { TransactionModel } from '../../../../Data/Transaction';\n\nexport class SpendPortModel extends DefaultPortModel {\n    constructor(options: DefaultPortModelOptions) {\n        super({\n            ...options,\n        });\n    }\n    createLinkModel(factory: any): SpendLinkModel {\n        return new SpendLinkModel();\n    }\n    spend_link(x: SpendPortModel, to: TransactionModel, factory: any) {\n        const link = this.createLinkModel(factory);\n        // TODO: fix?\n        link.setSourcePort(this as unknown as PortModel);\n        link.setTargetPort(x as unknown as PortModel);\n        link.linked_to = to;\n        return link;\n    }\n}\n","import * as Bitcoin from 'bitcoinjs-lib';\nimport { Output } from 'bitcoinjs-lib/types/transaction';\nimport * as assert from 'assert';\nimport _, { Collection } from 'lodash';\nimport {\n    InputMapT,\n    InputMap,\n    TXID,\n    TXIDAndWTXIDMapT,\n    txid_buf_to_string,\n    TXIDAndWTXIDMap,\n} from '../util';\nimport { PhantomTransactionModel, TransactionModel } from './Transaction';\nimport { UTXOModel } from './UTXO';\nimport Color from 'color';\nimport {\n    Continuation,\n    ContinuationTable,\n    Data,\n    UTXOFormatData,\n} from '../common/preload_interface';\nexport type NodeColorT = ['NodeColor', string];\nexport const NodeColor = {\n    new(c: string): NodeColorT {\n        return ['NodeColor', c];\n    },\n    get(c: NodeColorT): string {\n        return c[1];\n    },\n    clone(c: NodeColorT) {\n        return NodeColor.new(c[1].slice());\n    },\n};\n\ntype PreProcessedData = {\n    psbts: Array<Bitcoin.Psbt>;\n    txns: Array<Bitcoin.Transaction>;\n    txn_colors: Array<NodeColorT>;\n    txn_labels: Array<string>;\n    utxo_labels: Array<Array<UTXOFormatData | null>>;\n    continuations: ContinuationTable;\n};\ntype ProcessedData = {\n    inputs_map: InputMapT<TransactionModel>;\n    txid_map: TXIDAndWTXIDMapT<TransactionModel>;\n    txn_models: Array<TransactionModel>;\n    utxo_models: Array<UTXOModel>;\n    continuations: ContinuationTable;\n};\n\nfunction preprocess_data(data: Data): PreProcessedData {\n    const psbts = [];\n    const txns = [];\n    const txn_labels = [];\n    const txn_colors = [];\n    const utxo_labels = [];\n    const continuations: Record<string, Record<string, Continuation>> = {};\n    for (const [path, entry] of Object.entries(data.program)) {\n        let txid: null | TXID = null;\n        let idx = 0;\n        for (const [j, tx] of entry.txs.entries()) {\n            psbts.push(Bitcoin.Psbt.fromBase64(tx.linked_psbt.psbt));\n            const txn = Bitcoin.Transaction.fromHex(tx.linked_psbt.hex);\n            if (txid === null) {\n                txid = txid_buf_to_string(txn.ins[0]!.hash);\n                idx = txn.ins[0]!.index;\n            } else {\n                const c_txid = txid_buf_to_string(txn.ins[0]!.hash);\n                const c_idx = txn.ins[0]!.index;\n                if (c_txid !== txid || c_idx !== idx) {\n                    throw 'Sapio Invariant Error: All txs in a group should spend the same coin';\n                }\n            }\n\n            txns.push(txn);\n            txn_labels.push(tx.linked_psbt.metadata.label ?? 'unlabeled');\n            txn_colors.push(\n                NodeColor.new(tx.linked_psbt.metadata.color ?? 'orange')\n            );\n            utxo_labels.push(\n                tx.linked_psbt.output_metadata ?? new Array(txn.outs.length)\n            );\n        }\n        const k = `${txid}:${idx}`;\n        continuations[k] = entry.continue_apis;\n    }\n\n    return {\n        psbts,\n        txns,\n        txn_colors,\n        txn_labels,\n        utxo_labels,\n        continuations,\n    };\n}\n\nfunction process_inputs_map(\n    txns: Array<TransactionModel>\n): InputMapT<TransactionModel> {\n    const inputs_map: InputMapT<TransactionModel> = InputMap.new();\n    for (const txn_m of txns) {\n        const txn: Bitcoin.Transaction = txn_m.tx;\n        for (const inp of txn.ins) {\n            InputMap.add(inputs_map, inp, txn_m);\n        }\n    }\n    return inputs_map;\n}\n\nexport type SigningDataStore = {\n    witnesses: Buffer[][][];\n    psbts: Bitcoin.Psbt[];\n};\nfunction process_txn_models(\n    psbts: Array<Bitcoin.Psbt>,\n    txns: Array<Bitcoin.Transaction>,\n    txn_labels: Array<string>,\n    txn_colors: Array<NodeColorT>,\n    utxo_labels: Array<Array<UTXOFormatData | null>>\n): [TXIDAndWTXIDMapT<TransactionModel>, Array<TransactionModel>] {\n    const txid_map: TXIDAndWTXIDMapT<TransactionModel> = TXIDAndWTXIDMap.new();\n    const txn_models: Array<TransactionModel> = [];\n    assert.equal(txns.length, psbts.length);\n    assert.equal(txns.length, txn_labels.length);\n    assert.equal(txns.length, txn_colors.length);\n    assert.equal(txns.length, utxo_labels.length);\n    _.chain(_.zip(txns, psbts, txn_labels, txn_colors, utxo_labels))\n        .map(([tx, psbt, txn_label, txn_color, utxo_labels], index) => {\n            return {\n                tx: tx!,\n                psbt: psbt!,\n                txn_label: txn_label!,\n                txn_color: txn_color!,\n                utxo_labels: utxo_labels!,\n            };\n        })\n        .groupBy(({ tx }: { tx: Bitcoin.Transaction }) => tx.getId())\n        .forEach(\n            (\n                txn_group: {\n                    tx: Bitcoin.Transaction;\n                    psbt: Bitcoin.Psbt;\n                    txn_label: string;\n                    txn_color: NodeColorT;\n                    utxo_labels: (UTXOFormatData | null)[];\n                }[]\n            ) => {\n                let label = '';\n                let color = NodeColor.new('');\n                let utxo_label: Array<UTXOFormatData | null> = [];\n                const all_witnesses: SigningDataStore = {\n                    witnesses: [],\n                    psbts: [],\n                };\n                for (const {\n                    tx,\n                    psbt,\n                    txn_label,\n                    txn_color,\n                    utxo_labels,\n                } of txn_group) {\n                    utxo_label = utxo_labels;\n                    color = txn_color;\n                    label = txn_label;\n                    const witnesses: Buffer[][] = [];\n                    for (const input of tx.ins) {\n                        witnesses.push(input.witness);\n                    }\n\n                    all_witnesses.witnesses.push(witnesses);\n                    all_witnesses.psbts.push(psbt);\n                }\n                assert.ok(txn_group.length > 0); // because group call must be true\n                const base_txn: Bitcoin.Transaction = txn_group[0]!.tx.clone();\n                // Clear out witness Data\n                for (const input of base_txn.ins) {\n                    input.witness = [];\n                }\n                const txn_model = new TransactionModel(\n                    base_txn,\n                    all_witnesses,\n                    label,\n                    color,\n                    utxo_label\n                );\n                TXIDAndWTXIDMap.add(txid_map, txn_model);\n                txn_models.push(txn_model);\n            }\n        )\n        .value();\n    const to_create: Map<TXID, Array<Bitcoin.TxInput>> = new Map();\n    for (const txn_model of txn_models) {\n        for (const input of txn_model.tx.ins) {\n            const txid = txid_buf_to_string(input.hash);\n            if (TXIDAndWTXIDMap.has_by_txid(txid_map, txid)) {\n                continue;\n            }\n            // Doesn't matter if already exists in array!\n            // De Duplicated later...\n            const inps = to_create.get(txid) || [];\n            inps.push(input);\n            to_create.set(txid, inps);\n        }\n    }\n    to_create.forEach((inps, txid) => {\n        const mock_txn = new Bitcoin.Transaction();\n        const n_outputs: number =\n            1 +\n            _.chain(inps)\n                .map((el) => el.index)\n                .max()\n                .value();\n        for (let i = 0; i < n_outputs; ++i) {\n            // Set to MAX sats...\n            // TODO: a hack to make the flow technically correct and detectable\n            mock_txn.addOutput(Buffer.from(''), 21e6 * 100e6);\n        }\n        const c = Color(\n            [Math.random() * 255, Math.random() * 255, Math.random() * 255],\n            'rgb'\n        ).toString();\n        const color = NodeColor.new(c);\n        const utxo_metadata: Array<UTXOFormatData | null> = new Array(\n            n_outputs\n        );\n        utxo_metadata.fill(null);\n        const txn_model = new PhantomTransactionModel(\n            txid,\n            mock_txn,\n            { witnesses: [], psbts: [] },\n            'Unknown Inputs',\n            color,\n            utxo_metadata\n        );\n        TXIDAndWTXIDMap.add(txid_map, txn_model);\n        txn_models.push(txn_model);\n    });\n\n    return [txid_map, txn_models];\n}\nfunction process_utxo_models(\n    txn_models: Array<TransactionModel>,\n    inputs_map: InputMapT<TransactionModel>\n): Array<UTXOModel> {\n    const to_add: Array<UTXOModel> = [];\n    for (const m_txn of txn_models) {\n        assert.equal(m_txn.utxo_models.length, m_txn.tx.outs.length);\n        if (!(m_txn instanceof PhantomTransactionModel))\n            to_add.push(...m_txn.utxo_models);\n        _.zip(m_txn.utxo_models, m_txn.tx.outs).forEach(\n            ([opt_utxo_model, opt_out], output_index) => {\n                // safe because of assert\n                const utxo_model = opt_utxo_model!;\n                const out = opt_out!;\n                const spenders: Array<TransactionModel> =\n                    InputMap.get_txid_s(\n                        inputs_map,\n                        m_txn.get_txid(),\n                        output_index\n                    ) ?? [];\n                assert.equal(m_txn, utxo_model.getOptions().txn);\n                if (\n                    m_txn instanceof PhantomTransactionModel &&\n                    spenders.length > 0\n                ) {\n                    to_add.push(utxo_model);\n                    if (spenders[0]?.witness_set.witnesses.length) {\n                        const witstack =\n                            spenders[0]?.witness_set.witnesses[0]?.[\n                                utxo_model.getOptions().utxo.index\n                            ];\n                        if (witstack) {\n                            const program = witstack[witstack.length - 1];\n                            if (program) {\n                                Bitcoin.crypto.sha256(program);\n                                const script = Buffer.alloc(34);\n                                script[0] = 0x0;\n                                script[1] = 0x20;\n                                program.copy(script, 2);\n                                // TODO: Single Input assumption!\n                                out.script = script;\n                                const max_amount = spenders.reduce(\n                                    (m, s) =>\n                                        Math.max(\n                                            s.tx.outs.reduce(\n                                                (a, v) =>\n                                                    a + (v as Output).value ??\n                                                    0,\n                                                0\n                                            ),\n                                            m\n                                        ),\n                                    0\n                                );\n                                (\n                                    utxo_model.getOptions().txn.tx.outs[\n                                        utxo_model.getOptions().utxo.index\n                                    ] as Output\n                                ).value = max_amount;\n                                utxo_model.getOptions().utxo.amount =\n                                    max_amount;\n                                const _address =\n                                    Bitcoin.address.fromOutputScript(\n                                        script,\n                                        Bitcoin.networks.regtest\n                                    );\n                            }\n                        }\n                    }\n                }\n                spenders.forEach((spender, spend_idx) => {\n                    const spender_tx: Bitcoin.Transaction = spender.tx;\n                    const idx = spender_tx.ins.findIndex(\n                        (elt) =>\n                            elt.index === output_index &&\n                            txid_buf_to_string(elt.hash) === m_txn.get_txid()\n                    );\n                    if (idx === -1) {\n                        throw new Error('Missing Spender Error');\n                    }\n                    const link = utxo_model.spent_by(spender, spend_idx, idx);\n                    spender.input_links.push(link);\n                    utxo_model.getOptions().utxo.spends.push(spender);\n                });\n            }\n        );\n    }\n    return to_add;\n}\nfunction process_data(obj: PreProcessedData): ProcessedData {\n    const { psbts, txns, txn_colors, txn_labels, utxo_labels, continuations } =\n        obj;\n    const [txid_map, txn_models] = process_txn_models(\n        psbts,\n        txns,\n        txn_labels,\n        txn_colors,\n        utxo_labels\n    );\n    const inputs_map = process_inputs_map(txn_models);\n\n    const to_add = process_utxo_models(txn_models, inputs_map);\n    return {\n        inputs_map: inputs_map,\n        utxo_models: to_add,\n        txn_models: txn_models,\n        txid_map: txid_map,\n        continuations,\n    };\n}\n\ntype TimingData = {\n    unlock_time: number;\n    unlock_height: number;\n    unlock_at_relative_height: number;\n    unlock_at_relative_time: number;\n    txn: TransactionModel;\n};\nclass TimingCache {\n    // Array should be de-duplicated!\n    cache: Map<TXID, [TimingData, Array<TransactionModel> | null]>;\n    constructor() {\n        this.cache = new Map();\n    }\n}\nexport const timing_cache = new TimingCache();\n\n// In theory this just returns the PhantomTransactions, but in order to make it\n// work with future changes compute rather than infer this list\nfunction get_base_transactions(\n    txns: Array<TransactionModel>,\n    map: TXIDAndWTXIDMapT<TransactionModel>\n): Array<TransactionModel> {\n    const phantoms = txns.filter((item) => {\n        return (\n            -1 ===\n            item.tx.ins.findIndex((inp) =>\n                TXIDAndWTXIDMap.has_by_txid(map, txid_buf_to_string(inp.hash))\n            )\n        );\n    });\n    return phantoms;\n}\n// Based off of\n// https://stackoverflow.com/a/41170834\nfunction mergeAndDeduplicateSorted<T, T2>(\n    array1: T[],\n    array2: T[],\n    iteratee: (t: T) => T2\n): Array<T> {\n    const mergedArray: Array<T> = [];\n    let i = 0;\n    let j = 0;\n    while (i < array1.length && j < array2.length) {\n        if (iteratee(array1[i]!) < iteratee(array2[j]!)) {\n            mergedArray.push(array1[i]!);\n            i++;\n        } else if (iteratee(array1[i]!) > iteratee(array2[j]!)) {\n            mergedArray.push(array2[j]!);\n            j++;\n        } else {\n            // Arbitrary\n            mergedArray.push(array1[i]!);\n            i++;\n            j++;\n        }\n    }\n    if (i < array1.length) {\n        for (let p = i; p < array1.length; p++) {\n            mergedArray.push(array1[p]!);\n        }\n    } else {\n        for (let p = j; p < array2.length; p++) {\n            mergedArray.push(array2[p]!);\n        }\n    }\n    return mergedArray;\n}\nfunction unreachable_by_time(\n    bases: Array<TransactionModel>,\n    max_time: number,\n    max_height: number,\n    start_height: number,\n    start_time: number,\n    map: InputMapT<TransactionModel>\n): Array<TransactionModel> {\n    // Every Array is Sorted and Unique, but *may* overlap\n    const arrays = bases.map((b) =>\n        unreachable_by_time_inner(\n            b,\n            max_time,\n            max_height,\n            start_height,\n            start_time,\n            map\n        )\n    );\n    // This algorithm is either O(# TransactionModels^2) because models can share descendants.\n    // The alternative would be to call flat (O(n^2)) and then call sort...\n    // The algorithm cannot be in place on the *first pass* because the arrays are from our cache\n    // and shouldn't be modified.\n    // Later passes could one day re-use allocations...\n    while (arrays.length > 1) {\n        // Picks two random arrays to merge at a time to prevent adversarial cases...\n        const v1 = Math.floor(Math.random() * arrays.length);\n        let v2 = Math.floor(Math.random() * arrays.length);\n        // Rejection sample for v2...\n        while (v1 === v2) {\n            v2 = Math.floor(Math.random() * arrays.length);\n        }\n        arrays[v1] = _(\n            mergeAndDeduplicateSorted(\n                arrays[v1]!,\n                arrays[v2]!,\n                (t: TransactionModel) => t.get_txid()\n            )\n        )\n            .sortedUniqBy((t: TransactionModel) => t.get_txid())\n            .value();\n        const last = arrays.pop();\n        if (last === undefined) throw Error('Invariant Broken on Array Length');\n        if (arrays.length !== v2) {\n            arrays[v2] = last;\n        }\n    }\n    return arrays[0] ?? [];\n}\nfunction compute_timing(txn: TransactionModel): TimingData {\n    let cache_entry = timing_cache.cache.get(txn.get_txid());\n    if (cache_entry) {\n        return cache_entry[0];\n    }\n    const locktime = txn.tx.locktime;\n    const sequences = txn.tx.ins.map((inp) => inp.sequence);\n    // TODO: Handle MTP?\n    let unlock_at_relative_height = 0;\n    let unlock_at_relative_time = 0;\n    let locktime_enabled = false;\n    sequences.forEach((s) => {\n        // Only enable locktime if at least one input is not UINT_MAX\n        if (s === 0xffffffff) return;\n        locktime_enabled = true;\n        // skip, no meaning if set (except perhaps to enable locktime)\n        if (s & (1 << 31)) return;\n        // Only bottom of sequence applies\n        const s_mask = 0x00ffff & s;\n        if (s & (1 << 22)) {\n            // Interpret as a relative time, units 512 seconds per s_mask\n            unlock_at_relative_time = Math.max(\n                s_mask * 512,\n                unlock_at_relative_time\n            );\n        } else {\n            // Interpret as a relative height, units blocks\n            unlock_at_relative_height = Math.max(\n                s_mask,\n                unlock_at_relative_height\n            );\n        }\n    });\n    // before 500M, it is a height. After a UNIX time.\n    const is_height = locktime < 500_000_000;\n    const unlock_time = locktime_enabled && !is_height ? locktime : 0;\n    const unlock_height = locktime_enabled && is_height ? locktime : 0;\n    cache_entry = [\n        {\n            unlock_time,\n            unlock_height,\n            unlock_at_relative_height,\n            unlock_at_relative_time,\n            txn,\n        },\n        null,\n    ];\n    timing_cache.cache.set(txn.get_txid(), cache_entry);\n    return cache_entry[0];\n}\nfunction compute_timing_of_children(\n    txn: TransactionModel,\n    map: InputMapT<TransactionModel>\n): Collection<TimingData> {\n    const spenders: Record<number, TransactionModel[]> =\n        InputMap.get_txid_s_group(map, txn.get_txid()) ?? {};\n    return _(Array.from(Object.values(spenders))).flatMap(\n        (output_spender: TransactionModel[]) =>\n            output_spender.map(compute_timing)\n    );\n}\n\nfunction unreachable_by_time_inner(\n    base: TransactionModel,\n    max_time: number,\n    max_height: number,\n    elapsed_time: number,\n    elapsed_blocks: number,\n    map: InputMapT<TransactionModel>\n): Array<TransactionModel> {\n    return compute_timing_of_children(base, map)\n        .value()\n        .flatMap(\n            ({\n                unlock_time,\n                unlock_height,\n                unlock_at_relative_height,\n                unlock_at_relative_time,\n                txn,\n            }) => {\n                // The soonest time to satisfy both conditions\n                const time_when_spendable = Math.max(\n                    unlock_time,\n                    elapsed_time + unlock_at_relative_time\n                );\n                const height_when_spendable = Math.max(\n                    unlock_height,\n                    elapsed_blocks + unlock_at_relative_height\n                );\n                // Return All Descendants and us from here because none of these transactions can go through\n                // It is > because a block will accept ==\n                if (\n                    time_when_spendable > max_time ||\n                    height_when_spendable > max_height\n                ) {\n                    // TODO: Make this a Set type?\n                    return all_descendants(txn, map);\n                }\n                // Recurse with the new times\n                return unreachable_by_time_inner(\n                    txn,\n                    max_time,\n                    max_height,\n                    time_when_spendable,\n                    height_when_spendable,\n                    map\n                );\n            }\n        );\n}\nfunction all_descendants(\n    t: TransactionModel,\n    inputs_map: InputMapT<TransactionModel>\n): Array<TransactionModel> {\n    let cache_entry = timing_cache.cache.get(t.get_txid());\n    if (cache_entry && cache_entry[1]) return cache_entry[1];\n    // This case probably never happens...\n    if (!cache_entry) {\n        cache_entry = [compute_timing(t), null];\n        timing_cache.cache.set(t.get_txid(), cache_entry);\n    }\n    cache_entry[1] = _(\n        Array.from(\n            Object.values(\n                InputMap.get_txid_s_group(inputs_map, t.get_txid()) ?? {}\n            ) ?? []\n        )\n            .flat(1)\n            .map((x) => all_descendants(x, inputs_map))\n            .flat(1)\n    )\n        .uniqBy((t) => t.get_txid())\n        .sortBy((t) => t.get_txid())\n        .value()\n        .concat(t);\n    return cache_entry[1];\n}\n\nexport class ContractBase {\n    utxo_models: Array<UTXOModel>;\n    txn_models: Array<TransactionModel>;\n    inputs_map: InputMapT<TransactionModel>;\n    txid_map: TXIDAndWTXIDMapT<TransactionModel>;\n    continuations: ContinuationTable;\n    constructor() {\n        this.utxo_models = [];\n        this.inputs_map = InputMap.new();\n        this.txn_models = [];\n        this.txid_map = TXIDAndWTXIDMap.new();\n        this.continuations = {};\n    }\n\n    lookup_utxo_model(txid: Buffer, n: number): UTXOModel | null {\n        console.log('called empty');\n        throw 'Called Empty';\n    }\n    should_update() {\n        return false;\n    }\n    get_continuations(): typeof ContractBase.prototype.continuations {\n        return this.continuations;\n    }\n}\n\nexport class ContractModel extends ContractBase {\n    checkable = false;\n    constructor();\n    constructor(obj: Data);\n    constructor(obj?: Data) {\n        super();\n        this.checkable = true;\n        if (obj === undefined) return;\n        const new_obj = preprocess_data(obj);\n        const { inputs_map, utxo_models, txn_models, txid_map, continuations } =\n            process_data(new_obj);\n        this.utxo_models = utxo_models;\n        this.inputs_map = inputs_map;\n        this.txn_models = txn_models;\n        this.txid_map = txid_map;\n        this.continuations = continuations;\n    }\n    should_update() {\n        return this.checkable;\n    }\n    // TODO: Return an Array of UTXOModels\n    lookup_utxo_model(txid: Buffer, n: number): UTXOModel | null {\n        const txid_s = txid_buf_to_string(txid);\n        return (\n            TXIDAndWTXIDMap.get_by_txid_s(this.txid_map, txid_s)?.utxo_models[\n                n\n            ] ?? null\n        );\n    }\n    reachable_at_time(\n        max_time: number,\n        max_height: number,\n        start_time: number,\n        start_height: number\n    ): Array<TransactionModel> {\n        const bases = get_base_transactions(this.txn_models, this.txid_map);\n        return unreachable_by_time(\n            bases,\n            max_time,\n            max_height,\n            start_time,\n            start_height,\n            this.inputs_map\n        );\n    }\n}\n","import { Transaction } from 'bitcoinjs-lib';\nimport * as Bitcoin from 'bitcoinjs-lib';\nimport React from 'react';\nimport { TextField, InputAdornment } from '@mui/material';\nimport { useSelector } from 'react-redux';\nimport { selectMaxSats } from './Settings/SettingsSlice';\nimport { preloads } from './common/preload_interface';\ndeclare global {\n    interface Window {\n        electron: preloads;\n    }\n}\n\n/// txid_buf_to_string converts a buffer into a reverse encoded hex format.\nexport function txid_buf_to_string(txid: Buffer): TXID {\n    const copy = Buffer.alloc(txid.length);\n    txid.forEach((v, i) => {\n        copy[txid.length - 1 - i] = v;\n    });\n    return copy.toString('hex');\n}\n\n// hash_to_hex converts a buffer into a reverse encoded hex format\n// TODO: is this the same as txid_buf_to_string?\nexport function hash_to_hex(h: Buffer): string {\n    return txid_buf_to_string(h);\n}\n\nexport interface OutpointInterface {\n    index: number;\n    hash: Buffer;\n}\ntype OpaqueKey = string;\n// Maps an Input (TXID) to all Spenders\nconst input_map_s = Symbol('InputMapT');\nexport type InputMapT<T> = {\n    [input_map_s]: Record<OpaqueKey, Record<number, Array<T>>>;\n};\nexport const InputMap = {\n    new<T>(): InputMapT<T> {\n        return { [input_map_s]: {} };\n    },\n    add<T>(that: InputMapT<T>, t: OutpointInterface, model: T) {\n        const key1 = txid_buf_to_string(t.hash);\n        let vals = that[input_map_s][key1];\n        if (vals === undefined) {\n            vals = {};\n            that[input_map_s][key1] = vals;\n        }\n\n        let vals2 = vals[t.index];\n        if (vals2 === undefined) {\n            vals2 = [];\n            vals[t.index] = vals2;\n        }\n        vals2.push(model);\n    },\n    get_txid_s_group<T>(\n        that: InputMapT<T>,\n        t: string\n    ): Record<number, Array<T>> | null {\n        return that[input_map_s][t] ?? null;\n    },\n    get<T>(that: InputMapT<T>, t: OutpointInterface): Array<T> | null {\n        return that[input_map_s][txid_buf_to_string(t.hash)]?.[t.index] ?? null;\n    },\n\n    get_txid_s<T>(that: InputMapT<T>, t: string, i: number): Array<T> | null {\n        return that[input_map_s][t]?.[i] ?? null;\n    },\n};\n\nexport function PrettyAmount(amount: number) {\n    const max_sats = useSelector(selectMaxSats);\n    if (amount > max_sats) {\n        amount /= 100_000_000;\n        return (\n            <span title={amount.toString() + ' bitcoin'}>\n                {amount}\n                <span style={{ fontSize: 'larger', color: '#f2a900' }}>₿</span>\n            </span>\n        );\n    } else {\n        return (\n            <span title={amount.toString() + ' satoshis'}>\n                {amount}\n                <span style={{ fontSize: 'larger', color: '#f2a900' }}>§</span>\n            </span>\n        );\n    }\n}\n\nexport function PrettyAmountField(props: { amount: number }) {\n    let amount = props.amount;\n    const max_sats = useSelector(selectMaxSats);\n    if (amount > max_sats) {\n        amount /= 100_000_000;\n        return (\n            <TextField\n                label=\"Amount (btc)\"\n                type=\"text\"\n                value={amount}\n                variant=\"outlined\"\n                InputProps={{\n                    readOnly: true,\n                    endAdornment: (\n                        <InputAdornment position=\"end\">\n                            <span\n                                style={{ fontSize: 'larger', color: '#f2a900' }}\n                            >\n                                ₿\n                            </span>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n        );\n    } else {\n        return (\n            <TextField\n                label=\"Amount (sats)\"\n                type=\"text\"\n                value={amount}\n                variant=\"outlined\"\n                InputProps={{\n                    readOnly: true,\n                    endAdornment: (\n                        <InputAdornment position=\"end\">\n                            <span\n                                style={{ fontSize: 'larger', color: '#f2a900' }}\n                            >\n                                §\n                            </span>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n        );\n    }\n}\n\n// identifier which is stable with different witnesses\nexport function get_wtxid_backwards(tx: Transaction) {\n    return tx.getHash(true).toString('hex');\n}\n\nexport type TXID = string;\nexport interface HasKeys {\n    get_txid: () => TXID;\n}\n// Maps an TXID to a Transaction,\nconst txid_map_s = Symbol('TXIDAndWTXIDMapT');\nexport type TXIDAndWTXIDMapT<K extends HasKeys> = {\n    [txid_map_s]: Record<TXID, K>;\n};\nexport const TXIDAndWTXIDMap = {\n    new() {\n        return { [txid_map_s]: {} };\n    },\n    add<K extends HasKeys>(that: TXIDAndWTXIDMapT<K>, t: K): void {\n        that[txid_map_s][t.get_txid()] = t;\n    },\n    get_by_txid<K extends HasKeys>(\n        that: TXIDAndWTXIDMapT<K>,\n        t: K\n    ): K | undefined {\n        return that[txid_map_s][t.get_txid()];\n    },\n    get_by_txid_s<K extends HasKeys>(\n        that: TXIDAndWTXIDMapT<K>,\n        t: TXID\n    ): K | undefined {\n        return that[txid_map_s][t];\n    },\n    delete_by_txid<K extends HasKeys>(that: TXIDAndWTXIDMapT<K>, t: K) {\n        delete that[txid_map_s][t.get_txid()];\n    },\n    has_by_txid<K extends HasKeys>(\n        that: TXIDAndWTXIDMapT<K>,\n        t: TXID\n    ): boolean {\n        return hasOwn(that[txid_map_s], t);\n    },\n};\n\nexport function sequence_convert(sequence: number): {\n    relative_time: number;\n    relative_height: number;\n} {\n    const ret = { relative_time: 0, relative_height: 0 };\n    if (sequence === Bitcoin.Transaction.DEFAULT_SEQUENCE) return ret;\n    if (sequence === Bitcoin.Transaction.DEFAULT_SEQUENCE - 1) return ret;\n    const s_mask = 0xffff & sequence;\n    if ((1 << 22) & sequence) {\n        ret.relative_time = s_mask;\n    } else {\n        ret.relative_height = s_mask;\n    }\n    return ret;\n}\n\n// convert a time to a pretty string like\n// 6 Hours, 10 Days, 5 Weeks, 3.3 Months\nexport function time_to_pretty_string(time: number): string {\n    time *= 512;\n    time /= 6;\n    let suffix;\n    if (time < 24 && time !== 0) {\n        suffix = ' Hours';\n    } else {\n        time /= 24;\n        if (time < 14) {\n            suffix = ' Days';\n        } else {\n            time /= 7;\n            if (time < 10) {\n                suffix = ' Weeks';\n            } else {\n                time /= 30;\n                suffix = ' Months';\n            }\n        }\n    }\n    return (Math.trunc(time * 10) / 10).toString() + suffix;\n}\n\n// is_mock_outpoint detects if the Outpoint's hash is sha256('mock:'+index)\n// it is useful for external services to tag outputs that are unbound.\nexport function is_mock_outpoint(args: Outpoint): boolean {\n    const hash = Bitcoin.crypto.sha256(Buffer.from('mock:' + args.nIn));\n    return txid_buf_to_string(hash) === args.hash;\n}\n\nexport type Outpoint = { hash: string; nIn: number };\ntype OutpointStringDifferentiator = string;\nexport type OutpointString = OutpointStringDifferentiator & string;\n\nexport const ValidateOutpointString = (out: string): out is OutpointString => {\n    return out.match(/^[A-Fa-f0-9]{64}:[0-9]+$/) !== null;\n};\n\nexport function outpoint_to_id(args: Outpoint): OutpointString {\n    const s = args.hash + ':' + args.nIn.toString();\n    if (ValidateOutpointString(s)) return s;\n    throw 'ERR: ID not valid';\n}\n\nexport const hasOwn = (\n    a: Record<string | number, unknown>,\n    b: string | number\n) => Object.prototype.hasOwnProperty.call(a, b);\n","import { SpendLinkModel } from './SpendLink/SpendLinkModel';\n\nexport class OutputLinkModel extends SpendLinkModel {\n    constructor() {\n        super({\n            type: 'spend',\n            width: 15,\n        });\n        this.link_type = 'nonexclusive';\n    }\n}\n","import { PortModel } from '@projectstorm/react-diagrams-core';\nimport { TransactionModel } from '../../../Data/Transaction';\nimport { SpendPortModel } from './SpendLink/SpendPortModel';\nimport { OutputLinkModel } from './OutputLink';\n\nexport class OutputPortModel extends SpendPortModel {\n    createLinkModel(factory: any): OutputLinkModel {\n        return new OutputLinkModel();\n    }\n\n    create_link(x: OutputPortModel, to: TransactionModel, factory: any) {\n        const link = this.createLinkModel(factory);\n        // TODO: fix?\n        link.setSourcePort(this as unknown as PortModel);\n        link.setTargetPort(x as unknown as PortModel);\n        link.linked_to = to;\n        return link;\n    }\n}\n","import {\n    DefaultLinkModel,\n    DefaultLinkModelOptions,\n} from '@projectstorm/react-diagrams';\nimport { TransactionModel } from '../../../../Data/Transaction';\nexport class SpendLinkModel extends DefaultLinkModel {\n    link_type: 'exclusive' | 'nonexclusive';\n    linked_to: TransactionModel | null;\n\n    constructor(options?: DefaultLinkModelOptions) {\n        super({\n            type: 'spend',\n            width: 15,\n            ...options,\n        });\n        this.link_type = 'exclusive';\n        this.linked_to = null;\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { RootState } from '../Store/store';\nimport { Status } from './BitcoinNode';\nimport { TransactionState } from '../UX/Diagram/DiagramComponents/TransactionNode/TransactionNodeModel';\ntype TXID = string;\nexport type DataStateType = {\n    status: Record<TXID, Status>;\n    state: Record<TXID, TransactionState>;\n};\n\nfunction default_state(): DataStateType {\n    return {\n        status: {},\n        state: {},\n    };\n}\n\nexport const settingsSlice = createSlice({\n    name: 'Settings',\n    initialState: default_state(),\n    reducers: {\n        load_status: (\n            state,\n            action: PayloadAction<{\n                status: Record<TXID, Status>;\n                state: Record<TXID, TransactionState>;\n            }>\n        ) => {\n            if (\n                _.isEqual(state.status, action.payload.status) &&\n                _.isEqual(state.state, action.payload.state)\n            )\n                return;\n            state.status = action.payload.status;\n            state.state = action.payload.state;\n        },\n    },\n});\n\nexport const { load_status } = settingsSlice.actions;\n\nconst memo_number = -1;\nconst g_memo: Record<number, Record<TXID, TransactionState>> = {};\n\nexport const selectStatus: (\n    txid: TXID\n) => (state: RootState) => TransactionState = (txid) => (state: RootState) => {\n    // return type must be based on state\n    return state.dataReducer.state[txid]!;\n};\nexport const dataReducer = settingsSlice.reducer;\n","import { IconButton, Tooltip } from '@mui/material';\nimport { green } from '@mui/material/colors';\nimport DoubleArrowIcon from '@mui/icons-material/DoubleArrow';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { select_txn, select_utxo } from '../EntitySlice';\nimport Hex from './Hex';\nimport './OutpointDetail.css';\nexport function OutpointDetail(props: { txid: string; n: number }) {\n    const dispatch = useDispatch();\n    return (\n        <div className=\"OutpointDetail\">\n            <Hex\n                className=\"txhex\"\n                label=\"Outpoint\"\n                value={props.txid.toString() + ':' + props.n}\n            />\n            <Tooltip title=\"Go To the Transaction that created this.\">\n                <IconButton\n                    aria-label=\"goto-creating-txn\"\n                    onClick={() => dispatch(select_txn(props.txid))}\n                >\n                    <DoubleArrowIcon style={{ color: green[500] }} />\n                </IconButton>\n            </Tooltip>\n        </div>\n    );\n}\n\nexport function RefOutpointDetail(props: { txid: string; n: number }) {\n    const dispatch = useDispatch();\n    return (\n        <div className=\"OutpointDetail\">\n            <Hex\n                className=\"txhex\"\n                label=\"Outpoint\"\n                value={props.txid.toString() + ':' + props.n}\n            />\n            <Tooltip title=\"Go to this outpoint\">\n                <IconButton\n                    aria-label=\"goto-this-outpoint\"\n                    onClick={() =>\n                        dispatch(\n                            select_utxo({\n                                hash: props.txid,\n                                nIn: props.n,\n                            })\n                        )\n                    }\n                >\n                    <DoubleArrowIcon style={{ color: green[500] }} />\n                </IconButton>\n            </Tooltip>\n        </div>\n    );\n}\n\nexport class TXIDDetail extends React.Component<{\n    txid: string;\n}> {\n    render() {\n        return <Hex className=\"txhex\" value={this.props.txid} label=\"TXID\" />;\n    }\n}\n","import { Transaction } from 'bitcoinjs-lib';\nimport { ContractModel } from './ContractManager';\nimport { hash_to_hex, hasOwn, Outpoint, TXIDAndWTXIDMap } from '../util';\nimport { clamp } from 'lodash';\nimport { DiagramModel } from '@projectstorm/react-diagrams-core';\nimport { selectNodePollFreq } from '../Settings/SettingsSlice';\nimport { store } from '../Store/store';\nimport { load_status } from './DataSlice';\nimport { TransactionState } from '../UX/Diagram/DiagramComponents/TransactionNode/TransactionNodeModel';\n\ntype TXID = string;\n\nexport type Status = { txid: TXID; confirmations: number | null };\n\nexport function call(method: string, args: any) {\n    return fetch(method, {\n        method: 'post',\n        body: JSON.stringify(args),\n        headers: {\n            Accept: 'application/json, text/plain, */*',\n            'Content-Type': 'application/json',\n        },\n    }).then((res) => res.json());\n}\ninterface IProps {\n    model: DiagramModel;\n    current_contract: ContractModel;\n}\nexport function update_broadcastable(\n    current_contract: ContractModel,\n    limbo_tx: TXID\n) {\n    const tm = TXIDAndWTXIDMap.get_by_txid_s(\n        current_contract.txid_map,\n        limbo_tx\n    );\n    if (!tm) {\n        throw new Error(\n            `Invariant Error: ${limbo_tx} must exist in contract model`\n        );\n    }\n}\n\nfunction swap(arr: any[], i: number, j: number) {\n    if (i === j) return;\n    const x = arr[i];\n    arr[i] = arr[j];\n    arr[j] = x;\n}\n\nfunction compute_impossible(\n    state: Record<TXID, TransactionState>,\n    cm: ContractModel\n): Record<TXID, TransactionState> {\n    const unspendable: Record<TXID, Record<number, null>> = {};\n    for (const [txid, status] of Object.entries(state)) {\n        if (status !== 'Confirmed' && status !== 'Impossible') continue;\n        const tmi = TXIDAndWTXIDMap.get_by_txid_s(cm.txid_map, txid)!;\n        if (!tmi) throw new Error('All txns Are Expected to be Present');\n        // If confirmed, all inputs are now unspendable\n        if (status === 'Confirmed') {\n            for (const inp of tmi.getOptions().txn.ins) {\n                const hash = hash_to_hex(inp.hash);\n                if (hasOwn(unspendable, hash))\n                    unspendable[hash]![inp.index] = null;\n                else {\n                    unspendable[hash] = { [inp.index]: null };\n                }\n            }\n        }\n        // If impossible, all outputs are now unspendable\n        if (status === 'Impossible') {\n            const length = tmi.getOptions().txn.outs.length;\n            const obj: Record<number, null> = Object.fromEntries(\n                Array.from({ length }, () => 0).map((v, a) => [a, null])\n            );\n            console.log('OBJ', obj);\n            unspendable[txid] = obj;\n        }\n    }\n    let changed;\n    const mutable_state: Record<TXID, { length: number; inps: Outpoint[] }> =\n        Object.fromEntries(\n            Object.entries(state)\n                .filter(([_, f]) => !(f === 'Confirmed' || f === 'Impossible'))\n                .map(([k, _]) => {\n                    const tmi = TXIDAndWTXIDMap.get_by_txid_s(cm.txid_map, k)!;\n                    if (!tmi)\n                        throw new Error('All txns Are Expected to be Present');\n                    return [\n                        k,\n                        {\n                            length: tmi.getOptions().txn.outs.length,\n                            inps: tmi.getOptions().txn.ins.map((inp) => {\n                                return {\n                                    hash: hash_to_hex(inp.hash),\n                                    nIn: inp.index,\n                                };\n                            }),\n                        },\n                    ];\n                })\n        );\n    do {\n        changed = false;\n        for (const [txid, { length, inps }] of Object.entries(mutable_state)) {\n            console.log(txid);\n            for (const { hash, nIn } of inps) {\n                if (hasOwn(unspendable[hash] ?? {}, nIn)) {\n                    const obj: Record<number, null> = Object.fromEntries(\n                        Array.from({ length }, () => 0).map((v, a) => [a, null])\n                    );\n                    unspendable[txid] = obj;\n\n                    changed = true;\n                    state[txid] = 'Impossible';\n                    delete mutable_state[txid];\n                    break;\n                }\n            }\n        }\n    } while (changed);\n\n    return state;\n}\nfunction derive_state(\n    state: Record<TXID, Status | null>,\n    cm: ContractModel\n): Record<TXID, TransactionState> {\n    const memo: Record<TXID, TransactionState> = {};\n    const unknown: Array<Status> = [];\n    for (const [txid, status] of Object.entries(state)) {\n        if (!status) throw new Error('All Statuses Are Expected to be Present');\n        let conf: TransactionState;\n        if (!status) conf = 'Unknown';\n        else if (status.confirmations === null) conf = 'Unknown';\n        else if (status.confirmations > 0) conf = 'Confirmed';\n        else if (status.confirmations === 0) conf = 'InMempool';\n        else if (status.confirmations < 0) conf = 'Impossible';\n        else conf = 'Unknown';\n        if (conf === 'Unknown') unknown.push(status);\n        else memo[txid] = conf;\n    }\n    /// this should usually be good!\n    unknown.reverse();\n    let any_changed;\n    do {\n        any_changed = false;\n        const n = unknown.length;\n        for (let l = 0; l < n; ++l) {\n            const status = unknown.pop()!;\n\n            const tmi = TXIDAndWTXIDMap.get_by_txid_s(\n                cm.txid_map,\n                status.txid\n            )!;\n            let should_next_tx = false;\n            for (const inp of tmi.tx.ins) {\n                switch (memo[hash_to_hex(inp.hash)]) {\n                    case undefined: {\n                        unknown.push(status);\n                        swap(unknown, 0, unknown.length - 1);\n                        should_next_tx = true;\n                        break;\n                    }\n                    case 'Confirmed':\n                    case 'InMempool':\n                        break;\n                    case 'Impossible': {\n                        memo[status.txid] = 'Impossible';\n                        any_changed = true;\n                        should_next_tx = true;\n                        break;\n                    }\n                    // in these cases, something else must be broadcast first.\n                    // note: no parent at this phase could go from Unknown -> Confirmed\n                    // since that was handled earlier.\n                    case 'Broadcastable':\n                    case 'NotBroadcastable':\n                        memo[status.txid] = 'NotBroadcastable';\n                        any_changed = true;\n                        break;\n                    case 'Unknown':\n                        throw new Error('Logically, cannot be Unknown');\n                }\n                if (should_next_tx) break;\n            }\n            // Absent any other value, this should now be broadcastable\n            if (!should_next_tx) {\n                memo[status.txid] = memo[status.txid] ?? 'Broadcastable';\n                any_changed = true;\n            }\n        }\n    } while (any_changed);\n    for (const u of unknown) {\n        memo[u.txid] = 'Unknown';\n    }\n    return memo;\n}\n\ninterface ICommand {\n    method: string;\n    parameters: any[];\n}\n\n/*\nCurrently non-functional, needs a server to be running somewhere.\n\nShould be upgraded to a socket managed driver that does not use polling.\n*/\nexport class BitcoinNodeManager {\n    props: IProps;\n    mounted: boolean;\n    next_periodic_check: NodeJS.Timeout;\n    constructor(props: IProps) {\n        this.props = props;\n        this.mounted = true;\n        this.next_periodic_check = setTimeout(\n            this.periodic_check.bind(this),\n            1000\n        );\n    }\n    destroy() {\n        this.mounted = false;\n        if (this.next_periodic_check != null)\n            clearTimeout(this.next_periodic_check);\n    }\n\n    /**\n     * Execute a Bitcoin rpc call\n     * @param command { method: string, parameters: any[] }\n     * @returns result of the command or throws an error\n     */\n    async execute(command: ICommand) {\n        const [result] = await window.electron.bitcoin_command([command]);\n        if (result === undefined) {\n            throw new Error('Unexpected result returned');\n        }\n        if (result?.name === 'RpcError') {\n            throw result;\n        }\n        return result;\n    }\n\n    /**\n     * Execute a batched Bitcoin rpc call\n     * @param commands [{ method: string, parameters: any[] },...]\n     * @returns returns an array of results, results can include error objects\n     */\n    async executeBatch(commands: ICommand[]) {\n        return window.electron.bitcoin_command(commands);\n    }\n\n    async periodic_check() {\n        const contract = this.props.current_contract;\n        console.info('PERIODIC CONTRACT CHECK');\n        if (!contract.should_update()) {\n            // poll here faster\n            this.next_periodic_check = setTimeout(\n                this.periodic_check.bind(this),\n                1000\n            );\n            return;\n        }\n        const status = await this.get_transaction_status(contract);\n        const state = compute_impossible(\n            derive_state(status, this.props.current_contract),\n            this.props.current_contract\n        );\n        store.dispatch(load_status({ status, state }));\n\n        if (this.mounted) {\n            const freq = selectNodePollFreq(store.getState());\n            const period = clamp(freq ?? 0, 5, 60 * 5);\n\n            console.info('NEXT PERIODIC CONTRACT CHECK ', period, ' SECONDS');\n            this.next_periodic_check = setTimeout(\n                this.periodic_check.bind(this),\n                1000 * period\n            );\n        }\n    }\n\n    // TODO: make this not static so we can use `execute` directly instead of `bitcoin_command`\n    static async fund_out(tx: Transaction): Promise<Transaction> {\n        const result = await window.electron.bitcoin_command([\n            { method: 'fundrawtransaction', parameters: [tx.toHex()] },\n        ]);\n        if (result[0] && result[0].name === 'RpcError') {\n            throw result[0];\n        }\n        const hex: string = result[0].hex;\n        return Transaction.fromHex(hex);\n    }\n\n    // TODO: make this not static so we can use `execute` directly instead of `bitcoin_command`\n    static async fetch_utxo(t: TXID, n: number): Promise<QueriedUTXO | null> {\n        const txout = (\n            await window.electron.bitcoin_command([\n                { method: 'getrawtransaction', parameters: [t, true] },\n            ])\n        )[0];\n        if (!txout || txout.name === 'RpcError') {\n            return null;\n        }\n        return {\n            blockhash: txout.blockhash,\n            confirmations: txout.confirmations,\n            scriptPubKey: txout.vout[n].scriptPubKey,\n            value: txout.vout[n].value,\n        };\n    }\n    async check_balance(): Promise<number> {\n        return this.execute({ method: 'getbalance', parameters: [] });\n    }\n    async blockchaininfo(): Promise<any> {\n        return this.execute({ method: 'getblockchaininfo', parameters: [] });\n    }\n    async get_new_address(): Promise<string> {\n        return this.execute({ method: 'getnewaddress', parameters: [] });\n    }\n\n    async send_to_address(amount: number, address: string): Promise<void> {\n        return this.execute({\n            method: 'sendtoaddress',\n            parameters: [address, amount],\n        });\n    }\n\n    async list_transactions(count: number): Promise<any> {\n        return this.execute({\n            method: 'listtransactions',\n            parameters: ['*', count],\n        });\n    }\n    async generate_blocks(n: number): Promise<void> {\n        const addr = await this.get_new_address();\n        return this.execute({\n            method: 'generatetoaddress',\n            parameters: [n, addr],\n        });\n    }\n    // get info about transactions\n    async get_transaction_status(\n        current_contract: ContractModel\n    ): Promise<Record<TXID, Status>> {\n        // TODO: SHould query by WTXID\n        const txids = current_contract.txn_models\n            //            .filter((tm) => tm.is_broadcastable())\n            .map((tm) => tm.get_txid());\n        const req = txids.map((txid) => {\n            return {\n                method: 'getrawtransaction',\n                parameters: [txid, true],\n            };\n        });\n        if (txids.length > 0) {\n            const results: (\n                | Status\n                | { message: string; code: number; name: string }\n            )[] = await this.executeBatch(req);\n            console.log(results);\n            // TODO: Configure Threshold\n            return Object.fromEntries(\n                results.map((txdata, idx: number) => {\n                    const s: [TXID | undefined, Status | undefined] = [\n                        undefined,\n                        undefined,\n                    ];\n                    if ('code' in txdata) {\n                        s[1] = {\n                            txid: txids[idx]!,\n                            confirmations: null,\n                        };\n                    } else {\n                        s[1] = {\n                            txid: txdata.txid,\n                            confirmations: txdata.confirmations ?? 0,\n                        };\n                    }\n                    s[0] = s[1].txid;\n                    return s;\n                })\n            );\n        }\n        return {};\n    }\n\n    async get_output_status(\n        current_contract: ContractModel,\n        txns: Record<TXID, Status | null>\n    ): Promise<Record<OutpointS, string>> {\n        return {};\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport interface QueriedUTXO {\n    blockhash: string;\n    confirmations: number;\n    scriptPubKey: { asm: string; hex: string; address: string; type: string };\n    value: number;\n}\n\ntype OutpointS = string;\n","import { Transaction } from 'bitcoinjs-lib';\nimport {\n    UTXOInnerData,\n    UTXONodeModel,\n} from '../UX/Diagram/DiagramComponents/UTXONode/UTXONodeModel';\nimport { TransactionModel } from './Transaction';\nimport { is_mock_outpoint, txid_buf_to_string } from '../util';\nimport { store } from '../Store/store';\nimport { select_utxo } from '../UX/Entity/EntitySlice';\nimport { UTXOFormatData } from '../common/preload_interface';\nimport { SpendLinkModel } from '../UX/Diagram/DiagramComponents/SpendLink/SpendLinkModel';\nexport function new_utxo_inner_data(\n    script: Buffer,\n    amount: number,\n    txn: Transaction,\n    index: number\n): UTXOInnerData {\n    return {\n        txid: txn.getId(),\n        index: index,\n        script: script,\n        amount: amount,\n        spends: [],\n    };\n}\nexport class UTXOModel extends UTXONodeModel {\n    constructor(\n        utxo: UTXOInnerData,\n        metadata: UTXOFormatData,\n        txn: TransactionModel\n    ) {\n        super(\n            {\n                name: metadata.label,\n                color: metadata.color,\n                amount: utxo.amount,\n                confirmed: false,\n                txn,\n                utxo,\n                metadata,\n            },\n            txn.get_txid(),\n            utxo.index\n        );\n        this.registerListener({\n            selectionChanged: (event: any) => {\n                // TODO: get store the right way?\n                if (event.isSelected)\n                    store.dispatch(\n                        select_utxo({ hash: utxo.txid, nIn: utxo.index })\n                    );\n            },\n        });\n    }\n    getAmount(): number {\n        return this.getOptions().utxo.amount;\n    }\n\n    spent_by(\n        spender: TransactionModel,\n        s_idx: number,\n        idx: number\n    ): SpendLinkModel {\n        return this.addOutPort('tx' + s_idx).spend_link(\n            spender.addInPort('in' + idx, true),\n            spender,\n            undefined\n        );\n    }\n}\n\nexport function update_utxomodel(utxo_in: UTXOModel) {\n    const to_iterate: Array<UTXOModel>[] = [[utxo_in]];\n    while (to_iterate.length) {\n        const s = to_iterate.pop()!;\n        for (const utxo of s) {\n            // Pop a node for processing...\n            utxo.getOptions().utxo.spends.forEach((spend: TransactionModel) => {\n                spend.tx.ins\n                    .filter(\n                        (inp) =>\n                            txid_buf_to_string(inp.hash) ===\n                            utxo.getOptions().utxo.txid\n                    )\n                    .forEach((inp) => {\n                        inp.hash = utxo.getOptions().txn.tx.getHash();\n                    });\n                spend.tx.ins\n                    .filter((inp) =>\n                        is_mock_outpoint({\n                            hash: txid_buf_to_string(inp.hash),\n                            nIn: inp.index,\n                        })\n                    )\n                    .forEach((inp) => {\n                        // TODO: Only modify the mock that was intended\n                        inp.hash = utxo.getOptions().txn.tx.getHash();\n                        inp.index = utxo.getOptions().utxo.index;\n                    });\n                to_iterate.push(spend.utxo_models);\n            });\n        }\n    }\n}\n","import { DefaultPortModel, NodeModel } from '@projectstorm/react-diagrams';\nimport {\n    PortModelAlignment,\n    NodeModelGenerics,\n    PortModel,\n} from '@projectstorm/react-diagrams-core';\nimport { SpendPortModel } from '../SpendLink/SpendPortModel';\nimport { BasePositionModelOptions } from '@projectstorm/react-canvas-core';\nimport { TXID } from '../../../../util';\nimport { OutputPortModel } from '../OutputPortModel';\nimport { TransactionState } from '../TransactionNode/TransactionNodeModel';\nimport { TransactionModel } from '../../../../Data/Transaction';\nimport { UTXOFormatData } from '../../../../common/preload_interface';\n\nexport type UTXOInnerData = {\n    index: number;\n    script: Buffer;\n    amount: number;\n    spends: Array<TransactionModel>;\n    txid: string;\n};\nexport interface UTXONodeModelOptions extends BasePositionModelOptions {\n    name: string;\n    color: string;\n    amount: number;\n    confirmed: TransactionState;\n    txid: TXID;\n    index: number;\n\n    txn: TransactionModel;\n    utxo: UTXOInnerData;\n    metadata: UTXOFormatData;\n}\nexport interface UTXONodeModelGenerics extends NodeModelGenerics {\n    OPTIONS: UTXONodeModelOptions;\n}\n/**\n * Example of a custom model using pure javascript\n */\nexport class UTXONodeModel extends NodeModel<UTXONodeModelGenerics> {\n    protected portsIn: OutputPortModel[];\n    protected portsOut: SpendPortModel[];\n    constructor(\n        options: any = {},\n        txid?: TXID,\n        index?: number,\n        name?: string,\n        color?: string,\n        amount?: number,\n        confirmed: TransactionState = 'NotBroadcastable'\n    ) {\n        color = color || 'red';\n        super({\n            name,\n            txid,\n            index,\n            color,\n            amount,\n            confirmed,\n            type: 'utxo-node',\n            ...options,\n        });\n        this.portsOut = [];\n        this.portsIn = [];\n    }\n    sync() {\n        this.fireEvent({}, 'sync');\n    }\n    getAmount(): number {\n        return this.getOptions().amount;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    doClone(lookupTable: {}, clone: any) {\n        clone.portsIn = [];\n        clone.portsOut = [];\n        super.doClone(lookupTable, clone);\n    }\n\n    // TODO: Fix Port type?\n    removePort(port: any) {\n        super.removePort(port);\n        if (port.getOptions().in) {\n            this.portsIn.splice(this.portsIn.indexOf(port));\n        } else {\n            this.portsOut.splice(this.portsOut.indexOf(port));\n        }\n    }\n\n    // TODO: Fix Port type?\n    addPort(port: PortModel): PortModel {\n        super.addPort(port);\n        switch (port.constructor) {\n            case OutputPortModel:\n                if (\n                    this.portsIn.indexOf(port as unknown as OutputPortModel) ===\n                    -1\n                ) {\n                    this.portsIn.push(port as unknown as OutputPortModel);\n                }\n                break;\n            case SpendPortModel:\n                if (\n                    this.portsOut.indexOf(port as unknown as SpendPortModel) ===\n                    -1\n                ) {\n                    this.portsOut.push(port as unknown as SpendPortModel);\n                }\n                break;\n            default:\n                throw 'Unexpected Port Type';\n        }\n        return port;\n    }\n    addInPort(label: string, after?: boolean) {\n        after = after || true;\n        const p = new OutputPortModel({\n            in: true,\n            name: label,\n            label: '',\n            alignment: PortModelAlignment.TOP,\n        });\n        if (!after) {\n            this.portsIn.splice(0, 0, p);\n        }\n        this.addPort(p as unknown as PortModel);\n        return p;\n    }\n\n    addOutPort(label: string, after?: boolean): SpendPortModel {\n        after = after || true;\n        const p = new SpendPortModel({\n            in: false,\n            name: label,\n            label: label,\n            alignment: PortModelAlignment.BOTTOM,\n        });\n        if (!after) {\n            this.portsOut.splice(0, 0, p);\n        }\n        this.addPort(p as unknown as PortModel);\n        return p;\n    }\n\n    getInPorts(): DefaultPortModel[] {\n        return this.portsIn;\n    }\n    getOutPorts(): SpendPortModel[] {\n        return this.portsOut;\n    }\n}\n","import { NodeModel } from '@projectstorm/react-diagrams';\nimport {\n    NodeModelGenerics,\n    PortModel,\n    PortModelAlignment,\n} from '@projectstorm/react-diagrams-core';\nimport { OutputPortModel } from '../OutputPortModel';\nimport { SpendPortModel } from '../SpendLink/SpendPortModel';\nimport { Transaction } from 'bitcoinjs-lib';\nimport { BasePositionModelOptions } from '@projectstorm/react-canvas-core';\nimport { DefaultPortModel } from '@projectstorm/react-diagrams';\n\nexport type TransactionState =\n    | 'Confirmed'\n    | 'InMempool'\n    | 'NotBroadcastable'\n    | 'Broadcastable'\n    | 'Unknown'\n    | 'Impossible';\nexport interface TransactionNodeModelOptions extends BasePositionModelOptions {\n    name: string;\n    color: string;\n    confirmed: TransactionState;\n    txn: Transaction;\n    purpose: string;\n}\nexport interface TransactionNodeModelGenerics extends NodeModelGenerics {\n    OPTIONS: TransactionNodeModelOptions;\n}\n/**\n * Example of a custom model using pure javascript\n */\nexport class TransactionNodeModel extends NodeModel<TransactionNodeModelGenerics> {\n    protected portsIn: SpendPortModel[];\n    protected portsOut: OutputPortModel[];\n    constructor(\n        options: any = {},\n        name?: string,\n        purpose?: string,\n        color?: string,\n        txn?: Transaction\n    ) {\n        super({\n            type: 'transaction-node',\n            name,\n            txn,\n            color: color || 'red',\n            purpose,\n            confirmed: false,\n            is_reachable: true,\n            reachable_cb: (_a: boolean) => null,\n            confirmed_cb: (_a: boolean) => null,\n            ...options,\n        });\n        this.portsOut = [];\n        this.portsIn = [];\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    doClone(lookupTable: {}, clone: any) {\n        clone.portsIn = [];\n        clone.portsOut = [];\n        super.doClone(lookupTable, clone);\n    }\n\n    removePort(port: PortModel) {\n        super.removePort(port);\n        switch (port.constructor) {\n            case SpendPortModel:\n                this.portsIn.splice(\n                    this.portsIn.indexOf(port as unknown as SpendPortModel)\n                );\n                break;\n            case OutputPortModel:\n                this.portsOut.splice(\n                    this.portsOut.indexOf(port as unknown as OutputPortModel)\n                );\n                break;\n            default:\n                throw 'Wrong Port Type';\n        }\n    }\n\n    addPort(port: PortModel): PortModel {\n        super.addPort(port);\n        switch (port.constructor) {\n            case SpendPortModel:\n                if (\n                    this.portsIn.indexOf(port as unknown as SpendPortModel) ===\n                    -1\n                ) {\n                    this.portsIn.push(port as unknown as SpendPortModel);\n                }\n                break;\n            case OutputPortModel:\n                if (\n                    this.portsOut.indexOf(\n                        port as unknown as OutputPortModel\n                    ) === -1\n                ) {\n                    this.portsOut.push(port as unknown as OutputPortModel);\n                }\n                break;\n        }\n        return port;\n    }\n    addInPort(label: string, after: boolean): SpendPortModel {\n        after = after || true;\n        const p = new SpendPortModel({\n            in: true,\n            name: label,\n            label: label,\n            alignment: PortModelAlignment.TOP,\n        });\n        if (!after) {\n            this.portsIn.splice(0, 0, p);\n        }\n        return this.addPort(\n            p as unknown as PortModel\n        ) as unknown as SpendPortModel;\n    }\n\n    addOutPort(label: string, after: boolean): OutputPortModel {\n        after = after || true;\n        const p = new OutputPortModel({\n            in: false,\n            name: label,\n            label: label,\n            alignment: PortModelAlignment.BOTTOM,\n        });\n        if (!after) {\n            this.portsOut.splice(0, 0, p);\n        }\n        return this.addPort(\n            p as unknown as PortModel\n        ) as unknown as OutputPortModel;\n    }\n\n    getInPorts(): DefaultPortModel[] {\n        return this.portsIn;\n    }\n    getOutPorts(): SpendPortModel[] {\n        return this.portsOut;\n    }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport * as Bitcoin from 'bitcoinjs-lib';\nimport Color from 'color';\nimport { BitcoinNodeManager, QueriedUTXO } from '../../Data/BitcoinNode';\nimport { ContractModel } from '../../Data/ContractManager';\nimport { update_utxomodel, UTXOModel } from '../../Data/UTXO';\nimport { AppDispatch, RootState } from '../../Store/store';\nimport { hasOwn, Outpoint, outpoint_to_id, TXID } from '../../util';\nexport type EntityType = ['TXN', TXID] | ['UTXO', Outpoint] | ['NULL', null];\ntype StateType = {\n    utxos: Record<string, QueriedUTXO>;\n    flash: string | null;\n    last_selected: EntityType;\n    show_entity_viewer: boolean;\n    colors: Record<string, string>;\n    purpose: Record<string, string>;\n};\nfunction default_state(): StateType {\n    return {\n        utxos: {},\n        flash: null,\n        last_selected: ['NULL', null],\n        show_entity_viewer: false,\n        colors: {},\n        purpose: {},\n    };\n}\n\nexport const entitySlice = createSlice({\n    name: 'Entity',\n    initialState: default_state(),\n    reducers: {\n        set_custom_color: (state, action: PayloadAction<[string, string]>) => {\n            state.colors[action.payload[0]] = action.payload[1];\n        },\n        set_custom_purpose: (\n            state,\n            action: PayloadAction<[string, string]>\n        ) => {\n            state.purpose[action.payload[0]] = action.payload[1];\n        },\n        clear_utxos: (state, action: { type: string }) => {\n            state.utxos = {};\n        },\n        select_txn: (state, action: PayloadAction<TXID>) => {\n            state.last_selected = ['TXN', action.payload];\n            state.show_entity_viewer = true;\n        },\n        select_utxo: (state, action: PayloadAction<Outpoint>) => {\n            state.last_selected = ['UTXO', action.payload];\n            state.show_entity_viewer = true;\n        },\n        deselect_entity: (state) => {\n            state.show_entity_viewer = false;\n        },\n        __flash: (state, action: { type: string; payload: string | null }) => {\n            if (action.payload) state.flash = action.payload;\n        },\n        __load_utxo: (\n            state,\n            action: {\n                type: string;\n                payload: [Outpoint, QueriedUTXO];\n            }\n        ) => {\n            const id = outpoint_to_id(action.payload[0]);\n            if (hasOwn(state.utxos, id)) return;\n            if (action.payload[1]) state.utxos[id] = action.payload[1];\n        },\n    },\n});\n\n/// private API\nconst { __load_utxo, __flash } = entitySlice.actions;\nexport const {\n    deselect_entity,\n    select_txn,\n    select_utxo,\n    clear_utxos,\n    set_custom_color,\n    set_custom_purpose,\n} = entitySlice.actions;\nexport const fetch_utxo =\n    (args: Outpoint) =>\n    async (dispatch: AppDispatch, getState: () => RootState) => {\n        if (hasOwn(getState().entityReducer.utxos, outpoint_to_id(args)))\n            return;\n        const utxo = await BitcoinNodeManager.fetch_utxo(args.hash, args.nIn);\n        if (utxo) {\n            dispatch(__load_utxo([args, utxo]));\n        }\n    };\n\nexport const create =\n    (tx: Bitcoin.Transaction, entity: UTXOModel, contract: ContractModel) =>\n    async (dispatch: AppDispatch, getState: () => RootState) => {\n        await BitcoinNodeManager.fund_out(tx)\n            .then((funded) => {\n                tx = funded;\n                update_utxomodel(entity);\n                // TODO: Fix continue APIs, maybe add a Data merge operation\n                //          const data: Data = {\n                //              program: [{\n                //                    txs: contract.txn_models.map((t) => {\n                //                        return { linked_psbt: t.get_json() };\n                //                    }), continue_apis: {}\n                //                }],\n                //          };\n                //        dispatch(load_new_model(data));\n            })\n            .catch((error) => {\n                dispatch(__flash(error.message));\n                setTimeout(() => {\n                    dispatch(__flash(null));\n                }, 3000);\n            });\n    };\n\nexport const selectUTXO = (\n    state: RootState\n): ((id: Outpoint) => QueriedUTXO | null) => {\n    return (id: Outpoint) => {\n        const id_s = outpoint_to_id(id);\n        return state.entityReducer.utxos[id_s] ?? null;\n    };\n};\n\nexport const selectUTXOColor: (\n    id: Outpoint\n) => (state: RootState) => Color | null = (id) => (state) => {\n    const color = state.entityReducer.colors[outpoint_to_id(id)];\n    if (!color) return null;\n    return Color(color);\n};\nexport const selectTXNColor: (id: TXID) => (state: RootState) => Color | null =\n    (id) => (state) => {\n        const color = state.entityReducer.colors[id];\n        if (!color) return null;\n        return Color(color);\n    };\nexport const selectTXNPurpose: (\n    id: TXID\n) => (state: RootState) => string | null = (id) => (state) =>\n    state.entityReducer.purpose[id] ?? null;\n\nexport const selectUTXOFlash = (state: RootState): string | null =>\n    state.entityReducer.flash;\n\nexport const selectEntityToView = (state: RootState): EntityType =>\n    state.entityReducer.last_selected;\nexport const selectShouldViewEntity = (state: RootState): boolean =>\n    state.entityReducer.show_entity_viewer;\n\nexport default entitySlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppDispatch, RootState } from './Store/store';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\nimport _ from 'lodash';\nimport { CreatedContract, Data } from './common/preload_interface';\n\ntype Pages =\n    | 'ContractCreator'\n    | 'ContractViewer'\n    | 'Wallet'\n    | 'Settings'\n    | 'MiniscriptCompiler'\n    | 'Chat';\ntype StateType = {\n    data: CreatedContract | null;\n    counter: number;\n    status_bar: boolean;\n    showing: Pages;\n};\nfunction default_state(): StateType {\n    return {\n        data: null,\n        counter: -1,\n        status_bar: true,\n        showing: 'Wallet',\n    };\n}\n\nexport const appSlice = createSlice({\n    name: 'App',\n    initialState: default_state(),\n    reducers: {\n        switch_showing: (state, action: PayloadAction<Pages>) => {\n            state.showing = action.payload;\n        },\n        load_new_model: (state, action: PayloadAction<CreatedContract>) => {\n            state.data = action.payload;\n            state.counter += 1;\n        },\n        toggle_status_bar: (state) => {\n            state.status_bar = !state.status_bar;\n        },\n        add_effect_to_contract: (\n            state,\n            action: PayloadAction<\n                [string, string, Record<string | number, unknown>]\n            >\n        ) => {\n            if (state.data === null) return;\n            if (state.data.args.context.effects === undefined)\n                state.data.args.context.effects = {};\n            if (state.data.args.context.effects.effects === undefined)\n                state.data.args.context.effects.effects = {};\n            const data =\n                state.data.args.context.effects.effects[action.payload[0]] ??\n                {};\n            data[action.payload[1]] = action.payload[2];\n            state.data.args.context.effects.effects[action.payload[0]] = data;\n        },\n    },\n});\n\nexport const {\n    switch_showing,\n    load_new_model,\n    toggle_status_bar,\n    add_effect_to_contract,\n} = appSlice.actions;\n\nexport const create_contract_of_type =\n    (type_arg: string, txn: string | null, contract: any) =>\n    async (dispatch: AppDispatch, getState: () => RootState) => {\n        const state = getState();\n        const compiled_contract = await window.electron.sapio.create_contract(\n            state.walletReducer.workspace,\n            type_arg,\n            txn,\n            contract\n        );\n        if ('ok' in compiled_contract && compiled_contract.ok)\n            dispatch(\n                load_new_model({\n                    args: JSON.parse(contract),\n                    name: type_arg,\n                    data: JSON.parse(compiled_contract.ok),\n                })\n            );\n    };\nexport const recreate_contract =\n    () => async (dispatch: AppDispatch, getState: () => RootState) => {\n        const s = getState();\n        if (s.appReducer.data === null) return;\n        return create_contract_of_type(\n            s.appReducer.data.name,\n            s.appReducer.data.data.program['funding']?.txs[0]?.linked_psbt\n                ?.psbt ?? null,\n            JSON.stringify(s.appReducer.data.args)\n        )(dispatch, getState);\n    };\n\nexport const open_contract_directory =\n    (file_name: string) =>\n    async (dispatch: AppDispatch, getState: () => RootState) => {\n        const state = getState();\n        window.electron.sapio.compiled_contracts\n            .open(state.walletReducer.workspace, file_name)\n            .then((v) => {\n                if ('err' in v) return;\n                return 'ok' in v && dispatch(load_new_model(v.ok));\n            });\n    };\n\nexport const create_contract_from_file =\n    () => async (dispatch: AppDispatch, getState: () => RootState) => {\n        window.electron.sapio\n            .open_contract_from_file()\n            .then(\n                (v) => 'ok' in v && dispatch(load_new_model(JSON.parse(v.ok)))\n            );\n    };\n\nexport const selectContract: (state: RootState) => [Data | null, number] = (\n    state: RootState\n) => [state.appReducer.data?.data ?? null, state.appReducer.counter];\n\nexport const selectCreatedContract: (\n    state: RootState\n) => CreatedContract | null = (state: RootState) => {\n    return state.appReducer.data;\n};\n\nexport const selectStatusBar: (state: RootState) => boolean = (\n    state: RootState\n) => state.appReducer.status_bar;\n\nconst createDeepEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    _.isEqual\n);\nexport const selectHasEffect = createDeepEqualSelector(\n    [\n        (state: RootState, path: string) =>\n            state.appReducer.data?.args.context.effects?.effects ?? {},\n    ],\n    (d) => Object.fromEntries(Object.keys(d).map((k) => [k, null]))\n);\n\nexport const selectShowing: (state: RootState) => Pages = (state: RootState) =>\n    state.appReducer.showing;\nexport default appSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../Store/store';\n\ntype Modals = 'ViewContract' | 'LoadHex' | 'SaveHex' | 'SapioServer';\ntype StateType = {\n    open_modal: Modals | null;\n};\nfunction default_state(): StateType {\n    return {\n        open_modal: null,\n    };\n}\n\nexport const modalSlice = createSlice({\n    name: 'App',\n    initialState: default_state(),\n    reducers: {\n        close_modal: (state) => {\n            state.open_modal = null;\n        },\n        open_modal: (state, action: PayloadAction<Modals>) => {\n            state.open_modal = action.payload;\n        },\n    },\n});\n\nexport const { close_modal, open_modal } = modalSlice.actions;\n\nexport const selectModal: (state: RootState) => Modals | null = (\n    state: RootState\n) => state.modalReducer.open_modal;\nexport default modalSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\n\nimport { RootState } from '../../Store/store';\nimport {\n    API,\n    APIPath,\n    Continuation,\n    ContinuationTable,\n} from '../../common/preload_interface';\nimport _ from 'lodash';\ntype CreatorStateType = {\n    apis: null | API;\n    selected_api: keyof API | null;\n    show: boolean;\n    continuations: ContinuationTable;\n};\nfunction default_state(): CreatorStateType {\n    return {\n        apis: null,\n        show: false,\n        selected_api: null,\n        continuations: {},\n    };\n}\n\nexport const contractCreatorSlice = createSlice({\n    name: 'ContractCreator',\n    initialState: default_state(),\n    reducers: {\n        set_apis: (state, action: PayloadAction<API>) => {\n            state.apis = action.payload;\n        },\n        select_api: (state, action: PayloadAction<keyof API | null>) => {\n            state.selected_api = action.payload;\n        },\n        show_apis: (state, action: PayloadAction<boolean>) => {\n            state.show = action.payload;\n        },\n        set_continuations: (\n            state,\n            action: PayloadAction<ContinuationTable>\n        ) => {\n            state.continuations = action.payload;\n        },\n    },\n});\nexport const { show_apis, set_apis, select_api, set_continuations } =\n    contractCreatorSlice.actions;\n\n//export const register = (dispatch: Dispatch) => {\n//    window.electron.register_callback('create_contracts', (apis: API) => {\n//        dispatch(set_apis(apis));\n//        dispatch(show_apis(true));\n//    });\n//};\nconst selectAPIs = (rs: RootState): API | null => {\n    return rs.contractCreatorReducer.apis;\n};\nconst selectSelectedAPI = (rs: RootState): keyof API | null => {\n    return rs.contractCreatorReducer.selected_api;\n};\n\nconst createDeepEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    _.isEqual\n);\n\nexport const selectAPI = createDeepEqualSelector(\n    [selectAPIs, selectSelectedAPI],\n    (apis, key) => (apis === null || key === null ? null : apis[key] ?? null)\n);\nexport const selectAPIEntries = createDeepEqualSelector([selectAPIs], (apis) =>\n    Object.entries(apis ?? {})\n);\n\nexport const showAPIs = (rs: RootState): boolean => {\n    return rs.contractCreatorReducer.show;\n};\n\nexport const selectContinuation = (\n    rs: RootState\n): ((out: string) => null | Record<APIPath, Continuation>) => {\n    return (s: string) => {\n        const v = rs.contractCreatorReducer.continuations[s];\n        return v ?? null;\n    };\n};\n\nexport const contractCreatorReducer = contractCreatorSlice.reducer;\n","import { InputLabel, MenuItem, Select } from '@mui/material';\nimport * as Bitcoin from 'bitcoinjs-lib';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n    sequence_convert,\n    time_to_pretty_string,\n    txid_buf_to_string,\n} from '../../../util';\nimport Hex, { ReadOnly } from './Hex';\nimport './InputDetail.css';\nimport { RefOutpointDetail } from './OutpointDetail';\ninterface IProps {\n    txinput: Bitcoin.TxInput;\n    witnesses: Buffer[][];\n}\nfunction maybeDecode(to_asm: boolean, elt: Buffer): string {\n    if (to_asm) {\n        return Bitcoin.script.toASM(\n            Bitcoin.script.decompile(elt) ?? Buffer.from('')\n        );\n    } else {\n        return elt.toString('hex');\n    }\n}\nexport function InputDetail(props: IProps) {\n    const dispatch = useDispatch();\n    const witness_selection_form = React.useRef<HTMLSelectElement>(null);\n    const [witness_selection, setWitness] = React.useState(0);\n    let witness_display = null;\n    if (\n        witness_selection !== undefined &&\n        props.witnesses.length > witness_selection\n    ) {\n        const index: number = witness_selection;\n        witness_display = props.witnesses[index]!.map((elt, i) => (\n            <Hex key={i} className=\"txhex\" value={maybeDecode(true, elt)} />\n        ));\n    }\n    const scriptValue = Bitcoin.script.toASM(\n        Bitcoin.script.decompile(props.txinput.script) ??\n            Buffer.from('Error Decompiling')\n    );\n    const seq = props.txinput.sequence;\n    const { relative_time, relative_height } = sequence_convert(seq);\n    const sequence =\n        relative_time === 0 ? (\n            relative_height === 0 ? null : (\n                <div className=\"InputDetailSequence\">\n                    <ReadOnly\n                        value={relative_height.toString()}\n                        label=\"Relative Height\"\n                    ></ReadOnly>\n                </div>\n            )\n        ) : (\n            <div className=\"InputDetailSequence\">\n                <ReadOnly\n                    value={time_to_pretty_string(relative_time)}\n                    label=\"Relative Time\"\n                ></ReadOnly>\n            </div>\n        );\n\n    const witness_options = props.witnesses.map((w, i) => (\n        <MenuItem key={i} value={i}>\n            {i}\n        </MenuItem>\n    ));\n    const scriptSig =\n        props.txinput.script.length === 0 ? null : (\n            <div className=\"InputDetailScriptSig\">\n                <Hex\n                    className=\"txhex\"\n                    value={scriptValue}\n                    label=\"ScriptSig\"\n                ></Hex>\n            </div>\n        );\n    // missing horizontal\n    return (\n        <div className=\"InputDetail\">\n            <RefOutpointDetail\n                txid={txid_buf_to_string(props.txinput.hash)}\n                n={props.txinput.index}\n            />\n            {sequence}\n            {scriptSig}\n            <form>\n                <InputLabel id=\"label-select-witness\">Witness</InputLabel>\n                <Select\n                    labelId=\"label-select-witness\"\n                    label=\"Witness\"\n                    variant=\"outlined\"\n                    ref={witness_selection_form}\n                    onChange={() => {\n                        const idx: number =\n                            parseInt(\n                                witness_selection_form.current?.value ?? '0'\n                            ) ?? 0;\n                        if (idx < props.witnesses.length && idx >= 0) {\n                            setWitness(idx);\n                        }\n                    }}\n                >\n                    {witness_options}\n                </Select>\n            </form>\n            <div>{witness_display}</div>\n        </div>\n    );\n}\n","import { IconButton, Tooltip } from '@mui/material';\nimport { green } from '@mui/material/colors';\nimport DoubleArrowIcon from '@mui/icons-material/DoubleArrow';\nimport * as Bitcoin from 'bitcoinjs-lib';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { UTXOModel } from '../../../Data/UTXO';\nimport { PrettyAmountField } from '../../../util';\nimport { select_utxo } from '../EntitySlice';\nimport Hex from './Hex';\nimport './OutputDetail.css';\n\ninterface OutputDetailProps {\n    txoutput: UTXOModel;\n}\nexport function OutputDetail(props: OutputDetailProps) {\n    const dispatch = useDispatch();\n    const opts = props.txoutput.getOptions();\n    const decomp =\n        Bitcoin.script.decompile(opts.utxo.script) ?? Buffer.from('');\n    const script = Bitcoin.script.toASM(decomp);\n\n    return (\n        <div className=\"OutputDetail\">\n            <PrettyAmountField amount={opts.utxo.amount} />\n            <Hex className=\"txhex\" value={script} label=\"Script\" />\n            <Tooltip title=\"Go To the Transaction that created this.\">\n                <IconButton\n                    aria-label=\"goto-creating-txn\"\n                    onClick={() =>\n                        dispatch(\n                            select_utxo({\n                                hash: opts.txn.get_txid(),\n                                nIn: opts.utxo.index,\n                            })\n                        )\n                    }\n                >\n                    <DoubleArrowIcon style={{ color: green[500] }} />\n                </IconButton>\n            </Tooltip>\n        </div>\n    );\n}\n","import { JSONSchema7 } from 'json-schema';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    IconButton,\n    Tooltip,\n    Typography,\n    useTheme,\n} from '@mui/material';\nimport { green, purple } from '@mui/material/colors';\nimport AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';\nimport CloudDownloadIcon from '@mui/icons-material/CloudDownload';\nimport DoubleArrowIcon from '@mui/icons-material/DoubleArrow';\nimport * as Bitcoin from 'bitcoinjs-lib';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContractModel } from '../../../Data/ContractManager';\nimport { PhantomTransactionModel } from '../../../Data/Transaction';\nimport { UTXOModel } from '../../../Data/UTXO';\nimport {\n    get_wtxid_backwards,\n    hasOwn,\n    is_mock_outpoint,\n    PrettyAmountField,\n    TXIDAndWTXIDMap,\n} from '../../../util';\nimport {\n    create,\n    EntityType,\n    fetch_utxo,\n    selectEntityToView,\n    selectUTXO,\n    selectUTXOFlash,\n    select_txn,\n} from '../EntitySlice';\nimport Hex, { ASM } from './Hex';\nimport { OutpointDetail } from './OutpointDetail';\nimport './UTXODetail.css';\nimport { selectContinuation } from '../../ContractCreator/ContractCreatorSlice';\nimport Form, { FormValidation, ISubmitEvent } from '@rjsf/core';\nimport {\n    add_effect_to_contract,\n    recreate_contract,\n    selectHasEffect,\n} from '../../../AppSlice';\nimport { RootState } from '../../../Store/store';\nimport {\n    Continuation,\n    UTXOFormatData,\n} from '../../../common/preload_interface';\n\ninterface UTXODetailProps {\n    entity: UTXOModel;\n    contract: ContractModel;\n}\n\nconst C = React.memo(UTXODetailInner, (prev, next) => {\n    const b = prev.entity == next.entity && prev.contract == next.contract;\n    console.log('NEWCHECK?', b);\n    return b;\n});\nexport function UTXODetail(props: { contract: ContractModel }) {\n    const entity_id: EntityType = useSelector(selectEntityToView);\n    const entity =\n        entity_id[0] === 'UTXO'\n            ? TXIDAndWTXIDMap.get_by_txid_s(\n                  props.contract.txid_map,\n                  entity_id[1].hash\n              )?.utxo_models[entity_id[1].nIn] ?? null\n            : null;\n    return (\n        <div hidden={entity === null}>\n            {entity && <C contract={props.contract} entity={entity}></C>}\n        </div>\n    );\n}\n\nexport function UTXODetailInner(props: UTXODetailProps) {\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const select_continuations = useSelector(selectContinuation);\n    const opts = props.entity.getOptions();\n    const txid = opts.txn.get_txid();\n    const idx = opts.utxo.index;\n    const outpoint = { hash: txid, nIn: idx };\n\n    const external_utxo = useSelector(selectUTXO)(outpoint);\n    const flash = useSelector(selectUTXOFlash);\n    const this_is_mock = is_mock_outpoint(outpoint);\n    const is_confirmed = external_utxo && external_utxo.confirmations > 0;\n    const decomp =\n        external_utxo?.scriptPubKey.address ??\n        Bitcoin.script.toASM(\n            Bitcoin.script.decompile(opts.utxo.script) ?? Buffer.from('')\n        );\n    // first attempt to get the address from the extenral utxo if it's present,\n    // otherwise attempt to read if from the utxo model\n    let address = external_utxo?.scriptPubKey.address;\n    let asm = external_utxo?.scriptPubKey.asm ?? null;\n    if (!address) {\n        address = 'UNKNOWN';\n        try {\n            asm = Bitcoin.script.toASM(opts.utxo.script);\n            address = Bitcoin.address.fromOutputScript(\n                opts.utxo.script,\n                /// TODO: Read from preferences?\n                Bitcoin.networks.regtest\n            );\n        } catch {\n            // TODO: Recovery?\n        }\n    }\n    const spends = opts.utxo.spends.map((elt, i) => (\n        <div key={get_wtxid_backwards(elt.tx)} className=\"Spend\">\n            <Hex value={elt.get_txid()} label=\"TXID\" />\n            <Tooltip title=\"Go To The Spending Transaction\">\n                <IconButton\n                    aria-label=\"goto-spending-txn\"\n                    onClick={() => dispatch(select_txn(elt.get_txid()))}\n                >\n                    <DoubleArrowIcon style={{ color: green[500] }} />\n                </IconButton>\n            </Tooltip>\n        </div>\n    ));\n    const creator =\n        !this_is_mock || is_confirmed ? null : (\n            <Tooltip title=\"Create Contract\">\n                <IconButton\n                    aria-label=\"create-contract\"\n                    onClick={() =>\n                        dispatch(\n                            create(opts.txn.tx, props.entity, props.contract)\n                        )\n                    }\n                >\n                    <AddCircleOutlineIcon style={{ color: green[500] }} />\n                </IconButton>\n            </Tooltip>\n        );\n    const check_exists =\n        this_is_mock || is_confirmed ? null : (\n            <Tooltip title=\"Check if Coin Exists\">\n                <IconButton\n                    aria-label=\"check-coin-exists\"\n                    onClick={() => dispatch(fetch_utxo(outpoint))}\n                >\n                    <CloudDownloadIcon style={{ color: purple[500] }} />\n                </IconButton>\n            </Tooltip>\n        );\n    const title =\n        opts.txn instanceof PhantomTransactionModel ? (\n            <p>External UTXO</p>\n        ) : (\n            <PrettyAmountField amount={opts.utxo.amount} />\n        );\n    const obj = select_continuations(`${txid}:${idx}`);\n    const continuations = obj\n        ? Object.entries(obj).map(([k, v]) => {\n              return <ContinuationOption key={k} v={v} />;\n          })\n        : null;\n    const cont = continuations ? (\n        <div>\n            <Typography variant=\"h5\" color={theme.palette.text.primary}>\n                Continuations\n            </Typography>\n            {continuations}\n        </div>\n    ) : null;\n\n    return (\n        <div className=\"UTXODetail\">\n            <div>{flash}</div>\n            <div>\n                {creator}\n                {check_exists}\n            </div>\n            {title}\n            {cont}\n            <OutputMetadataTable metadata={opts.metadata} />\n            <OutpointDetail txid={txid} n={idx} />\n            <ASM className=\"txhex\" value={address} label=\"Address\" />\n            <ASM className=\"txhex\" value={asm ?? 'UNKNOWN'} label=\"ASM\" />\n            {asm}\n            <Typography variant=\"h5\" color={theme.palette.text.primary}>\n                Spent By\n            </Typography>\n            {spends}\n        </div>\n    );\n}\n\nfunction OutputMetadataTable(props: { metadata: UTXOFormatData }) {\n    return (\n        <>\n            <Typography variant=\"h5\">Metadata</Typography>\n            <SIMPNeg12345\n                simp_neg_12345={props.metadata.simp[-12345]}\n            ></SIMPNeg12345>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Key</th>\n                        <th>Value</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {Object.entries(props.metadata)\n                        .filter(([k, _]) => k !== 'simp')\n                        .map(([k, v]) => (\n                            <tr key={k}>\n                                <td>\n                                    <Typography>{k}</Typography>\n                                </td>\n                                <td>\n                                    <Typography>\n                                        {typeof v === 'string'\n                                            ? v\n                                            : JSON.stringify(v)}\n                                    </Typography>\n                                </td>\n                            </tr>\n                        ))}\n                </tbody>\n            </table>\n        </>\n    );\n}\n\nfunction SIMPNeg12345(props: { simp_neg_12345?: any }) {\n    let nft = null;\n    if (props.simp_neg_12345) {\n        nft = (\n            <div>\n                <img\n                    style={{ maxWidth: '50%' }}\n                    src={`https://${props.simp_neg_12345.cid}.ipfs.nftstorage.link`}\n                ></img>\n            </div>\n        );\n    }\n\n    return nft;\n}\n\nfunction ContinuationOption(props: { v: Continuation }) {\n    const [is_open, setOpen] = React.useState(false);\n    const name = props.v.path.substr(props.v.path.lastIndexOf('/') + 1);\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            <Button onClick={() => setOpen(true)} variant=\"contained\">\n                {name}\n            </Button>\n            <Dialog open={is_open} onClose={() => setOpen(false)}>\n                <DialogTitle>\n                    <Typography variant=\"h5\">{name}</Typography>\n                    <ASM\n                        className=\"txhex\"\n                        value={props.v.path}\n                        label=\"Full Path\"\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <MemoizeContForm {...props} />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => dispatch(recreate_contract())}>\n                        Recompile\n                    </Button>\n                    <Button onClick={() => setOpen(false)}>Close</Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nconst name_schema: JSONSchema7 = {\n    title: 'Name for this Update',\n    type: 'string',\n};\nconst MemoizeContForm = React.memo(ContForm, (prev, next) => {\n    return prev.v.path === next.v.path;\n});\nfunction ContForm(props: { v: Continuation }) {\n    const dispatch = useDispatch();\n    const form = React.useRef<any | null>(null);\n    const name_form = React.useRef<any | null>(null);\n    const this_effect_name = React.useRef('');\n    const submit = (e: ISubmitEvent<any>) => {\n        const name = this_effect_name.current;\n        const data = e.formData;\n        dispatch(add_effect_to_contract([props.v.path, name, data]));\n    };\n    const has_effect = useSelector((s: RootState) =>\n        selectHasEffect(s, props.v.path)\n    );\n    const validate_name_unique = (\n        data: string,\n        errors: FormValidation\n    ): FormValidation => {\n        if (data === '') errors.addError('Name Required');\n        if (hasOwn(has_effect, data)) errors.addError('Name Already Used');\n        this_effect_name.current = data;\n        return errors;\n    };\n    return (\n        <div>\n            <Form\n                schema={name_schema}\n                validate={validate_name_unique}\n                liveValidate\n                // NOTE: This is a bug documented here\n                // https://github.com/rjsf-team/react-jsonschema-form/issues/2135\n                // eslint-disable-next-line\n                // @ts-ignore\n                ref={name_form}\n            >\n                <div\n                // Cancels native submit button\n                ></div>\n            </Form>\n            <Form\n                schema={props.v.schema}\n                onSubmit={submit}\n                // NOTE: This is a bug documented here\n                // https://github.com/rjsf-team/react-jsonschema-form/issues/2135\n                // eslint-disable-next-line\n                // @ts-ignore\n                ref={form}\n            ></Form>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Tooltip, TextField } from '@mui/material';\nimport { useTheme } from '@mui/material';\nfunction BaseHex(props: { value: string; styling: string; label?: string }) {\n    const [tip_message, set_tip] = React.useState(null as null | string);\n    const code = React.useRef<HTMLDivElement>(null);\n    const theme = useTheme();\n    const copy = () => {\n        navigator.clipboard.writeText(props.value);\n        set_tip('Copied!');\n        setTimeout(() => {\n            set_tip(null);\n        }, 1000);\n    };\n\n    React.useEffect(() => {\n        code.current?.addEventListener('dblclick', copy);\n    });\n    return (\n        <Tooltip\n            title={tip_message ?? 'double click to copy.'}\n            arrow\n            placement=\"top\"\n        >\n            <div>\n                <TextField\n                    ref={code}\n                    fullWidth\n                    label={props.label}\n                    defaultValue={props.value}\n                    variant=\"outlined\"\n                    InputProps={{\n                        readOnly: true,\n                    }}\n                />\n            </div>\n        </Tooltip>\n    );\n}\nexport default function Hex(props: {\n    value: string;\n    className?: string;\n    label?: string;\n}) {\n    return BaseHex({ ...props, styling: 'truncate ' + props.className });\n}\n\nexport function ASM(props: {\n    value: string;\n    className?: string;\n    label?: string;\n}) {\n    return BaseHex({ ...props, styling: 'ASM ' + props.className });\n}\n\nexport function ReadOnly(props: { value: React.ReactNode; label: string }) {\n    return (\n        <TextField\n            fullWidth\n            label={props.label}\n            defaultValue={props.value}\n            variant=\"outlined\"\n            InputProps={{\n                readOnly: true,\n            }}\n        />\n    );\n}\n","import {\n    Box,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    TextareaAutosize,\n    Typography,\n} from '@mui/material';\nimport * as React from 'react';\nimport './Compiler.css';\nimport * as Bitcoin from 'bitcoinjs-lib';\ntype Compiler = typeof import('../../Miniscript/pkg/');\nexport function MiniscriptCompiler() {\n    const [miniscript, load_miniscript] = React.useState<null | Compiler>(null);\n    React.useEffect(() => {\n        async function load() {\n            import('../../Miniscript/pkg').then((native) => {\n                load_miniscript(native);\n            });\n        }\n        if (miniscript === null) load();\n    }, [miniscript]);\n    if (!miniscript) return <h1>Loading WASM...</h1>;\n    else return <CompInput miniscript={miniscript}></CompInput>;\n}\ntype taproot_t = {\n    address: {\n        main: string;\n        regtest: string;\n        signet: string;\n        test: string;\n    };\n    internal_key: string;\n    merkle_root: string;\n    scripts: Array<[[string, number], string[][]]>;\n    tweak: string;\n};\nconst UNICODE_LINE = /\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029]/;\nfunction CompInput(props: { miniscript: Compiler }) {\n    type ResultT = ['err', string, string] | ['ok', string, string];\n    const [compiled, set_compiled] = React.useState<ResultT[]>([]);\n    const [keytab_string, set_keytab_string] = React.useState<string>('');\n    const updated = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n    ) => {\n        // some unicode thing\n        const ret: ResultT[] = event.target.value\n            .split(UNICODE_LINE)\n            .flatMap((v: string): ResultT[] => {\n                if (v.match(UNICODE_LINE)) return [];\n                try {\n                    /// TODO: Cache based on V\n                    const s = props.miniscript.compile(v);\n                    return [['ok', v, s]];\n                } catch (e) {\n                    if (typeof e === 'string') return [['err', v, e]];\n                    else throw e;\n                }\n            });\n        set_compiled(ret);\n    };\n    const keytab_updated = (\n        event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n    ) => {\n        set_keytab_string(event.target.value);\n    };\n    const [taproot, set_taproot] = React.useState<taproot_t | null>(null);\n    React.useEffect(() => {\n        // some unicode thing\n        const k = props.miniscript.KeyTab.new();\n        const ret = keytab_string.split(UNICODE_LINE).forEach((v: string) => {\n            if (v.match(UNICODE_LINE)) return [];\n            if (v === '') return [];\n            const nick_key = v.split(':', 2);\n            if (nick_key.length !== 2) return []; //throw new Error(`Malformed Keytab Entry: ${v}`);\n            k.add(nick_key[0]!.trim(), nick_key[1]!.trim());\n        });\n        const frags = props.miniscript.Fragments.new();\n        for (const frag of compiled) {\n            // eslint-disable-next-line no-constant-condition\n            if (frag[0] === 'err') {\n                set_taproot(null);\n                console.log(frag);\n                return;\n            }\n            frags.add(frag[2]);\n        }\n        try {\n            const compiled = props.miniscript.taproot(frags, k);\n            set_taproot(JSON.parse(compiled));\n        } catch (e) {\n            set_taproot(null);\n            console.log(e);\n        }\n    }, [keytab_string, compiled]);\n\n    return (\n        <Box className=\"MiniscriptCompiler\">\n            <h1>Input</h1>\n            <TextareaAutosize\n                onChange={updated}\n                minRows={3}\n                style={{ width: '50%' }}\n            />\n\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell variant=\"head\">Input</TableCell>\n                        <TableCell variant=\"head\">{'=>'}</TableCell>\n                        <TableCell variant=\"head\">Output</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {compiled.map((row, i) => (\n                        <TableRow key={`${row[1]}#${i}`}>\n                            <TableCell\n                                style={{\n                                    whiteSpace: 'pre-wrap',\n                                    wordBreak: 'break-word',\n                                }}\n                            >\n                                <Typography\n                                    className=\"CompilerOutput\"\n                                    component=\"code\"\n                                >\n                                    {row[1]}\n                                </Typography>\n                            </TableCell>\n                            <TableCell> {'=>'} </TableCell>\n                            <TableCell>\n                                <Typography\n                                    style={{\n                                        whiteSpace: 'pre-wrap',\n                                        wordBreak: 'break-word',\n                                    }}\n                                    className=\"CompilerOutput\"\n                                    component=\"code\"\n                                >\n                                    {row[2]}\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n            <h1>Translate Keys</h1>\n            <TextareaAutosize\n                onChange={keytab_updated}\n                minRows={3}\n                style={{ width: '50%' }}\n            />\n            <div>{taproot && <ShowTaproot {...taproot}></ShowTaproot>}</div>\n        </Box>\n    );\n}\n\nfunction ShowTaproot(props: taproot_t) {\n    const paths = props.scripts.flatMap(([[script, depth], paths]) => {\n        const parsed = Bitcoin.script.decompile(Buffer.from(script, 'hex'));\n        let asm: string;\n        if (parsed) asm = Bitcoin.script.toASM(parsed);\n        else asm = `Unparsable: ${script}`;\n        return paths.map((path) => {\n            return (\n                <TableRow key={`${path}`} className=\"PathRow\">\n                    <TableCell>{depth}</TableCell>\n                    <TableCell>\n                        <code>{asm}</code>\n                    </TableCell>\n                    <TableCell>{path}</TableCell>\n                </TableRow>\n            );\n        });\n    });\n\n    return (\n        <div>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell variant=\"head\">type</TableCell>\n                        <TableCell variant=\"head\">address</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    <TableRow>\n                        <TableCell>main</TableCell>\n                        <TableCell>{props.address.main}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>signet</TableCell>\n                        <TableCell>{props.address.main}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>regtest</TableCell>\n                        <TableCell>{props.address.regtest}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>testnet</TableCell>\n                        <TableCell>{props.address.test}</TableCell>\n                    </TableRow>\n                </TableBody>\n            </Table>\n            <Table className=\"TapPaths\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell variant=\"head\"> Script </TableCell>\n                        <TableCell variant=\"head\"> Depth </TableCell>\n                        <TableCell variant=\"head\"> Path</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>{paths}</TableBody>\n            </Table>\n        </div>\n    );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport _ from 'lodash';\nimport { RootState } from '../Store/store';\nimport { Dispatch } from '@reduxjs/toolkit';\ntype Networks = 'Bitcoin' | 'Regtest' | 'Testnet' | 'Signet';\ntype Settings = {\n    display: DisplaySettings;\n    bitcoin: { network: Networks };\n};\n\ntype DisplaySettings = {\n    animation_speed: 'Disabled' | { Enabled: number };\n    node_polling_freq: number;\n    satoshis:\n        | { BitcoinAfter: number }\n        | { AlwaysSats: null }\n        | { AlwaysBitcoin: null };\n};\nexport type SettingsStateType = {\n    settings: Settings;\n};\n\nfunction default_state(): SettingsStateType {\n    return {\n        settings: {\n            display: {\n                animation_speed: 'Disabled',\n                node_polling_freq: 0,\n                satoshis: { AlwaysBitcoin: null },\n            },\n            bitcoin: {\n                network: 'Bitcoin',\n            },\n        },\n    };\n}\n\nexport async function poll_settings(dispatch: Dispatch) {\n    dispatch(\n        load_settings({\n            settings: {\n                display: (await window.electron.load_settings_sync(\n                    'display'\n                )) as unknown as any,\n                bitcoin: (await window.electron.load_settings_sync(\n                    'bitcoin'\n                )) as unknown as any,\n            },\n        })\n    );\n}\nexport const settingsSlice = createSlice({\n    name: 'Settings',\n    initialState: default_state(),\n    reducers: {\n        load_settings: (state, action: PayloadAction<SettingsStateType>) => {\n            state = _.merge(state, action.payload);\n        },\n    },\n});\n\nexport const { load_settings } = settingsSlice.actions;\n\nexport const selectMaxSats: (state: RootState) => number = (\n    state: RootState\n) => {\n    if (!state.settingsReducer.settings.display.satoshis) return 0;\n    if ('BitcoinAfter' in state.settingsReducer.settings.display.satoshis)\n        return state.settingsReducer.settings.display.satoshis.BitcoinAfter;\n    else if ('AlwaysSats' in state.settingsReducer.settings.display.satoshis)\n        return 100000000 * 21000000;\n    return 0;\n};\n\nexport const selectNodePollFreq: (state: RootState) => number = (\n    state: RootState\n) => {\n    return state.settingsReducer.settings.display.node_polling_freq;\n};\n\nexport const selectNetwork: (state: RootState) => Networks = (\n    state: RootState\n) => state.settingsReducer.settings.bitcoin.network;\n\nexport const selectAnimateFlow: (state: RootState) => number = (\n    state: RootState\n) => {\n    if (state.settingsReducer.settings.display.animation_speed === 'Disabled')\n        return 0;\n    return state.settingsReducer.settings.display.animation_speed.Enabled;\n};\n\nexport const settingsReducer = settingsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../Store/store';\nimport { hasOwn, TXID } from '../util';\ntype SimulationState = {\n    unreachable_models: Record<TXID, null>;\n    show: boolean;\n};\nfunction default_state(): SimulationState {\n    return {\n        unreachable_models: {},\n        show: false,\n    };\n}\n\nexport const simulationSlice = createSlice({\n    name: 'Simulation',\n    initialState: default_state(),\n    reducers: {\n        set_unreachable: (state, action: PayloadAction<Record<TXID, null>>) => {\n            state.unreachable_models = action.payload;\n        },\n        toggle_showing: (state) => {\n            state.show = !state.show;\n        },\n    },\n});\n\nexport const { set_unreachable, toggle_showing } = simulationSlice.actions;\n\nexport const selectIsReachable: (state: RootState) => (t: TXID) => boolean =\n    (state: RootState) => (t: TXID) =>\n        !hasOwn(state.simulationReducer.unreachable_models, t);\nexport const selectSimIsShowing: (state: RootState) => boolean = (\n    state: RootState\n) => state.simulationReducer.show;\n\nexport const simulationReducer = simulationSlice.reducer;\n"],"sourceRoot":""}