{"version":3,"sources":["Miniscript/pkg/index.js","Miniscript/pkg/index_bg.js"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","takeObject","ret","dropObject","compile","s","retptr","ptr0","len0","r0","r1","r2","r3","ptr1","len1","cachegetUint32Memory0","passArrayJsValueToWasm0","array","Uint32Array","i","_assertClass","instance","klass","Error","name","taproot","frags","keytab","Fragments","KeyTab","this","__destroy_into_raw","Object","create","prototype","__wrap","k","v","__wbindgen_string_new","arg0","arg1","__wbindgen_string_get","x","__wbindgen_object_drop_ref","__wbindgen_throw"],"mappings":"2IAAA,+Z,6VCIIA,EAAoB,IAFoB,qBAAhBC,aAA8B,EAAIC,EAAOC,SAAS,QAAQF,YAAcA,aAE3D,QAAS,CAAEG,WAAW,EAAMC,OAAO,IAE5EL,EAAkBM,SAElB,IAAIC,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBE,SAAWC,IAAYD,SAC7EF,EAAuB,IAAII,WAAWD,IAAYD,SAE/CF,EAGX,SAASK,EAAmBC,EAAKC,GAC7B,OAAOd,EAAkBM,OAAOE,IAAkBO,SAASF,EAAKA,EAAMC,IAG1E,IAAME,EAAO,IAAIC,MAAM,IAAIC,UAAKC,GAEhCH,EAAKI,UAAKD,EAAW,MAAM,GAAM,GAEjC,IAAIE,EAAYL,EAAKM,OAErB,SAASC,EAAcC,GACfH,IAAcL,EAAKM,QAAQN,EAAKI,KAAKJ,EAAKM,OAAS,GACvD,IAAMG,EAAMJ,EAIZ,OAHAA,EAAYL,EAAKS,GAEjBT,EAAKS,GAAOD,EACLC,EAGX,SAASC,EAAUD,GAAO,OAAOT,EAAKS,GAEtC,IAAIE,EAAkB,EAIlBC,EAAoB,IAFoB,qBAAhBC,aAA8B,EAAI3B,EAAOC,SAAS,QAAQ0B,YAAcA,aAE3D,SAEnCC,EAAwD,oBAAjCF,EAAkBG,WACzC,SAAUC,EAAKC,GACjB,OAAOL,EAAkBG,WAAWC,EAAKC,IAEvC,SAAUD,EAAKC,GACjB,IAAMC,EAAMN,EAAkBO,OAAOH,GAErC,OADAC,EAAKG,IAAIF,GACF,CACHG,KAAML,EAAIV,OACVgB,QAASJ,EAAIZ,SAIrB,SAASiB,EAAkBP,EAAKQ,EAAQC,GAEpC,QAAgBtB,IAAZsB,EAAuB,CACvB,IAAMP,EAAMN,EAAkBO,OAAOH,GAC/BnB,EAAM2B,EAAON,EAAIZ,QAGvB,OAFAd,IAAkBO,SAASF,EAAKA,EAAMqB,EAAIZ,QAAQc,IAAIF,GACtDP,EAAkBO,EAAIZ,OACfT,EAUX,IAPA,IAAIC,EAAMkB,EAAIV,OACVT,EAAM2B,EAAO1B,GAEX4B,EAAMlC,IAERmC,EAAS,EAENA,EAAS7B,EAAK6B,IAAU,CAC3B,IAAMC,EAAOZ,EAAIa,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAI7B,EAAM8B,GAAUC,EAGxB,GAAID,IAAW7B,EAAK,CACD,IAAX6B,IACAX,EAAMA,EAAIc,MAAMH,IAEpB9B,EAAM4B,EAAQ5B,EAAKC,EAAKA,EAAM6B,EAAsB,EAAbX,EAAIV,QAC3C,IAAMW,EAAOzB,IAAkBO,SAASF,EAAM8B,EAAQ9B,EAAMC,GAG5D6B,GAFYb,EAAaE,EAAKC,GAEhBK,QAIlB,OADAX,EAAkBgB,EACX9B,EAOX,IAAIkC,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBtC,SAAWC,IAAYD,SAC7EsC,EAAuB,IAAIE,WAAWvC,IAAYD,SAE/CsC,EASX,SAASG,EAAWzB,GAChB,IAAM0B,EAAMzB,EAAUD,GAEtB,OATJ,SAAoBA,GACZA,EAAM,KACVT,EAAKS,GAAOJ,EACZA,EAAYI,GAKZ2B,CAAW3B,GACJ0B,EAMJ,SAASE,EAAQC,GACpB,IACI,IAAMC,EAAS7C,KAAsC,IACjD8C,EAAOjB,EAAkBe,EAAG5C,IAAwBA,KACpD+C,EAAO9B,EACXjB,IAAa6C,EAAQC,EAAMC,GAC3B,IAAIC,EAAKV,IAAkBO,EAAS,EAAI,GACpCI,EAAKX,IAAkBO,EAAS,EAAI,GACpCK,EAAKZ,IAAkBO,EAAS,EAAI,GACpCM,EAAKb,IAAkBO,EAAS,EAAI,GACpCO,EAAOJ,EACPK,EAAOJ,EACX,GAAIE,EAEA,MADAC,EAAO,EAAGC,EAAO,EACXb,EAAWU,GAErB,OAAOhD,EAAmBkD,EAAMC,GAfpC,QAiBIrD,IAAqC,IACrCA,IAAqBoD,EAAMC,IAInC,IAAIC,EAAwB,KAQ5B,SAASC,EAAwBC,EAAO1B,GAGpC,IAFA,IAAM3B,EAAM2B,EAAsB,EAAf0B,EAAM5C,QACnBoB,GARwB,OAA1BsB,GAAkCA,EAAsBvD,SAAWC,IAAYD,SAC/EuD,EAAwB,IAAIG,YAAYzD,IAAYD,SAEjDuD,GAMEI,EAAI,EAAGA,EAAIF,EAAM5C,OAAQ8C,IAC9B1B,EAAI7B,EAAM,EAAIuD,GAAK7C,EAAc2C,EAAME,IAG3C,OADAzC,EAAkBuC,EAAM5C,OACjBT,EAGX,SAASwD,EAAaC,EAAUC,GAC5B,KAAMD,aAAoBC,GACtB,MAAM,IAAIC,MAAJ,+BAAkCD,EAAME,OAElD,OAAOH,EAASzD,IAOb,SAAS6D,EAAQC,EAAOC,GAC3B,IACI,IAAMrB,EAAS7C,KAAsC,IACrD2D,EAAaM,EAAOE,GACpB,IAAIrB,EAAOmB,EAAM9D,IACjB8D,EAAM9D,IAAM,EACZwD,EAAaO,EAAQE,GACrBpE,IAAa6C,EAAQC,EAAMoB,EAAO/D,KAClC,IAAI6C,EAAKV,IAAkBO,EAAS,EAAI,GACpCI,EAAKX,IAAkBO,EAAS,EAAI,GACpCK,EAAKZ,IAAkBO,EAAS,EAAI,GACpCM,EAAKb,IAAkBO,EAAS,EAAI,GACpCO,EAAOJ,EACPK,EAAOJ,EACX,GAAIE,EAEA,MADAC,EAAO,EAAGC,EAAO,EACXb,EAAWU,GAErB,OAAOhD,EAAmBkD,EAAMC,GAjBpC,QAmBIrD,IAAqC,IACrCA,IAAqBoD,EAAMC,IAM5B,IAAMc,EAAb,6GAUQ,IAAMhE,EAAMkE,KAAKlE,IAGjB,OAFAkE,KAAKlE,IAAM,EAEJA,IAbf,6BAiBQ,IAAMA,EAAMkE,KAAKC,qBACjBtE,IAA0BG,KAlBlC,0BA8BQyC,GACA,IAAIE,EAAOjB,EAAkBe,EAAG5C,IAAwBA,KACpD+C,EAAO9B,EACXjB,IAAmBqE,KAAKlE,IAAK2C,EAAMC,KAjC3C,8BAuCYH,GACJ,IAAIE,EAAOS,EAAwBX,EAAG5C,KAClC+C,EAAO9B,EAEX,OAAe,IADLjB,IAAuBqE,KAAKlE,IAAK2C,EAAMC,MA1CzD,8BAEkB5C,GACV,IAAMW,EAAMyD,OAAOC,OAAOL,EAAUM,WAGpC,OAFA3D,EAAIX,IAAMA,EAEHW,IANf,4BAwBQ,IAAI2B,EAAMzC,MACV,OAAOmE,EAAUO,OAAOjC,OAzBhC,KAgDa2B,EAAb,6GAUQ,IAAMjE,EAAMkE,KAAKlE,IAGjB,OAFAkE,KAAKlE,IAAM,EAEJA,IAbf,6BAiBQ,IAAMA,EAAMkE,KAAKC,qBACjBtE,IAAuBG,KAlB/B,0BA+BQwE,EAAGC,GACH,IAAI9B,EAAOjB,EAAkB8C,EAAG3E,IAAwBA,KACpD+C,EAAO9B,EACPmC,EAAOvB,EAAkB+C,EAAG5E,IAAwBA,KACpDqD,EAAOpC,EACXjB,IAAgBqE,KAAKlE,IAAK2C,EAAMC,EAAMK,EAAMC,MApCpD,8BAEkBlD,GACV,IAAMW,EAAMyD,OAAOC,OAAOJ,EAAOK,WAGjC,OAFA3D,EAAIX,IAAMA,EAEHW,IANf,4BAwBQ,IAAI2B,EAAMzC,MACV,OAAOoE,EAAOM,OAAOjC,OAzB7B,KAwCO,SAASoC,EAAsBC,EAAMC,GAExC,OAAOlE,EADGX,EAAmB4E,EAAMC,IAIhC,SAASC,EAAsBF,EAAMC,GACxC,IAxMgBE,EAwMVnE,EAAME,EAAU+D,GAClBtC,EAAsB,kBAAT3B,EAAoBA,OAAML,EACvCqC,OAzMSrC,KADGwE,EA0MMxC,IAzMU,OAANwC,EAyMG,EAAIpD,EAAkBY,EAAKzC,IAAwBA,KAC5E+C,EAAO9B,EACXqB,IAAkBwC,EAAO,EAAI,GAAK/B,EAClCT,IAAkBwC,EAAO,EAAI,GAAKhC,EAG/B,SAASoC,EAA2BJ,GACvCtC,EAAWsC,GAGR,SAASK,EAAiBL,EAAMC,GACnC,MAAM,IAAIjB,MAAM5D,EAAmB4E,EAAMC,O","file":"static/js/3.0735cf57.chunk.js","sourcesContent":["import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";","import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n* @param {string} s\n* @returns {string}\n*/\nexport function compile(s) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.compile(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4);\n    const mem = getUint32Memory0();\n    for (let i = 0; i < array.length; i++) {\n        mem[ptr / 4 + i] = addHeapObject(array[i]);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* @param {Fragments} frags\n* @param {KeyTab} keytab\n* @returns {string}\n*/\nexport function taproot(frags, keytab) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(frags, Fragments);\n        var ptr0 = frags.ptr;\n        frags.ptr = 0;\n        _assertClass(keytab, KeyTab);\n        wasm.taproot(retptr, ptr0, keytab.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n*/\nexport class Fragments {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Fragments.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_fragments_free(ptr);\n    }\n    /**\n    * @returns {Fragments}\n    */\n    static new() {\n        var ret = wasm.fragments_new();\n        return Fragments.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    */\n    add(s) {\n        var ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.fragments_add(this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {any[]} s\n    * @returns {boolean}\n    */\n    add_all(s) {\n        var ptr0 = passArrayJsValueToWasm0(s, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.fragments_add_all(this.ptr, ptr0, len0);\n        return ret !== 0;\n    }\n}\n/**\n*/\nexport class KeyTab {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KeyTab.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keytab_free(ptr);\n    }\n    /**\n    * @returns {KeyTab}\n    */\n    static new() {\n        var ret = wasm.keytab_new();\n        return KeyTab.__wrap(ret);\n    }\n    /**\n    * @param {string} k\n    * @param {string} v\n    */\n    add(k, v) {\n        var ptr0 = passStringToWasm0(k, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(v, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.keytab_add(this.ptr, ptr0, len0, ptr1, len1);\n    }\n}\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    var ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"sourceRoot":""}